
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication Tables
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      String   @default("user")
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Security Relations
  userRoles            UserRole[]
  userMFA              UserMFA[]
  userBiometric        UserBiometric[]
  trustedDevices       TrustedDevice[]
  accessRequests       AccessRequest[]
  jitAccessRequests    JITAccessRequest[]
  privilegedAccounts   PrivilegedAccount[]
  dataSubjectRequests  DataSubjectRequest[] @relation("DataSubjectRequester")
  targetedDataRequests DataSubjectRequest[] @relation("DataSubjectTarget")
  consentRecords       ConsentRecord[]
  
  // Advanced Security Relations
  webauthnCredentials  WebAuthnCredential[]
  biometricProfiles    BiometricProfile[]
  behavioralProfiles   BehavioralProfile[]
  
  // Task Management Relations
  assignedTasks        Task[]  @relation("UserTasks")

  // Widget Factory Relations
  createdBlueprints    WidgetBlueprint[] @relation("BlueprintCreator")
  canvasProjects       CanvasProject[]
  collaborationSessions CollaborationSession[]

  // Analytics Relations
  analyticsEvents      AnalyticsEvent[]
  metricSnapshots      MetricSnapshot[]

  // Integration Relations
  integrationTests     IntegrationTest[]
  apiConnectors        APIConnector[]

  // Audit Relations
  auditLogs           AuditLog[]
  complianceAudits    ComplianceAudit[]

  // CHUNK 8: COMMUNITY-DRIVEN DEVELOPMENT RELATIONS
  
  // Community Platform Relations
  authoredThreads      ForumThread[] @relation("ThreadAuthor")
  authoredPosts        ForumPost[] @relation("PostAuthor")
  postReactions        PostReaction[] @relation("UserPostReactions")
  postReports          PostReport[] @relation("UserPostReports")
  eventRegistrations   EventRegistration[] @relation("UserEventRegistrations")
  eventFeedback        EventFeedback[] @relation("UserEventFeedback")
  organizedEvents      CommunityEvent[] @relation("EventOrganizer")
  authoredArticles     KnowledgeArticle[] @relation("ArticleAuthor")
  articleComments      ArticleComment[] @relation("CommentAuthor")
  articleBookmarks     ArticleBookmark[] @relation("UserArticleBookmarks")
  moderatorActions     CommunityModeration[] @relation("ModeratorActions")
  reputation           CommunityReputation? @relation("UserReputation")
  badges               UserBadge[] @relation("UserBadges")
  achievements         UserAchievement[] @relation("UserAchievements")
  
  // Plugin & Extension Relations
  developerPlugins     Plugin[] @relation("DeveloperPlugins")
  pluginInstallations  PluginInstallation[] @relation("UserPluginInstallations")
  pluginReviews        PluginReview[] @relation("UserPluginReviews")
  pluginApprovals      PluginApproval[] @relation("PluginReviewer")
  
  // Marketplace Relations
  createdWidgets       MarketplaceWidget[] @relation("CreatedMarketplaceWidgets")
  createdTemplates     MarketplaceTemplate[] @relation("CreatedMarketplaceTemplates")
  widgetReviews        MarketplaceWidgetReview[] @relation("UserMarketplaceWidgetReviews")
  templateReviews      MarketplaceTemplateReview[] @relation("UserMarketplaceTemplateReviews")
  widgetDownloads      WidgetDownload[] @relation("UserWidgetDownloads")
  templateDownloads    TemplateDownload[] @relation("UserTemplateDownloads")
  widgetFavorites      WidgetFavorite[] @relation("UserWidgetFavorites")
  templateFavorites    TemplateFavorite[] @relation("UserTemplateFavorites")
  creatorRevenueShares RevenueShare[] @relation("CreatorRevenueShares")
  buyerTransactions    MarketplaceTransaction[] @relation("BuyerTransactions")
  sellerTransactions   MarketplaceTransaction[] @relation("SellerTransactions")
  
  // Developer Collaboration Relations
  developerProfile     DeveloperProfile? @relation("UserDeveloperProfile")
  codeComments         CodeComment[] @relation("UserCodeComments")
  codeLikes            CodeLike[] @relation("UserCodeLikes")
  authoredCodeReviews  CodeReview[] @relation("AuthorCodeReviews")
  reviewedCodeReviews  CodeReview[] @relation("ReviewerCodeReviews")
  
  // Open Source Relations
  maintainedProjects   OpenSourceProject[] @relation("MaintainedProjects")
  contributions        Contribution[] @relation("UserContributions")
  contributionTracking ContributionTracking[] @relation("UserContributionTracking")
  communityRecognition CommunityRecognition[] @relation("UserCommunityRecognition")
  
  // Community Engagement Relations
  organizedChallenges  CommunityChallenge[] @relation("OrganizedChallenges")
  challengeSubmissions ChallengeSubmission[] @relation("UserChallengeSubmissions")
  createdShowcases     DeveloperShowcase[] @relation("CreatedShowcases")
  showcaseComments     ShowcaseComment[] @relation("UserShowcaseComments")
  showcaseLikes        ShowcaseLike[] @relation("UserShowcaseLikes")
  authoredNewsletters  CommunityNewsletter[] @relation("AuthoredNewsletters")
  postedJobs           CommunityJob[] @relation("PostedJobs")
  communityFeedback    CommunityFeedback[] @relation("UserCommunityFeedback")
  feedbackVotes        FeedbackVote[] @relation("UserFeedbackVotes")
  feedbackComments     FeedbackComment[] @relation("UserFeedbackComments")

  // CHUNK 9: CUSTOMER SHOWCASE MARKETPLACE RELATIONS
  authoredSuccessStories       CustomerSuccessStory[] @relation("AuthoredSuccessStories")
  approvedSuccessStories       CustomerSuccessStory[] @relation("ApprovedSuccessStories")
  moderatedTestimonials        TestimonialModeration[] @relation("TestimonialModerator")
  initiatedCaseStudyCollaborations CaseStudyCollaboration[] @relation("CaseStudyInitiator")

  // CHUNK 10: GAMIFICATION SYSTEM RELATIONS
  gamificationProfile          GamificationProfile?

  // CHUNK 12: SECONDARY MARKET PLATFORM RELATIONS
  secondaryMarketListings     SecondaryMarketListing[] @relation("ListingCreator")
  ownedDigitalAssets         DigitalAssetOwnership[] @relation("AssetOwner")
  previousAssetOwnerships    DigitalAssetOwnership[] @relation("PreviousOwner")
  buyerSecondaryTransactions SecondaryMarketTransaction[] @relation("SecondaryBuyer")
  sellerSecondaryTransactions SecondaryMarketTransaction[] @relation("SecondarySeller")
  buyerEscrowAccounts        EscrowAccount[] @relation("BuyerEscrow")
  sellerEscrowAccounts       EscrowAccount[] @relation("SellerEscrow")
  disputeSubmissions         DisputeResolution[] @relation("DisputeSubmitter")
  disputeResponses           DisputeResolution[] @relation("DisputeRespondent")
  creatorProfile             CreatorProfile? @relation("UserCreatorProfile")
  creatorSubscriptions       CreatorSubscription[] @relation("SubscriberUser")
  ownedCreatorSubscriptions  CreatorSubscription[] @relation("CreatorUser")
  creatorRoyaltiesReceived   CreatorRoyalty[] @relation("RoyaltyRecipient")
  secondaryRevenueShares     SecondaryRevenueShare[] @relation("SecondaryCreator")
  assetTransferHistory       AssetTransferHistory[] @relation("TransferUser")
  creatorPayouts             CreatorPayout[] @relation("PayoutCreator")

  // CHUNK 13+14: YouTube/Referral Ecosystem + Advanced Analytics Relations
  youtubeChannels            YouTubeChannel[]
  socialShares               SocialShareTracking[]
  influencerPartnerships     InfluencerPartnership[]

  // CHUNK 15: INTERNATIONAL EXPANSION RELATIONS
  languagePreferences        UserLanguagePreference[]
  internationalPreference    UserInternationalPreference?

  // COMPREHENSIVE ENTERPRISE CRM RELATIONS
  ownedCompanies             CRMCompany[] @relation("CompanyOwner")
  ownedContacts              CRMContact[] @relation("ContactOwner")
  ownedDeals                 CRMDeal[] @relation("DealOwner")
  ownedActivities            CRMActivity[] @relation("ActivityOwner")
  authoredNotes              CRMNote[] @relation("NoteAuthor")
  uploadedDocuments          CRMDocument[] @relation("DocumentUploader")
  assignedCRMTasks           CRMTask[] @relation("TaskAssignee")
  createdTasks               CRMTask[] @relation("TaskCreator")
  sentEmails                 CRMEmail[] @relation("EmailSender")
  madeCalls                  CRMCall[] @relation("CallCaller")
  organizedMeetings          CRMMeeting[] @relation("MeetingOrganizer")
  meetingAttendances         CRMMeetingAttendee[] @relation("MeetingAttendeeUser")
  createdReports             CRMReport[] @relation("ReportCreator")
  createdDashboards          CRMDashboard[] @relation("DashboardCreator")

  @@map("users")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  domain    String   @unique
  subdomain String   @unique
  plan      String   @default("basic")
  isActive  Boolean  @default(true)
  settings  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Enhanced Tenant Configuration
  maxUsers      Int      @default(100)
  storageLimit  BigInt   @default(10737418240) // 10GB in bytes
  bandwidthLimit BigInt  @default(107374182400) // 100GB in bytes
  apiCallLimit  Int      @default(100000)
  customDomain  String?
  sslEnabled    Boolean  @default(false)
  status        String   @default("active") // active, suspended, migrating, terminated
  tier          String   @default("standard") // basic, standard, premium, enterprise
  
  // Tenant Isolation Configuration
  isolationLevel String  @default("shared") // shared, dedicated, private
  databaseName   String?
  schemaName     String?
  
  // Tenant Branding & Customization
  branding       Json    @default("{}")
  customCSS      String?
  customJS       String?
  logoUrl        String?
  faviconUrl     String?
  primaryColor   String  @default("#0066cc")
  secondaryColor String  @default("#666666")
  
  // Resource Allocation
  resourceQuotas Json    @default("{}")
  usageMetrics   Json    @default("{}")
  billingConfig  Json    @default("{}")
  
  // Compliance & Governance
  complianceLevel String  @default("standard") // standard, enhanced, maximum
  dataResidency   String? // Region requirement
  retentionPeriod Int     @default(2555) // 7 years in days
  auditLevel      String  @default("standard") // minimal, standard, comprehensive
  
  // Multi-Region Support
  primaryRegion   String  @default("eu-north-1")
  regions         Json    @default("[]")
  
  // Advanced Features
  features        Json    @default("{}")
  integrations    Json    @default("{}")  
  workflows       Json    @default("{}")
  notifications   Json    @default("{}")
  
  // Tenant Lifecycle
  provisionedAt   DateTime?
  lastAccessedAt  DateTime @default(now())
  suspendedAt     DateTime?
  terminatedAt    DateTime?
  
  // Billing & Usage Tracking
  currentPeriodStart  DateTime @default(now())
  currentPeriodEnd    DateTime @default(now())
  billingEmail        String?
  paymentStatus       String   @default("active") // active, overdue, suspended
  
  users User[]

  // Multi-Tenant Optimization Relations
  tenantConfigurations    TenantConfiguration[]
  tenantBrandings         TenantBranding[]
  tenantResources         TenantResource[]
  tenantUsageRecords      TenantUsageRecord[]
  tenantAnalytics         TenantAnalytics[]
  tenantCustomizations    TenantCustomization[]
  tenantIntegrationConfigs TenantIntegrationConfig[]
  tenantWorkflows         TenantWorkflow[]
  tenantNotifications     TenantNotification[]
  tenantBackups           TenantBackup[]
  tenantMigrations        TenantMigration[]

  // Analytics Relations
  analyticsEvents      AnalyticsEvent[]
  metricSnapshots      MetricSnapshot[]

  // Integration Relations
  integrationTests     IntegrationTest[]
  apiConnectors        APIConnector[]
  erpIntegrations      ERPIntegration[]
  crmIntegrations      CRMIntegration[]
  hrIntegrations       HRIntegration[]
  financialIntegrations FinancialIntegration[]
  cloudIntegrations    CloudIntegration[]
  communicationIntegrations CommunicationIntegration[]
  biIntegrations       BIIntegration[]

  // Widget Factory Relations
  widgetBlueprints     WidgetBlueprint[]
  canvasProjects       CanvasProject[]
  collaborationSessions CollaborationSession[]

  // Audit Relations
  auditLogs           AuditLog[]
  complianceAudits    ComplianceAudit[]

  // Security Relations
  securityEvents      SecurityEvent[]
  threatEvents        ThreatEvent[]
  securityAlerts      SecurityAlert[]
  consentRecords      ConsentRecord[]
  dataSubjectRequests DataSubjectRequest[]

  // CHUNK 6: MONITORING & ANALYTICS RELATIONS
  systemMonitors       SystemMonitor[]
  liveMetrics         LiveMetric[]
  resourceUsages      ResourceUsage[]
  userEngagements     UserEngagement[]
  featureUsages       FeatureUsage[]
  conversionFunnels   ConversionFunnel[]
  revenueAnalytics    RevenueAnalytics[]
  apmMetrics          APMMetric[]
  webVitals           WebVital[]
  queryPerformances   QueryPerformance[]
  userJourneys        UserJourney[]
  heatmapData         HeatmapData[]
  sessionRecordings   SessionRecording[]
  abTests             ABTest[]
  behavioralSegments  BehavioralSegment[]
  uptimeMonitors      UptimeMonitor[]
  errorRates          ErrorRate[]
  alertConfigurations AlertConfiguration[]
  incidentResponses   IncidentResponse[]
  
  // CHUNK 7: API & INTEGRATION POWERHOUSE RELATIONS
  webhookEndpoints    WebhookEndpoint[]
  ecommerceIntegrations EcommerceIntegration[]
  marketingIntegrations MarketingIntegration[]
  paymentIntegrations PaymentIntegration[]
  socialIntegrations  SocialIntegration[]
  analyticsIntegrations AnalyticsIntegration[]
  integrationWorkflows IntegrationWorkflow[]

  // CHUNK 8: COMMUNITY-DRIVEN DEVELOPMENT RELATIONS
  
  // Community Platform Relations
  communityForums     CommunityForum[]
  communityEvents     CommunityEvent[]
  knowledgeArticles   KnowledgeArticle[]
  communityModerations CommunityModeration[]
  
  // Plugin & Extension Relations
  pluginInstallations PluginInstallation[]
  
  // Community Engagement Relations
  communityChallenges CommunityChallenge[]
  developerShowcases  DeveloperShowcase[]
  communityNewsletters CommunityNewsletter[]
  communityJobs       CommunityJob[]
  communityFeedback   CommunityFeedback[]

  // CHUNK 9: CUSTOMER SHOWCASE MARKETPLACE RELATIONS
  customerSuccessStories       CustomerSuccessStory[] @relation("TenantCustomerSuccessStories")
  customerProfiles             CustomerProfile[] @relation("TenantCustomerProfiles")
  customerSpotlights           CustomerSpotlight[] @relation("TenantCustomerSpotlights")
  industryShowcases            IndustryShowcase[] @relation("TenantIndustryShowcases")
  customerJourneyMaps          CustomerJourneyMap[] @relation("TenantCustomerJourneyMaps")
  transformationStories        TransformationStory[] @relation("TenantTransformationStories")
  customerAchievements         CustomerAchievement[] @relation("TenantCustomerAchievements")
  testimonials                 Testimonial[] @relation("TenantTestimonials")
  testimonialCollections       TestimonialCollection[] @relation("TenantTestimonialCollections")
  testimonialWidgets           TestimonialWidget[] @relation("TenantTestimonialWidgets")
  testimonialModerations       TestimonialModeration[] @relation("TenantTestimonialModerations")
  successMetrics               SuccessMetric[] @relation("TenantSuccessMetrics")
  roiTracking                  ROITracking[] @relation("TenantROITracking")
  benchmarkComparisons         BenchmarkComparison[] @relation("TenantBenchmarkComparisons")
  industryPerformance          IndustryPerformance[] @relation("TenantIndustryPerformance")
  customMetricDefinitions      CustomMetricDefinition[] @relation("TenantCustomMetricDefinitions")
  customerAdvocates            CustomerAdvocate[] @relation("TenantCustomerAdvocates")
  referralPrograms             ReferralProgram[] @relation("TenantReferralPrograms")
  referralTracking             ReferralTracking[] @relation("TenantReferralTracking")
  advocateRewards              AdvocateReward[] @relation("TenantAdvocateRewards")
  ambassadorPrograms           AmbassadorProgram[] @relation("TenantAmbassadorPrograms")
  advocacyChallenges           AdvocacyChallenge[] @relation("TenantAdvocacyChallenges")
  advocacyContent              AdvocacyContent[] @relation("TenantAdvocacyContent")
  caseStudyTemplates           CaseStudyTemplate[] @relation("TenantCaseStudyTemplates")
  caseStudyCollaborations      CaseStudyCollaboration[] @relation("TenantCaseStudyCollaborations")
  caseStudyAnalytics           CaseStudyAnalytics[] @relation("TenantCaseStudyAnalytics")
  caseStudyDistribution        CaseStudyDistribution[] @relation("TenantCaseStudyDistribution")
  customerLogos                CustomerLogo[] @relation("TenantCustomerLogos")
  successQuotes                SuccessQuote[] @relation("TenantSuccessQuotes")
  industryAwards               IndustryAward[] @relation("TenantIndustryAwards")
  pressReleases                PressRelease[] @relation("TenantPressReleases")

  // CHUNK 10: GAMIFICATION SYSTEM RELATIONS
  gamificationProfiles         GamificationProfile[]
  gamificationRules            GamificationRule[]
  gamificationAchievements     GamificationAchievement[]
  leaderboards                 Leaderboard[]
  competitions                 Competition[]
  rewardItems                  RewardItem[]
  virtualCurrencies            VirtualCurrency[]
  dailyChallenges              DailyChallenge[]
  teamGamifications            TeamGamification[]
  gamificationAnalytics        GamificationAnalytics[]

  // CHUNK 12: SECONDARY MARKET PLATFORM RELATIONS
  secondaryMarketListings      SecondaryMarketListing[]
  digitalAssetOwnerships       DigitalAssetOwnership[]
  secondaryTransactions        SecondaryMarketTransaction[]
  escrowAccounts              EscrowAccount[]
  disputeResolutions          DisputeResolution[]
  creatorProfiles             CreatorProfile[]
  creatorSubscriptions        CreatorSubscription[]
  dynamicPricingRules         DynamicPricingRule[]
  marketDemandAnalytics       MarketDemandAnalytics[]
  platformEconomicsData       PlatformEconomics[]
  creatorPayouts              CreatorPayout[]

  // CHUNK 13+14: YouTube/Referral Ecosystem + Advanced Analytics Relations
  youtubeChannels            YouTubeChannel[]
  youtubeVideos              YouTubeVideo[]
  youtubeAnalytics           YouTubeAnalytics[]
  youtubeVideoAnalytics      YouTubeVideoAnalytics[]
  youtubeSEOOptimizations    YouTubeSEOOptimization[]
  contentSyndications        ContentSyndication[]
  viralGrowthAnalytics       ViralGrowthAnalytics[]
  contentReferralTracking    ContentReferralTracking[]
  socialShareTracking        SocialShareTracking[]
  influencerPartnerships     InfluencerPartnership[]
  influencerCampaigns        InfluencerCampaign[]
  influencerContent          InfluencerContent[]
  influencerAnalytics        InfluencerAnalytics[]
  predictiveAnalytics        PredictiveAnalytics[]
  aiInsights                 AIInsights[]
  trendAnalysis              TrendAnalysis[]
  competitiveIntelligence    CompetitiveIntelligence[]
  contentPerformanceAnalytics ContentPerformanceAnalytics[]

  // CHUNK 15: INTERNATIONAL EXPANSION RELATIONS
  tenantLanguages            TenantLanguage[]
  tenantCurrencies           TenantCurrency[]
  tenantMarketRegions        TenantMarketRegion[]
  tenantPaymentMethods       TenantPaymentMethod[]
  internationalTransactions InternationalTransaction[]
  marketAnalytics            MarketAnalytics[]
  supportTickets             SupportTicket[]
  expansionRoadmaps          ExpansionRoadmap[]

  // CRM SYSTEM RELATIONS
  crmCompanies              CRMCompany[]
  crmContacts               CRMContact[]
  crmDeals                  CRMDeal[]
  crmProducts               CRMProduct[]
  crmActivities             CRMActivity[]
  crmNotes                  CRMNote[]
  crmDocuments              CRMDocument[]
  crmTasks                  CRMTask[]
  crmEmails                 CRMEmail[]
  crmCalls                  CRMCall[]
  crmMeetings               CRMMeeting[]
  crmPipelines              CRMPipeline[]
  crmReports                CRMReport[]
  crmDashboards             CRMDashboard[]

  // New model relations (resolving TODO items)
  eventStores               EventStore[]
  processedData             ProcessedData[]
  integrations              Integration[]
  tenantFeatureFlags        TenantFeatureFlag[]
  healthChecks              HealthCheck[]
  autoRecoveryActions       AutoRecoveryAction[]

  @@map("tenants")
}

// MULTI-TENANT OPTIMIZATION MODELS

// Tenant Configuration Management
model TenantConfiguration {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  category    String   // "features", "limits", "security", "branding", "integrations"
  key         String
  value       Json
  type        String   @default("string") // string, number, boolean, json, array
  description String?
  isActive    Boolean  @default(true)
  isSystem    Boolean  @default(false)
  validationRules Json @default("{}")
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?

  @@unique([tenantId, category, key])
  @@map("tenant_configurations")
}

// Advanced Tenant Branding
model TenantBranding {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  brandName       String?
  logoUrl         String?
  logoUrlDark     String?
  faviconUrl      String?
  primaryColor    String   @default("#0066cc")
  secondaryColor  String   @default("#666666")
  accentColor     String   @default("#0099ff")
  backgroundColor String   @default("#ffffff")
  textColor       String   @default("#333333")
  fontFamily      String   @default("Inter")
  customCSS       String?
  customJS        String?
  customHTML      String?
  emailTemplate   String?
  loginTheme      String   @default("default")
  dashboardTheme  String   @default("light")
  isActive        Boolean  @default(true)
  version         Int      @default(1)
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([tenantId])
  @@map("tenant_brandings")
}

// Tenant Resource Management
model TenantResource {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  resourceType  String   // "database", "storage", "compute", "bandwidth", "api_calls"
  resourceName  String
  allocatedAmount BigInt // In appropriate units (bytes, calls, etc.)
  usedAmount    BigInt   @default(0)
  maxAmount     BigInt?  // Optional hard limit
  unit          String   // "bytes", "calls", "users", "requests"
  costPerUnit   Float    @default(0.0)
  region        String?
  provider      String?
  configuration Json     @default("{}")
  status        String   @default("active") // active, suspended, over_limit
  alertThreshold Float   @default(0.8) // Alert at 80% usage
  resetPeriod   String   @default("monthly") // daily, weekly, monthly, yearly
  lastReset     DateTime @default(now())
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([tenantId, resourceType, resourceName])
  @@map("tenant_resources")
}

// Tenant Usage Tracking
model TenantUsageRecord {
  id           String   @id @default(cuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  resourceType String   // "database", "storage", "compute", "bandwidth", "api_calls", "users"
  metricName   String   // "daily_api_calls", "storage_used", "active_users"
  value        BigInt
  unit         String
  timestamp    DateTime @default(now())
  period       String   @default("hourly") // hourly, daily, weekly, monthly
  aggregation  String   @default("sum") // sum, avg, max, min, count
  region       String?
  userId       String?  // Optional user attribution
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now())

  @@index([tenantId, resourceType, timestamp])
  @@index([tenantId, period, timestamp])
  @@map("tenant_usage_records")
}

// Tenant Analytics & Monitoring
model TenantAnalytics {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  metricCategory  String   // "performance", "usage", "billing", "security", "users"
  metricName      String
  metricValue     Float
  metricUnit      String?
  dimensions      Json     @default("{}")
  timestamp       DateTime @default(now())
  period          String   @default("daily") // hourly, daily, weekly, monthly
  trendDirection  String?  // "up", "down", "stable"
  percentChange   Float?   // Compared to previous period
  alertTriggered  Boolean  @default(false)
  alertLevel      String?  // "info", "warning", "critical"
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())

  @@index([tenantId, metricCategory, timestamp])
  @@index([tenantId, timestamp])
  @@map("tenant_analytics")
}

// Tenant Customizations
model TenantCustomization {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customizationType String // "ui", "workflow", "feature", "integration", "notification"
  name          String
  description   String?
  configuration Json
  isActive      Boolean  @default(true)
  priority      Int      @default(0)
  conditions    Json     @default("{}")
  effects       Json     @default("{}")
  version       Int      @default(1)
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String?
  updatedBy     String?

  @@unique([tenantId, customizationType, name])
  @@map("tenant_customizations")
}

// Tenant Integration Configurations
model TenantIntegrationConfig {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  integrationType String   // "api", "webhook", "sso", "directory", "payment"
  integrationName String
  configuration   Json
  credentials     Json     @default("{}")
  isActive        Boolean  @default(true)
  status          String   @default("configured") // configured, active, error, suspended
  lastSync        DateTime?
  syncFrequency   String?  // "realtime", "hourly", "daily", "weekly"
  errorCount      Int      @default(0)
  lastError       String?
  successCount    Int      @default(0)
  rateLimits      Json     @default("{}")
  monitoring      Json     @default("{}")
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?

  @@unique([tenantId, integrationType, integrationName])
  @@map("tenant_integration_configs")
}

// Tenant Workflows
model TenantWorkflow {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String
  description String?
  trigger     Json     // Event trigger configuration
  conditions  Json     @default("[]") // Conditional logic
  actions     Json     @default("[]") // Actions to perform
  isActive    Boolean  @default(true)
  priority    Int      @default(0)
  category    String   @default("general") // general, security, billing, user_management
  executionCount Int   @default(0)
  lastExecuted DateTime?
  successCount Int     @default(0)
  errorCount   Int     @default(0)
  lastError    String?
  timeout      Int     @default(300) // seconds
  retryPolicy  Json    @default("{}")
  metadata     Json    @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String?
  updatedBy    String?

  @@unique([tenantId, name])
  @@map("tenant_workflows")
}

// Tenant Notifications
model TenantNotification {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  type          String   // "email", "sms", "webhook", "slack", "teams"
  category      String   // "billing", "security", "system", "usage", "alerts"
  title         String
  message       String
  recipient     String   // Email, phone, URL, etc.
  status        String   @default("pending") // pending, sent, delivered, failed
  priority      String   @default("normal") // low, normal, high, critical
  scheduled     DateTime?
  sentAt        DateTime?
  deliveredAt   DateTime?
  failedAt      DateTime?
  errorMessage  String?
  retryCount    Int      @default(0)
  maxRetries    Int      @default(3)
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([tenantId, status])
  @@index([tenantId, category, createdAt])
  @@map("tenant_notifications")
}

// Tenant Backup Management
model TenantBackup {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  backupType    String   // "full", "incremental", "differential"
  dataTypes     String[] // ["database", "files", "configurations", "settings"]
  status        String   @default("scheduled") // scheduled, running, completed, failed
  size          BigInt?  // Backup size in bytes
  location      String?  // Storage location/path
  compression   Boolean  @default(true)
  encryption    Boolean  @default(true)
  retentionDays Int      @default(30)
  scheduledAt   DateTime?
  startedAt     DateTime?
  completedAt   DateTime?
  failedAt      DateTime?
  errorMessage  String?
  checksum      String?
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([tenantId, backupType, status])
  @@index([tenantId, completedAt])
  @@map("tenant_backups")
}

// Tenant Migration Management
model TenantMigration {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  migrationType       String   // "region", "plan", "infrastructure", "data", "full"
  sourceConfiguration Json
  targetConfiguration Json
  status              String   @default("planned") // planned, running, paused, completed, failed, cancelled
  progress            Float    @default(0.0) // 0.0 to 100.0
  currentStep         String?
  totalSteps          Int      @default(0)
  completedSteps      Int      @default(0)
  estimatedDuration   Int?     // minutes
  actualDuration      Int?     // minutes
  dataTransferred     BigInt   @default(0) // bytes
  totalDataSize       BigInt?  // bytes
  downtime            Int      @default(0) // minutes
  rollbackPlan        Json     @default("{}")
  validationResults   Json     @default("{}")
  scheduledAt         DateTime?
  startedAt           DateTime?
  completedAt         DateTime?
  failedAt            DateTime?
  cancelledAt         DateTime?
  errorMessage        String?
  logs                Json     @default("[]")
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  createdBy           String?

  @@index([tenantId, status])
  @@index([tenantId, migrationType, createdAt])
  @@map("tenant_migrations")
}

// ==========================================
// CHUNK 15: INTERNATIONAL EXPANSION MODELS
// ==========================================

// Global Languages & Localization
model Language {
  id           String   @id @default(cuid())
  code         String   @unique // ISO 639-1 (en, sv, de, fr, etc.)
  name         String   // English name
  nativeName   String   // Native name (Français, Deutsch, etc.)
  isRTL        Boolean  @default(false) // Right-to-left languages
  isActive     Boolean  @default(true)
  priority     Int      @default(0) // Sort order
  region       String?  // Primary region
  country      String?  // Primary country
  
  // Cultural Formatting
  dateFormat   String   @default("MM/dd/yyyy")
  timeFormat   String   @default("HH:mm")
  numberFormat Json     @default("{}")
  currencyPosition String @default("before") // before, after
  
  // Translation completeness
  completeness Float    @default(0.0) // 0-100%
  lastUpdated  DateTime @default(now())
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  translations       Translation[]
  tenantLanguages    TenantLanguage[]
  userPreferences    UserLanguagePreference[]
  contentLocalizations ContentLocalization[]
  marketRegions      MarketRegion[]
  
  @@map("languages")
}

// Translation Management System
model Translation {
  id         String   @id @default(cuid())
  languageId String
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
  namespace  String   // "common", "dashboard", "billing", etc.
  key        String   // Translation key
  value      String   // Translated text
  
  // Context & Metadata
  context    String?  // Usage context
  description String? // Translator notes
  isPlural   Boolean  @default(false)
  pluralForm String?  // For plural translations
  
  // Quality & Status
  status     String   @default("pending") // pending, approved, rejected, needs_review
  quality    String   @default("machine") // machine, human, professional, native
  confidence Float?   // AI translation confidence
  
  // Versioning
  version    Int      @default(1)
  isActive   Boolean  @default(true)
  
  // Attribution
  translatedBy String?
  reviewedBy   String?
  approvedBy   String?
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([languageId, namespace, key])
  @@index([namespace, key])
  @@map("translations")
}

// Tenant Language Configuration
model TenantLanguage {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  languageId        String
  language          Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
  
  isDefault         Boolean  @default(false)
  isActive          Boolean  @default(true)
  priority          Int      @default(0)
  
  // Customization
  customizations    Json     @default("{}")
  dateFormat        String?
  timeFormat        String?
  numberFormat      Json?
  currencyFormat    Json?
  
  // Completion tracking
  translationStatus String   @default("incomplete") // complete, incomplete, in_progress
  completeness      Float    @default(0.0)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([tenantId, languageId])
  @@map("tenant_languages")
}

// User Language Preferences
model UserLanguagePreference {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  languageId String
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
  
  isPrimary  Boolean  @default(false)
  proficiency String  @default("native") // native, fluent, intermediate, basic
  
  // UI Preferences
  dateFormat String?
  timeFormat String?
  timezone   String?
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([userId, languageId])
  @@map("user_language_preferences")
}

// Global Currency Management
model Currency {
  id           String   @id @default(cuid())
  code         String   @unique // ISO 4217 (USD, EUR, SEK, etc.)
  name         String   // US Dollar, Euro, Swedish Krona
  symbol       String   // $, €, kr
  symbolPosition String @default("before") // before, after
  
  // Formatting
  decimalPlaces Int     @default(2)
  decimalSeparator String @default(".")
  thousandsSeparator String @default(",")
  
  // Exchange Rate Management
  exchangeRate  Float?  // Relative to base currency (USD)
  lastUpdated   DateTime?
  isBaseCurrency Boolean @default(false)
  
  // Status
  isActive      Boolean  @default(true)
  isCrypto      Boolean  @default(false)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  tenantCurrencies     TenantCurrency[]
  paymentMethods       PaymentMethod[]
  priceLocalizations   PriceLocalization[]
  exchangeRateHistory  ExchangeRateHistory[]
  marketRegions        MarketRegion[]
  
  @@map("currencies")
}

// Exchange Rate History
model ExchangeRateHistory {
  id           String   @id @default(cuid())
  currencyId   String
  currency     Currency @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  
  rate         Float
  baseCurrency String   @default("USD")
  provider     String   // "ecb", "fixer", "currencylayer", etc.
  timestamp    DateTime @default(now())
  
  @@index([currencyId, timestamp])
  @@map("exchange_rate_history")
}

// Tenant Currency Configuration
model TenantCurrency {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  currencyId        String
  currency          Currency @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  
  isDefault         Boolean  @default(false)
  isActive          Boolean  @default(true)
  
  // Pricing Configuration
  markupPercentage  Float    @default(0.0)
  roundingRule      String   @default("nearest") // up, down, nearest
  minimumCharge     Float?
  
  // Payment Processing
  paymentProvider   String?
  processingFee     Float    @default(0.0)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([tenantId, currencyId])
  @@map("tenant_currencies")
}

// Global Market Regions
model MarketRegion {
  id            String   @id @default(cuid())
  code          String   @unique // NA, EU, APAC, LATAM, etc.
  name          String
  description   String?
  
  // Geographic Data
  countries     String[] // Country codes
  timezones     String[] // Timezone identifiers
  
  // Default Settings
  languageId    String
  language      Language @relation(fields: [languageId], references: [id])
  currencyId    String
  currency      Currency @relation(fields: [currencyId], references: [id])
  
  // Business Configuration
  businessHours Json     @default("{}")
  holidays      Json     @default("[]")
  workingDays   String[] @default(["monday", "tuesday", "wednesday", "thursday", "friday"])
  
  // Cultural Settings
  culturalNorms Json     @default("{}")
  colorScheme   Json     @default("{}")
  
  isActive      Boolean  @default(true)
  priority      Int      @default(0)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  tenantRegions          TenantMarketRegion[]
  paymentMethods         PaymentMethod[]
  culturalCustomizations CulturalCustomization[]
  marketAnalytics        MarketAnalytics[]
  
  @@map("market_regions")
}

// Tenant Market Region Configuration
model TenantMarketRegion {
  id               String       @id @default(cuid())
  tenantId         String
  tenant           Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  marketRegionId   String
  marketRegion     MarketRegion @relation(fields: [marketRegionId], references: [id], onDelete: Cascade)
  
  isActive         Boolean      @default(true)
  launchDate       DateTime?
  
  // Localization Settings
  customizations   Json         @default("{}")
  features         Json         @default("{}")
  restrictions     Json         @default("{}")
  
  // Performance Metrics
  penetration      Float        @default(0.0) // Market penetration %
  revenue          Float        @default(0.0)
  userCount        Int          @default(0)
  conversionRate   Float        @default(0.0)
  
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  @@unique([tenantId, marketRegionId])
  @@map("tenant_market_regions")
}

// Global Payment Methods
model PaymentMethod {
  id              String       @id @default(cuid())
  name            String       // "Stripe", "PayPal", "Klarna", etc.
  code            String       @unique // "stripe", "paypal", "klarna"
  type            String       // "card", "bank_transfer", "digital_wallet", "bnpl"
  
  // Regional Availability
  marketRegionId  String
  marketRegion    MarketRegion @relation(fields: [marketRegionId], references: [id])
  countries       String[]     // Specific countries if different from region
  
  // Currency Support
  currencyId      String
  currency        Currency     @relation(fields: [currencyId], references: [id])
  supportedCurrencies String[] @default([])
  
  // Configuration
  configuration   Json         @default("{}")
  apiCredentials  Json         @default("{}")
  webhookUrl      String?
  
  // Fees & Limits
  processingFee   Float        @default(0.0)
  fixedFee        Float        @default(0.0)
  minimumAmount   Float?
  maximumAmount   Float?
  
  // Features
  supportRefunds  Boolean      @default(true)
  supportPartialRefunds Boolean @default(true)
  supportRecurring Boolean     @default(false)
  support3DS      Boolean      @default(false)
  
  // Status
  isActive        Boolean      @default(true)
  testMode        Boolean      @default(false)
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relations
  tenantPaymentMethods TenantPaymentMethod[]
  transactions         InternationalTransaction[]
  
  @@map("payment_methods")
}

// Tenant Payment Method Configuration
model TenantPaymentMethod {
  id                String        @id @default(cuid())
  tenantId          String
  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  paymentMethodId   String
  paymentMethod     PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)
  
  isActive          Boolean       @default(true)
  priority          Int           @default(0)
  
  // Custom Configuration
  customConfig      Json          @default("{}")
  customFees        Json          @default("{}")
  
  // Credentials (encrypted)
  credentials       Json          @default("{}")
  
  // Usage Limits
  dailyLimit        Float?
  monthlyLimit      Float?
  
  // Status Tracking
  lastUsed          DateTime?
  transactionCount  Int           @default(0)
  totalVolume       Float         @default(0.0)
  errorCount        Int           @default(0)
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  @@unique([tenantId, paymentMethodId])
  @@map("tenant_payment_methods")
}

// International Transaction Tracking
model InternationalTransaction {
  id                    String        @id @default(cuid())
  tenantId              String
  tenant                Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  paymentMethodId       String
  paymentMethod         PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  
  // Transaction Details
  amount                Float
  originalCurrency      String
  convertedCurrency     String?
  exchangeRate          Float?
  convertedAmount       Float?
  
  // Processing
  status                String        @default("pending") // pending, processing, completed, failed, refunded
  externalTransactionId String?
  processingFee         Float         @default(0.0)
  
  // Geographic Data
  sourceCountry         String
  targetCountry         String?
  ipCountry             String?
  
  // Risk Assessment
  riskScore             Float         @default(0.0)
  fraudChecks           Json          @default("{}")
  complianceChecks      Json          @default("{}")
  
  // Timing
  initiatedAt           DateTime      @default(now())
  processedAt           DateTime?
  completedAt           DateTime?
  failedAt              DateTime?
  
  // Error Handling
  errorCode             String?
  errorMessage          String?
  retryCount            Int           @default(0)
  
  // Metadata
  metadata              Json          @default("{}")
  
  @@index([tenantId, status])
  @@index([sourceCountry, targetCountry])
  @@map("international_transactions")
}



// Cultural Customization System
model CulturalCustomization {
  id               String       @id @default(cuid())
  marketRegionId   String
  marketRegion     MarketRegion @relation(fields: [marketRegionId], references: [id], onDelete: Cascade)
  
  // Visual Customizations
  colorScheme      Json         @default("{}")
  typography       Json         @default("{}")
  layoutDirection  String       @default("ltr") // ltr, rtl
  iconSet          String       @default("default")
  
  // Cultural Preferences
  communicationStyle String     @default("direct") // direct, indirect, formal, casual
  decisionMaking     String     @default("individual") // individual, consensus, hierarchical
  timeOrientation    String     @default("linear") // linear, flexible, cyclical
  
  // Business Practices
  businessEtiquette  Json       @default("{}")
  meetingStyle       Json       @default("{}")
  negotiationStyle   Json       @default("{}")
  
  // Content Preferences
  contentTone        String     @default("professional") // professional, friendly, formal, casual
  imagePreferences   Json       @default("{}")
  videoPreferences   Json       @default("{}")
  
  // Behavioral Adaptations
  userFlow          Json        @default("{}")
  featurePriority   Json        @default("{}")
  defaultSettings   Json        @default("{}")
  
  isActive          Boolean     @default(true)
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@unique([marketRegionId])
  @@map("cultural_customizations")
}

// Content Localization Management
model ContentLocalization {
  id                String   @id @default(cuid())
  languageId        String
  language          Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
  
  // Content Identification
  contentType       String   // "page", "component", "email", "notification", "help"
  contentId         String   // Original content identifier
  originalContent   String   // Original text/content
  
  // Localized Content
  localizedContent  String
  localizedTitle    String?
  localizedMeta     Json     @default("{}")
  
  // Quality & Status
  status            String   @default("draft") // draft, in_review, approved, published, archived
  quality           String   @default("machine") // machine, human, professional, native
  confidence        Float?   // AI confidence score
  
  // Review Process
  reviewNotes       String?
  reviewedBy        String?
  approvedBy        String?
  
  // Version Control
  version           Int      @default(1)
  isActive          Boolean  @default(true)
  publishedAt       DateTime?
  
  // SEO & Metadata
  seoOptimized      Boolean  @default(false)
  keywords          String[] @default([])
  metaDescription   String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([languageId, contentType, contentId])
  @@index([contentType, status])
  @@map("content_localizations")
}

// Price Localization for Different Markets
model PriceLocalization {
  id                 String   @id @default(cuid())
  currencyId         String
  currency           Currency @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  
  // Product/Service Identification
  productType        String   // "subscription", "feature", "service", "add_on"
  productId          String   // Original product identifier
  
  // Pricing Strategy
  basePrice          Float
  localizedPrice     Float
  adjustmentFactor   Float    @default(1.0)
  adjustmentReason   String?  // "purchasing_power", "competition", "tax", "strategy"
  
  // Market Conditions
  marketConditions   Json     @default("{}")
  competitorPricing  Json     @default("{}")
  demandElasticity   Float?
  
  // Tax & Regulatory
  taxRate            Float    @default(0.0)
  taxInclusive       Boolean  @default(false)
  regulatoryFees     Float    @default(0.0)
  
  // Promotional Pricing
  discountPercentage Float    @default(0.0)
  promotionalPrice   Float?
  promotionStart     DateTime?
  promotionEnd       DateTime?
  
  // Lifecycle
  effectiveDate      DateTime @default(now())
  expiryDate         DateTime?
  isActive           Boolean  @default(true)
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  @@unique([currencyId, productType, productId])
  @@index([productType, isActive])
  @@map("price_localizations")
}

// International Market Analytics
model MarketAnalytics {
  id                String       @id @default(cuid())
  tenantId          String
  tenant            Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  marketRegionId    String
  marketRegion      MarketRegion @relation(fields: [marketRegionId], references: [id], onDelete: Cascade)
  
  // Performance Metrics
  metric            String       // "user_acquisition", "revenue", "conversion", "engagement"
  value             Float
  previousValue     Float?
  growthRate        Float?       // Period-over-period growth
  
  // Comparative Analysis
  marketAverage     Float?
  competitorAverage Float?
  industryBenchmark Float?
  
  // Segmentation
  dimension         String?      // "age_group", "device_type", "traffic_source"
  segment           String?      // Specific segment value
  
  // Attribution
  channel           String?      // "organic", "paid", "social", "email"
  campaign          String?      // Specific campaign identifier
  
  // Temporal Data
  period            String       @default("daily") // hourly, daily, weekly, monthly, quarterly
  timestamp         DateTime     @default(now())
  
  // Metadata
  metadata          Json         @default("{}")
  
  @@index([tenantId, marketRegionId, metric, timestamp])
  @@index([metric, period, timestamp])
  @@map("market_analytics")
}

// Global Customer Support System
model SupportTicket {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Ticket Details
  ticketNumber      String   @unique
  title             String
  description       String
  category          String   // "technical", "billing", "feature_request", "bug_report"
  priority          String   @default("medium") // low, medium, high, critical
  
  // Internationalization
  language          String   @default("en")
  region            String?
  timezone          String?
  
  // Customer Information
  customerEmail     String
  customerName      String?
  customerCompany   String?
  
  // Status & Assignment
  status            String   @default("open") // open, in_progress, waiting_customer, resolved, closed
  assignedTo        String?  // Support agent ID
  assignedTeam      String?  // Support team
  
  // Resolution
  resolution        String?
  resolutionTime    Int?     // Minutes to resolution
  customerSatisfaction Float? // 1-5 rating
  
  // Communication
  lastResponseAt    DateTime?
  responseCount     Int      @default(0)
  isEscalated       Boolean  @default(false)
  escalationReason  String?
  
  // SLA Tracking
  firstResponseTime Int?     // Minutes to first response
  firstResponseSLA  Int      @default(240) // 4 hours in minutes
  resolutionSLA     Int      @default(1440) // 24 hours in minutes
  
  // Tags & Metadata
  tags              String[] @default([])
  metadata          Json     @default("{}")
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  resolvedAt        DateTime?
  closedAt          DateTime?
  
  // Relations
  messages          SupportMessage[]
  attachments       SupportAttachment[]
  
  @@index([tenantId, status])
  @@index([assignedTo, status])
  @@index([language, region])
  @@map("support_tickets")
}

// Support Message System
model SupportMessage {
  id               String        @id @default(cuid())
  ticketId         String
  ticket           SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  
  // Message Content
  content          String
  isInternal       Boolean       @default(false) // Internal agent notes
  messageType      String        @default("text") // text, rich_text, auto_response
  
  // Sender Information
  senderType       String        // "customer", "agent", "system"
  senderId         String?       // Agent or system ID
  senderName       String
  senderEmail      String?
  
  // Internationalization
  originalLanguage String?
  translatedContent String?      // Auto-translated content
  translationProvider String?    // "google", "deepl", "azure", etc.
  
  // Status
  isRead           Boolean       @default(false)
  readAt           DateTime?
  
  // Metadata
  metadata         Json          @default("{}")
  
  createdAt        DateTime      @default(now())
  
  @@index([ticketId, createdAt])
  @@map("support_messages")
}

// Support Attachments
model SupportAttachment {
  id          String        @id @default(cuid())
  ticketId    String
  ticket      SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  
  filename    String
  originalName String
  mimeType    String
  size        Int           // File size in bytes
  url         String        // Storage URL
  
  uploadedBy  String        // User or agent ID
  isPublic    Boolean       @default(false)
  
  createdAt   DateTime      @default(now())
  
  @@index([ticketId])
  @@map("support_attachments")
}

// International Tax Management
model TaxRule {
  id              String   @id @default(cuid())
  name            String
  description     String?
  
  // Geographic Scope
  country         String
  region          String?  // State/province
  city            String?
  
  // Tax Details
  taxType         String   // "vat", "sales_tax", "gst", "service_tax"
  rate            Float    // Tax rate percentage
  isCompound      Boolean  @default(false) // Compound tax calculation
  
  // Product/Service Scope
  productTypes    String[] @default([]) // Which products this applies to
  serviceTypes    String[] @default([]) // Which services this applies to
  
  // Thresholds
  minimumAmount   Float?   // Minimum transaction amount
  maximumAmount   Float?   // Maximum taxable amount
  
  // Exemptions
  exemptCustomers String[] @default([]) // Customer types exempt
  exemptProducts  String[] @default([]) // Exempt product categories
  
  // Lifecycle
  effectiveDate   DateTime @default(now())
  expiryDate      DateTime?
  isActive        Boolean  @default(true)
  
  // Authority
  taxAuthority    String   // Tax authority name
  registrationId  String?  // Business registration ID
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  taxCalculations TaxCalculation[]
  
  @@index([country, region, isActive])
  @@map("tax_rules")
}

// Tax Calculations for Transactions
model TaxCalculation {
  id              String   @id @default(cuid())
  transactionId   String   // Reference to transaction
  taxRuleId       String
  taxRule         TaxRule  @relation(fields: [taxRuleId], references: [id])
  
  // Calculation Details
  baseAmount      Float    // Amount before tax
  taxRate         Float    // Applied tax rate
  taxAmount       Float    // Calculated tax
  totalAmount     Float    // Total including tax
  
  // Breakdown
  breakdown       Json     @default("{}")
  
  calculatedAt    DateTime @default(now())
  
  @@index([transactionId])
  @@map("tax_calculations")
}

// International Expansion Roadmap
model ExpansionRoadmap {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Target Market
  targetRegion      String
  targetCountries   String[]
  targetLanguages   String[]
  targetCurrencies  String[]
  
  // Timeline
  phase             String   // "research", "planning", "pilot", "launch", "scale"
  plannedLaunch     DateTime?
  actualLaunch      DateTime?
  
  // Requirements
  requirements      Json     @default("[]")
  prerequisites     Json     @default("[]")
  risks             Json     @default("[]")
  mitigations       Json     @default("[]")
  
  // Investment
  estimatedCost     Float?
  actualCost        Float?
  budgetAllocated   Float?
  
  // Progress Tracking
  progressPercent   Float    @default(0.0)
  milestones        Json     @default("[]")
  completedTasks    Json     @default("[]")
  pendingTasks      Json     @default("[]")
  
  // Success Metrics
  targetMetrics     Json     @default("{}")
  actualMetrics     Json     @default("{}")
  roi               Float?
  
  // Status
  status            String   @default("planning") // planning, in_progress, launched, paused, cancelled
  statusReason      String?
  
  // Team
  projectManager    String?
  teamMembers       String[] @default([])
  externalPartners  Json     @default("[]")
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String?
  
  @@index([tenantId, status])
  @@map("expansion_roadmaps")
}

// Additional Relations for User model
model UserInternationalPreference {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Language Preferences
  primaryLanguage     String   @default("en")
  fallbackLanguages   String[] @default([])
  
  // Regional Preferences
  preferredRegion     String?
  timezone            String   @default("UTC")
  
  // Currency Preferences
  preferredCurrency   String   @default("USD")
  
  // Cultural Preferences
  dateFormat          String   @default("MM/dd/yyyy")
  timeFormat          String   @default("HH:mm")
  numberFormat        Json     @default("{}")
  
  // Communication Preferences
  communicationStyle  String   @default("direct")
  supportLanguage     String   @default("en")
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@map("user_international_preferences")
}

// Add foreign key references to existing models

// Enhanced Authentication and MFA
model UserMFA {
  id       String  @id @default(cuid())
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  method   String
  secret   String
  verified Boolean @default(false)
  active   Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_mfa")
}

model UserBiometric {
  id       String  @id @default(cuid())
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type     String
  template String
  deviceId String
  enrolled DateTime @default(now())
  lastUsed DateTime @default(now())
  active   Boolean @default(true)

  @@map("user_biometric")
}

model TrustedDevice {
  id              String   @id @default(cuid())
  deviceId        String
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trusted         Boolean  @default(false)
  fingerprint     String
  platform        String
  browser         String
  location        String
  firstSeen       DateTime @default(now())
  lastSeen        DateTime @default(now())
  riskScore       Int      @default(50)
  certificateHash String?

  @@unique([deviceId, userId])
  @@map("trusted_devices")
}

// Access Control and RBAC
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  permissions Json     @default("[]")
  inheritance Json     @default("[]")
  type        String   @default("custom")
  scope       String   @default("tenant")
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  metadata    Json     @default("{}")

  userRoles UserRole[]

  @@map("roles")
}

model UserRole {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId     String
  role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  tenantId   String
  assignedBy String
  assignedAt DateTime  @default(now())
  expiresAt  DateTime?
  active     Boolean   @default(true)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model AccessRequest {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource    String
  action      String
  result      String
  reason      String
  evaluatedAt DateTime @default(now())
  evaluatedBy String
  riskScore   Int      @default(0)
  context     Json     @default("{}")
  permissions Json     @default("[]")
  conditions  Json     @default("[]")

  @@map("access_requests")
}

// Advanced Authentication - WebAuthn/FIDO2
model WebAuthnCredential {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialId  String   @unique
  publicKey     String
  counter       BigInt   @default(0)
  deviceType    String   // "platform" or "roaming"
  transports    String[] // ["usb", "nfc", "ble", "internal"]
  attestation   Json     @default("{}")
  name          String   // User-friendly name
  lastUsed      DateTime @default(now())
  createdAt     DateTime @default(now())
  active        Boolean  @default(true)

  @@map("webauthn_credentials")
}

model BiometricProfile {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          String   // "fingerprint", "face", "voice", "behavioral"
  template      String   // Encrypted biometric template
  deviceId      String
  confidence    Float    @default(0.0)
  enrolledAt    DateTime @default(now())
  lastUsed      DateTime @default(now())
  usageCount    Int      @default(0)
  active        Boolean  @default(true)
  metadata      Json     @default("{}")

  @@map("biometric_profiles")
}

model BehavioralProfile {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  keystrokeDynamics Json    @default("{}")
  mouseDynamics    Json    @default("{}")
  touchDynamics    Json    @default("{}")
  navigationPattern Json   @default("{}")
  timePattern      Json    @default("{}")
  devicePattern    Json    @default("{}")
  riskScore        Float   @default(0.0)
  confidence       Float   @default(0.0)
  learningPhase    Boolean @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  lastAnalyzed     DateTime @default(now())

  @@map("behavioral_profiles")
}

// Advanced Threat Intelligence
model ThreatIntelligenceFeed {
  id              String   @id @default(cuid())
  name            String
  provider        String
  type            String   // "commercial", "open_source", "government", "community"
  url             String
  format          String   // "json", "xml", "csv", "stix"
  updateFrequency Int      // in minutes
  lastUpdate      DateTime @default(now())
  active          Boolean  @default(true)
  reliability     Float    @default(0.0)
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  threatIndicators ThreatIndicator[]

  @@map("threat_intelligence_feeds")
}

model ThreatIndicator {
  id          String   @id @default(cuid())
  feedId      String
  feed        ThreatIntelligenceFeed @relation(fields: [feedId], references: [id], onDelete: Cascade)
  type        ThreatIndicatorType
  value       String
  severity    ThreatSeverity
  confidence  Float    @default(0.0)
  tags        String[]
  description String?
  source      String?  // Source of the indicator
  firstSeen   DateTime @default(now())
  lastSeen    DateTime @default(now())
  active      Boolean  @default(true)
  metadata    Json     @default("{}")

  threatEvents ThreatEvent[]

  @@unique([feedId, type, value])
  @@map("threat_indicators")
}

enum ThreatIndicatorType {
  email
  domain
  ip
  url
  hash
  user_agent
}

enum ThreatSeverity {
  low
  medium
  high
  critical
}

model ThreatEvent {
  id            String   @id @default(cuid())
  eventId       String   @unique
  timestamp     DateTime @default(now())
  type          String
  severity      String   // "low", "medium", "high", "critical"
  source        String
  destination   String
  protocol      String?
  description   String
  indicatorId   String?
  indicator     ThreatIndicator? @relation(fields: [indicatorId], references: [id])
  mitigation    String?
  status        String   @default("active") // "active", "investigating", "contained", "resolved"
  assignedTo    String?
  resolvedAt    DateTime?
  metadata      Json     @default("{}")
  aiAnalysis    Json     @default("{}")
  riskScore     Float    @default(0.0)
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])

  @@map("threat_events")
}

model APTCampaign {
  id              String   @id @default(cuid())
  name            String
  description     String
  threatActor     String
  firstSeen       DateTime @default(now())
  lastSeen        DateTime @default(now())
  tactics         String[] // MITRE ATT&CK tactics
  techniques      String[] // MITRE ATT&CK techniques
  indicators      Json     @default("[]")
  victims         Json     @default("[]")
  attribution     String?
  confidence      Float    @default(0.0)
  status          String   @default("active") // "active", "dormant", "defeated"
  aiPrediction    Json     @default("{}")
  huntingRules    Json     @default("[]")
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("apt_campaigns")
}

// Zero Trust Network Architecture
model NetworkSegment {
  id            String   @id @default(cuid())
  name          String
  description   String
  type          String   // "production", "staging", "development", "dmz", "internal"
  cidr          String
  vlanId        Int?
  trustLevel    Int      @default(0) // 0-100
  policies      Json     @default("[]")
  endpoints     Json     @default("[]")
  monitoring    Boolean  @default(true)
  isolation     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")

  deviceProfiles DeviceProfile[]

  @@map("network_segments")
}

model DeviceProfile {
  id              String   @id @default(cuid())
  deviceId        String   @unique
  name            String?
  type            String   // "laptop", "desktop", "mobile", "tablet", "iot", "server"
  os              String
  version         String
  manufacturer    String?
  model           String?
  macAddress      String?
  ipAddress       String?
  segmentId       String?
  segment         NetworkSegment? @relation(fields: [segmentId], references: [id])
  trustScore      Float    @default(0.0)
  riskLevel       String   @default("medium") // "low", "medium", "high", "critical"
  lastSeen        DateTime @default(now())
  enrolled        Boolean  @default(false)
  compliance      Json     @default("{}")
  vulnerabilities Json     @default("[]")
  certificates    Json     @default("[]")
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("device_profiles")
}

// Advanced Cryptography
model CryptographicKey {
  id            String   @id @default(cuid())
  keyId         String   @unique
  type          String   // "aes", "rsa", "ecc", "quantum_resistant", "homomorphic"
  algorithm     String
  keySize       Int
  purpose       String   // "encryption", "signing", "kex", "authentication"
  scope         String   // "user", "system", "tenant", "global"
  encryptedKey  String   // Key encrypted with master key
  publicKey     String?
  createdAt     DateTime @default(now())
  expiresAt     DateTime?
  rotatedAt     DateTime?
  status        String   @default("active") // "active", "revoked", "expired", "compromised"
  metadata      Json     @default("{}")
  usageCount    Int      @default(0)
  lastUsed      DateTime @default(now())

  @@map("cryptographic_keys")
}

model DataClassification {
  id            String   @id @default(cuid())
  dataId        String   @unique
  classification String  // "public", "internal", "confidential", "restricted", "top_secret"
  sensitivity   String   // "low", "medium", "high", "critical"
  categories    String[] // "pii", "phi", "financial", "legal", "technical"
  retentionDays Int?
  encryptionReq Boolean  @default(false)
  accessControl Json     @default("{}")
  complianceReq String[] // "gdpr", "hipaa", "sox", "pci_dss"
  aiClassified  Boolean  @default(false)
  confidence    Float    @default(0.0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")

  @@map("data_classifications")
}

// Security Orchestration
model SecurityPlaybook {
  id            String   @id @default(cuid())
  name          String
  description   String
  type          String   // "incident_response", "threat_hunting", "compliance", "automation"
  severity      String   // "low", "medium", "high", "critical"
  triggers      Json     @default("[]")
  actions       Json     @default("[]")
  conditions    Json     @default("[]")
  automationLevel String @default("manual") // "manual", "semi_automated", "fully_automated"
  active        Boolean  @default(true)
  version       String   @default("1.0")
  aiEnhanced    Boolean  @default(false)
  successRate   Float    @default(0.0)
  avgExecutionTime Int   @default(0) // in seconds
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  metadata      Json     @default("{}")

  executions SecurityPlaybookExecution[]

  @@map("security_playbooks")
}

model SecurityPlaybookExecution {
  id          String   @id @default(cuid())
  playbookId  String
  playbook    SecurityPlaybook @relation(fields: [playbookId], references: [id], onDelete: Cascade)
  executionId String   @unique
  triggeredBy String
  startTime   DateTime @default(now())
  endTime     DateTime?
  status      String   @default("running") // "running", "completed", "failed", "cancelled"
  steps       Json     @default("[]")
  results     Json     @default("{}")
  errors      Json     @default("[]")
  aiDecisions Json     @default("[]")
  metadata    Json     @default("{}")

  @@map("security_playbook_executions")
}

model SecurityIncident {
  id            String   @id @default(cuid())
  incidentId    String   @unique
  title         String
  description   String
  type          String   // "data_breach", "malware", "phishing", "insider_threat", "ddos"
  severity      String   // "low", "medium", "high", "critical"
  priority      String   @default("medium") // "low", "medium", "high", "critical"
  status        String   @default("open") // "open", "investigating", "contained", "resolved", "closed"
  assignedTo    String?
  reportedBy    String
  reportedAt    DateTime @default(now())
  detectedAt    DateTime?
  containedAt   DateTime?
  resolvedAt    DateTime?
  impact        String   // "low", "medium", "high", "critical"
  affectedSystems Json   @default("[]")
  timeline      Json     @default("[]")
  artifacts     Json     @default("[]")
  mitigation    String?
  rootCause     String?
  lessons       String?
  aiAnalysis    Json     @default("{}")
  riskScore     Float    @default(0.0)
  metadata      Json     @default("{}")

  @@map("security_incidents")
}

// Advanced Compliance
model ComplianceFramework {
  id            String   @id @default(cuid())
  name          String
  version       String
  type          String   // "regulatory", "industry", "internal", "international"
  description   String
  requirements  Json     @default("[]")
  controls      Json     @default("[]")
  active        Boolean  @default(true)
  mandatory     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")

  assessments ComplianceAssessment[]

  @@unique([name, version])
  @@map("compliance_frameworks")
}

model ComplianceAssessment {
  id             String   @id @default(cuid())
  frameworkId    String
  framework      ComplianceFramework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)
  assessmentId   String   @unique
  standardId     String?  // Optional standard identifier
  type           String   // "automated", "manual", "hybrid"
  assessmentType String   @default("automated") // Additional assessment type field
  status         String   @default("planned") // "planned", "in_progress", "completed", "failed"
  scope          Json     @default("{}")
  findings       Json     @default("[]")
  score          Float    @default(0.0)
  riskLevel      String   @default("medium") // "low", "medium", "high", "critical"
  startedAt      DateTime @default(now())
  completedAt    DateTime?
  assessor       String
  evidence       Json     @default("[]")
  remediation    Json     @default("[]")
  aiAnalysis     Json     @default("{}")
  metadata       Json     @default("{}")

  @@map("compliance_assessments")
}

// Security Analytics
model SecurityMetric {
  id            String   @id @default(cuid())
  metricId      String   @unique
  name          String
  type          String   // "counter", "gauge", "histogram", "summary"
  category      String   // "threats", "incidents", "compliance", "performance"
  value         Float
  timestamp     DateTime @default(now())
  dimensions    Json     @default("{}")
  aiPrediction  Json     @default("{}")
  metadata      Json     @default("{}")

  @@map("security_metrics")
}

// Security Events (Enhanced)
model SecurityEvent {
  id            String   @id @default(cuid())
  source        String   @default("system")
  type          String
  category      String   @default("general")
  severity      String   // "info", "low", "medium", "high", "critical"
  description   String
  actor         String?
  target        String?
  outcome       String?  // "success", "failure", "unknown"
  ipAddress     String?
  userAgent     String?
  timestamp     DateTime @default(now())
  metadata      Json     @default("{}")
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])
  retentionUntil DateTime?
  encrypted     Boolean  @default(false)

  @@map("security_events")
}

// Security Alerts
model SecurityAlert {
  id          String   @id @default(cuid())
  eventId     String
  type        String
  severity    String   // "low", "medium", "high", "critical"
  title       String
  description String
  status      String   @default("active") // "active", "investigating", "resolved", "false_positive"
  assignedTo  String?
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())
  metadata    Json     @default("{}")
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  @@map("security_alerts")
}

// Rate Limiting
model RateLimit {
  id            String   @id @default(cuid())
  identifier    String   // IP, user ID, etc.
  type          String   // "ip", "user", "tenant", "endpoint"
  endpoint      String
  requests      Int
  windowStart   DateTime
  windowEnd     DateTime
  tenantId      String

  @@map("rate_limits")
}

// GDPR Compliance
model ConsentRecord {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  consentType   String
  purpose       String
  legalBasis    String
  status        String   // "given", "withdrawn", "expired"
  consentText   String
  version       String
  givenAt       DateTime
  withdrawnAt   DateTime?
  expiresAt     DateTime?
  ipAddress     String
  userAgent     String
  metadata      Json     @default("{}")

  @@map("consent_records")
}

model DataSubjectRequest {
  id                  String   @id @default(cuid())
  type                String   // "access", "rectification", "erasure", "portability", "restriction", "objection"
  status              String   @default("pending") // "pending", "in_progress", "completed", "rejected"
  requesterId         String
  requester           User     @relation("DataSubjectRequester", fields: [requesterId], references: [id])
  requesterEmail      String
  subject             String   // "self", "other"
  subjectId           String?
  subjectUser         User?    @relation("DataSubjectTarget", fields: [subjectId], references: [id])
  subjectEmail        String?
  reason              String?
  legalBasis          String?
  description         String
  requestedData       String[] @default([])
  processedBy         String?
  processedAt         DateTime?
  completedAt         DateTime?
  estimatedCompletion DateTime?
  responseData        Json?
  rejectionReason     String?
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id])
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("data_subject_requests")
}

model SecurityDashboard {
  id            String   @id @default(cuid())
  name          String
  description   String
  type          String   // "executive", "operational", "tactical", "strategic"
  layout        Json     @default("{}")
  widgets       Json     @default("[]")
  filters       Json     @default("{}")
  refreshRate   Int      @default(300) // in seconds
  access        Json     @default("{}")
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  metadata      Json     @default("{}")

  @@map("security_dashboards")
}

// Project and Task Management
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  tenantId    String

  tasks Task[]

  @@map("projects")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("pending")
  priority    String   @default("medium")
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedTo  String?
  assignedUser User?   @relation("UserTasks", fields: [assignedTo], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dueDate     DateTime?
  completedAt DateTime?

  @@map("tasks")
}

// Behavioral Anomaly Detection
model BehavioralAnomaly {
  id            String   @id @default(cuid())
  userId        String
  type          String   // "login_pattern", "access_pattern", "data_access", "time_pattern"
  severity      String   // "low", "medium", "high", "critical"
  description   String
  detected      DateTime @default(now())
  confidence    Float    @default(0.0)
  riskScore     Float    @default(0.0)
  status        String   @default("active") // "active", "investigating", "resolved", "false_positive"
  metadata      Json     @default("{}")
  aiAnalysis    Json     @default("{}")

  @@map("behavioral_anomalies")
}

// System Configuration
model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  type        String   @default("string") // "string", "number", "boolean", "json"
  category    String   @default("general")
  encrypted   Boolean  @default(false)
  isSecret    Boolean  @default(false)
  updatedBy   String
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@map("system_config")
}

model JITAccessRequest {
  id                   String    @id @default(cuid())
  userId               String
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  requestedRole        String
  requestedPermissions Json      @default("[]")
  justification        String
  duration             Int
  status               String    @default("pending")
  requestedAt          DateTime  @default(now())
  approver             String?
  approvedAt           DateTime?
  expiresAt            DateTime?
  revokedAt            DateTime?
  revokedBy            String?
  accessGranted        Boolean   @default(false)
  metadata             Json      @default("{}")

  @@map("jit_access_requests")
}

// ===================================================================
// INTERACTIVE DEMO BUILDER SYSTEM - Revolutionary Enterprise Feature
// ===================================================================

// Demo Profile Management
model DemoProfile {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   @default("custom") // "default", "custom", "template"
  industry    String   // "banking", "retail", "healthcare", "manufacturing", etc.
  targetRole  String   // "executive", "manager", "analyst", "developer", etc.
  painPoints  Json     @default("[]") // Array of pain points this demo addresses
  focusAreas  Json     @default("[]") // Array of focus areas
  
  // Demo Configuration
  duration    Int      @default(15) // Duration in minutes
  interactive Boolean  @default(true)
  autoPlay    Boolean  @default(false)
  
  // Personalization Settings
  personalization Json @default("{}")
  
  // Demo Content
  slides      Json     @default("[]") // Array of slide configurations
  workflows   Json     @default("[]") // Array of workflow configurations
  
  // Metadata
  isActive    Boolean  @default(true)
  isTemplate  Boolean  @default(false)
  popularity  Int      @default(0)
  lastUsed    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  tenantId    String
  
  // Relations
  demoWorkflows DemoWorkflow[]
  executions    DemoExecution[]
  analytics     DemoAnalytics[]
  
  @@map("demo_profiles")
}

// Enterprise System Sections/Actions as Reusable Components
model EnterpriseSystemComponent {
  id            String   @id @default(cuid())
  name          String
  title         String
  description   String
  category      String   // "ai", "security", "analytics", "integration", "management"
  type          String   // "dashboard", "workflow", "feature", "integration"
  
  // Component Configuration
  icon          String   // Lucide icon name
  color         String   // Theme color
  href          String?  // Optional link destination
  
  // Demo Integration
  demoContent   Json     @default("{}") // Content for demo presentation
  interactions  Json     @default("[]") // Available interactions (GET/POST)
  aiPrompts     Json     @default("[]") // AI prompts for personalization
  
  // Metrics
  usageCount    Int      @default(0)
  rating        Float    @default(0.0)
  
  // Status
  isActive      Boolean  @default(true)
  isHighlighted Boolean  @default(false)
  isPremium     Boolean  @default(false)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("enterprise_system_components")
}

// Workflow Builder System
model DemoWorkflow {
  id          String   @id @default(cuid())
  profileId   String?
  profile     DemoProfile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  name        String
  description String?
  
  // Workflow Structure
  steps       Json     @default("[]") // Array of workflow steps
  connections Json     @default("[]") // Step connections/flow
  variables   Json     @default("{}") // Dynamic variables
  
  // Personalization
  industry    String?
  role        String?
  adaptations Json     @default("{}") // AI adaptations based on user input
  
  // Execution Settings
  autoAdvance Boolean  @default(false)
  timing      Json     @default("{}") // Timing settings for each step
  
  // Status
  isActive    Boolean  @default(true)
  version     String   @default("1.0")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  
  @@map("demo_workflows")
}

// Demo Execution Tracking
model DemoExecution {
  id          String   @id @default(cuid())
  profileId   String
  profile     DemoProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  // Execution Details
  executionId String   @unique
  sessionId   String
  
  // User Context
  userId      String?
  userRole    String?
  userIndustry String?
  userPainPoints Json  @default("[]")
  userFocusAreas Json  @default("[]")
  
  // Execution Data
  startedAt   DateTime @default(now())
  completedAt DateTime?
  currentStep Int      @default(0)
  totalSteps  Int      @default(0)
  
  // Interaction Data
  interactions Json    @default("[]") // User interactions during demo
  feedbacks   Json     @default("[]") // User feedback
  aiResponses Json     @default("[]") // AI-generated responses
  
  // Results
  status      String   @default("active") // "active", "completed", "abandoned", "paused"
  satisfaction Float?   // User satisfaction score (1-5)
  completion  Float    @default(0.0) // Completion percentage
  
  // Personalization Applied
  personalizations Json @default("{}") // Applied personalizations
  
  // Analytics
  duration    Int?     // Duration in seconds
  bouncePoints Json   @default("[]") // Points where users dropped off
  engagementScore Float @default(0.0)
  
  createdAt   DateTime @default(now())
  
  @@map("demo_executions")
}

// Demo Analytics and Performance
model DemoAnalytics {
  id          String   @id @default(cuid())
  profileId   String
  profile     DemoProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  // Time Period
  date        DateTime @default(now())
  period      String   // "daily", "weekly", "monthly"
  
  // Usage Metrics
  totalExecutions Int @default(0)
  completedExecutions Int @default(0)
  abandonedExecutions Int @default(0)
  averageDuration Float @default(0.0)
  
  // Performance Metrics
  averageCompletion Float @default(0.0)
  averageSatisfaction Float @default(0.0)
  engagementRate Float @default(0.0)
  conversionRate Float @default(0.0)
  
  // Popular Elements
  popularSteps Json @default("[]")
  dropOffPoints Json @default("[]")
  commonFeedback Json @default("[]")
  
  // AI Insights
  aiInsights Json @default("{}")
  recommendations Json @default("[]")
  
  @@unique([profileId, date, period])
  @@map("demo_analytics")
}

// User Personalization Profiles
model UserPersonalizationProfile {
  id            String   @id @default(cuid())
  userId        String?
  sessionId     String   // For anonymous users
  
  // User Characteristics
  industry      String?
  role          String?
  company       String?
  companySize   String?  // "startup", "sme", "enterprise"
  experience    String?  // "beginner", "intermediate", "expert"
  
  // Preferences
  painPoints    Json     @default("[]")
  focusAreas    Json     @default("[]")
  interests     Json     @default("[]")
  
  // Behavioral Data
  previousDemos Json     @default("[]")
  preferences   Json     @default("{}")
  learningStyle String?  // "visual", "hands-on", "analytical"
  
  // AI Profile
  aiProfile     Json     @default("{}")
  confidence    Float    @default(0.0)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([userId])
  @@unique([sessionId])
  @@map("user_personalization_profiles")
}

// Interactive Elements for GET/POST functionality
model DemoInteractiveElement {
  id          String   @id @default(cuid())
  componentId String   // Reference to EnterpriseSystemComponent
  
  name        String
  type        String   // "button", "form", "data_input", "api_call", "simulation"
  method      String   // "GET", "POST", "PUT", "DELETE"
  
  // Configuration
  endpoint    String?  // API endpoint or action
  payload     Json     @default("{}")
  responseTemplate Json @default("{}")
  
  // Demo Integration
  triggerConditions Json @default("{}")
  responseVariations Json @default("[]") // Different responses based on user input
  
  // AI Enhancement
  aiPrompt    String?  // Prompt for AI-generated responses
  personalize Boolean  @default(true)
  
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("demo_interactive_elements")
}

model PrivilegedAccount {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountType  String
  privileges   Json     @default("[]")
  justification String
  approvedBy   String
  approvedAt   DateTime @default(now())
  expiresAt    DateTime
  active       Boolean  @default(true)
  lastUsed     DateTime?
  usageCount   Int      @default(0)
  monitoring   Boolean  @default(true)

  @@map("privileged_accounts")
}

model AccessReview {
  id            String    @id @default(cuid())
  type          String
  target        String
  reviewer      String
  status        String    @default("pending")
  scheduledAt   DateTime
  startedAt     DateTime?
  completedAt   DateTime?
  findings      Json      @default("[]")
  recommendations Json    @default("[]")
  nextReview    DateTime
  metadata      Json      @default("{}")

  @@map("access_reviews")
}

model DynamicRole {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String
  rules        Json     @default("[]")
  conditions   Json     @default("[]")
  autoAssign   Boolean  @default(true)
  autoRevoke   Boolean  @default(true)
  maxDuration  Int      @default(480)
  reviewRequired Boolean @default(false)
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("dynamic_roles")
}

// Security Events and SIEM


model ForensicInvestigation {
  id              String    @id @default(cuid())
  caseId          String    @unique
  type            String
  status          String    @default("initiated")
  priority        String
  investigator    String
  startDate       DateTime  @default(now())
  endDate         DateTime?
  findings        Json      @default("[]")
  recommendations Json      @default("[]")
  report          String?

  @@map("forensic_investigations")
}

model ForensicEvidence {
  id              String   @id @default(cuid())
  investigationId String
  type            String
  source          String
  hash            String
  timestamp       DateTime @default(now())
  description     String
  preserved       Boolean  @default(true)
  chainOfCustody  Json     @default("[]")

  @@map("forensic_evidence")
}

model ThreatHuntingQuery {
  id          String    @id @default(cuid())
  name        String
  description String
  query       String
  language    String
  category    String
  severity    String
  schedule    String
  enabled     Boolean   @default(true)
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastRun     DateTime?
  nextRun     DateTime?

  @@map("threat_hunting_queries")
}

// Compliance and Data Protection
model ComplianceAudit {
  id            String   @id @default(cuid())
  standardId    String
  requirementId String
  assessorId    String
  assessor      User     @relation(fields: [assessorId], references: [id])
  assessment    Json
  timestamp     DateTime @default(now())
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])

  @@map("compliance_audits")
}




// Data Encryption and Security
model EncryptionKey {
  id               String    @id @default(cuid())
  name             String
  algorithm        String
  key              String
  iv               String?
  purpose          String
  status           String    @default("active")
  createdAt        DateTime  @default(now())
  rotatedAt        DateTime?
  expiresAt        DateTime?
  rotationSchedule Int       @default(90)

  @@map("encryption_keys")
}

model EncryptedData {
  id           String   @id @default(cuid())
  data         String
  keyId        String
  algorithm    String
  iv           String?
  tag          String?
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now())
  accessCount  Int      @default(0)
  lastAccessed DateTime @default(now())

  @@map("encrypted_data")
}

model EncryptionAudit {
  id        String   @id @default(cuid())
  type      String
  keyId     String?
  dataId    String?
  userId    String
  action    String
  result    String
  timestamp DateTime @default(now())
  details   Json     @default("{}")
  ipAddress String
  userAgent String

  @@map("encryption_audits")
}

model KeyRotationEvent {
  id              String   @id @default(cuid())
  keyId           String
  oldKeyId        String
  reason          String
  timestamp       DateTime @default(now())
  initiatedBy     String
  status          String
  affectedRecords Int      @default(0)

  @@map("key_rotation_events")
}

model DLPViolation {
  id          String   @id @default(cuid())
  ruleId      String
  userId      String
  dataType    String
  severity    String
  action      String
  description String
  remediation String
  status      String   @default("detected")
  timestamp   DateTime @default(now())
  evidence    Json     @default("[]")

  @@map("dlp_violations")
}



model PlaybookExecution {
  id          String    @id @default(cuid())
  playbookId  String
  triggeredBy String
  triggerType String
  status      String    @default("running")
  startTime   DateTime  @default(now())
  endTime     DateTime?
  duration    Int?
  steps       Json      @default("[]")
  variables   Json      @default("{}")
  logs        Json      @default("[]")
  error       String?
  metadata    Json      @default("{}")

  @@map("playbook_executions")
}

model VulnerabilityAssessment {
  id              String    @id @default(cuid())
  type            String
  target          String
  status          String    @default("scheduled")
  startTime       DateTime  @default(now())
  endTime         DateTime?
  findings        Json      @default("[]")
  scanProfile     String
  configuration   Json      @default("{}")
  executedBy      String
  reportGenerated Boolean   @default(false)
  report          String?

  @@map("vulnerability_assessments")
}

model PolicyEnforcement {
  id             String   @id @default(cuid())
  policyId       String
  type           String
  target         String
  status         String   @default("active")
  rules          Json     @default("[]")
  violations     Json     @default("[]")
  lastCheck      DateTime @default(now())
  nextCheck      DateTime
  checkFrequency Int      @default(60)
  enabled        Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("policy_enforcements")
}

model AutomatedResponse {
  id             String    @id @default(cuid())
  name           String
  description    String
  triggers       Json      @default("[]")
  actions        Json      @default("[]")
  conditions     Json      @default("[]")
  enabled        Boolean   @default(true)
  priority       Int       @default(1)
  cooldown       Int       @default(300)
  maxExecutions  Int       @default(100)
  executionCount Int       @default(0)
  lastExecuted   DateTime?
  successRate    Float     @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("automated_responses")
}

model ComplianceCheck {
  id             String    @id @default(cuid())
  standardId     String
  requirementId  String
  checkType      String
  frequency      String
  script         String?
  parameters     Json      @default("{}")
  expectedResult Json?
  actualResult   Json?
  status         String    @default("pending")
  lastCheck      DateTime  @default(now())
  nextCheck      DateTime
  evidence       Json      @default("[]")
  issues         Json      @default("[]")
  enabled        Boolean   @default(true)

  @@map("compliance_checks")
}

// WAF and Production Security
model WAFRule {
  id          String   @id @default(cuid())
  name        String
  description String
  type        String
  priority    Int
  enabled     Boolean  @default(true)
  pattern     String
  patternType String
  target      String
  action      Json     @default("{}")
  conditions  Json     @default("[]")
  exceptions  Json     @default("[]")
  statistics  Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("waf_rules")
}

model WAFEvent {
  id           String   @id @default(cuid())
  timestamp    DateTime @default(now())
  ruleId       String
  ruleName     String
  action       String
  blocked      Boolean
  source       String
  target       String
  userAgent    String
  method       String
  url          String
  headers      Json     @default("{}")
  body         String?
  reason       String
  riskScore    Int
  geoLocation  String?
  responseCode Int
  responseTime Int

  @@map("waf_events")
}

// Integration and Testing Tables
model IntegrationTest {
  id          String   @id @default(cuid())
  name        String
  type        String
  status      String   @default("pending")
  config      Json     @default("{}")
  results     Json     @default("{}")
  executedAt  DateTime @default(now())
  executedBy  String
  executedByUser User?  @relation(fields: [executedBy], references: [id])
  duration    Int?
  success     Boolean  @default(false)
  errors      Json     @default("[]")
  tenantId    String?
  tenant      Tenant?  @relation(fields: [tenantId], references: [id])

  @@map("integration_tests")
}

model APIConnector {
  id           String    @id @default(cuid())
  name         String
  type         String
  endpoint     String
  config       Json      @default("{}")
  status       String    @default("active")
  lastSync     DateTime?
  syncInterval Int       @default(300)
  enabled      Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdBy    String?
  user         User?     @relation(fields: [createdBy], references: [id])
  tenantId     String?
  tenant       Tenant?   @relation(fields: [tenantId], references: [id])

  @@map("api_connectors")
}

model WidgetBlueprint {
  id          String   @id @default(cuid())
  name        String
  description String
  category    String
  config      Json     @default("{}")
  template    String
  version     String   @default("1.0.0")
  published   Boolean  @default(false)
  createdBy   String
  creator     User     @relation("BlueprintCreator", fields: [createdBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenantId    String?
  tenant      Tenant?  @relation(fields: [tenantId], references: [id])

  @@map("widget_blueprints")
}

model CanvasProject {
  id          String   @id @default(cuid())
  name        String
  description String?
  layout      Json     @default("{}")
  widgets     Json     @default("[]")
  settings    Json     @default("{}")
  published   Boolean  @default(false)
  createdBy   String
  creator     User     @relation(fields: [createdBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenantId    String?
  tenant      Tenant?  @relation(fields: [tenantId], references: [id])

  @@map("canvas_projects")
}

// Analytics and Metrics
model MetricSnapshot {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  category  String
  metrics   Json     @default("{}")
  metadata  Json     @default("{}")
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  tenantId  String?
  tenant    Tenant?  @relation(fields: [tenantId], references: [id])

  @@map("metric_snapshots")
}

model AnalyticsEvent {
  id         String   @id @default(cuid())
  timestamp  DateTime @default(now())
  eventType  String
  properties Json     @default("{}")
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  sessionId  String?
  tenantId   String?
  tenant     Tenant?  @relation(fields: [tenantId], references: [id])

  @@map("analytics_events")
}

model AuditLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  resource  String
  details   Json     @default("{}")
  ipAddress String?
  userAgent String?
  tenantId  String?
  tenant    Tenant?  @relation(fields: [tenantId], references: [id])

  @@map("audit_logs")
}

// =========================================
// ENTERPRISE INTEGRATION & ECOSYSTEM MODELS
// =========================================

// ERP System Integration
model ERPIntegration {
  id            String   @id @default(cuid())
  name          String
  type          String   // "sap", "oracle", "microsoft_dynamics", "netsuite", "workday"
  version       String
  endpoint      String
  credentials   Json     @default("{}")
  config        Json     @default("{}")
  syncSettings  Json     @default("{}")
  status        String   @default("active") // "active", "inactive", "error", "syncing"
  lastSync      DateTime?
  syncInterval  Int      @default(3600) // in seconds
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])

  syncLogs      ERPSyncLog[]
  mappings      ERPDataMapping[]

  @@map("erp_integrations")
}

model ERPSyncLog {
  id            String   @id @default(cuid())
  integrationId String
  integration   ERPIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  syncId        String   @unique
  operation     String   // "import", "export", "sync", "validate"
  status        String   @default("started") // "started", "completed", "failed", "cancelled"
  recordsProcessed Int   @default(0)
  recordsSucceeded Int   @default(0)
  recordsFailed    Int   @default(0)
  errors        Json     @default("[]")
  startTime     DateTime @default(now())
  endTime       DateTime?
  metadata      Json     @default("{}")

  @@map("erp_sync_logs")
}

model ERPDataMapping {
  id            String   @id @default(cuid())
  integrationId String
  integration   ERPIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  sourceField   String
  targetField   String
  transformation Json    @default("{}")
  required      Boolean  @default(false)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([integrationId, sourceField, targetField])
  @@map("erp_data_mappings")
}

// CRM Platform Integration
model CRMIntegration {
  id            String   @id @default(cuid())
  name          String
  type          String   // "salesforce", "hubspot", "microsoft_crm", "pipedrive", "zoho"
  version       String
  endpoint      String
  credentials   Json     @default("{}")
  config        Json     @default("{}")
  syncSettings  Json     @default("{}")
  status        String   @default("active")
  lastSync      DateTime?
  syncInterval  Int      @default(1800) // in seconds
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])

  syncLogs      CRMSyncLog[]
  mappings      CRMDataMapping[]

  @@map("crm_integrations")
}

model CRMSyncLog {
  id            String   @id @default(cuid())
  integrationId String
  integration   CRMIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  syncId        String   @unique
  operation     String
  status        String   @default("started")
  recordsProcessed Int   @default(0)
  recordsSucceeded Int   @default(0)
  recordsFailed    Int   @default(0)
  errors        Json     @default("[]")
  startTime     DateTime @default(now())
  endTime       DateTime?
  metadata      Json     @default("{}")

  @@map("crm_sync_logs")
}

model CRMDataMapping {
  id            String   @id @default(cuid())
  integrationId String
  integration   CRMIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  sourceField   String
  targetField   String
  transformation Json    @default("{}")
  required      Boolean  @default(false)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([integrationId, sourceField, targetField])
  @@map("crm_data_mappings")
}

// ==================================================================
// COMPREHENSIVE ENTERPRISE CRM CORE MODELS
// ==================================================================

model CRMCompany {
  id                String   @id @default(cuid())
  name              String
  industry          String?
  size              String?  // "startup", "small", "medium", "large", "enterprise"
  revenue           Decimal?
  employees         Int?
  website           String?
  description       String?
  logo              String?
  status            String   @default("active") // active, inactive, prospect
  type              String   @default("prospect") // prospect, customer, partner, competitor
  source            String?  // referral, website, event, cold_call, etc.
  rating            String?  // hot, warm, cold
  priority          String   @default("medium") // low, medium, high, critical
  tags              Json     @default("[]")
  customFields      Json     @default("{}")
  
  // Address Information
  street            String?
  city              String?
  state             String?
  postalCode        String?
  country           String?
  timezone          String?
  
  // Social Links
  linkedinUrl       String?
  twitterHandle     String?
  facebookUrl       String?
  
  // Tracking
  lastContactDate   DateTime?
  nextFollowUpDate  DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Multi-tenant
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  
  // CRM Owner
  ownerId           String?
  owner             User?    @relation("CompanyOwner", fields: [ownerId], references: [id])
  
  // Relations
  contacts          CRMContact[]
  deals             CRMDeal[]
  activities        CRMActivity[]
  notes             CRMNote[]
  documents         CRMDocument[]
  tasks             CRMTask[]
  emails            CRMEmail[]
  calls             CRMCall[]
  meetings          CRMMeeting[]

  @@map("crm_companies")
  @@index([tenantId, status])
  @@index([tenantId, type])
  @@index([ownerId])
}

model CRMContact {
  id                String   @id @default(cuid())
  firstName         String
  lastName          String
  email             String?
  phone             String?
  mobile            String?
  jobTitle          String?
  department        String?
  status            String   @default("active") // active, inactive, do_not_contact
  leadScore         Int      @default(0)
  rating            String?  // hot, warm, cold
  source            String?
  tags              Json     @default("[]")
  customFields      Json     @default("{}")
  
  // Contact Information
  street            String?
  city              String?
  state             String?
  postalCode        String?
  country           String?
  timezone          String?
  
  // Social Information
  linkedinUrl       String?
  twitterHandle     String?
  facebookUrl       String?
  skypeId           String?
  
  // Preferences
  emailOptIn        Boolean  @default(true)
  smsOptIn          Boolean  @default(false)
  preferredContact  String   @default("email") // email, phone, sms
  
  // Tracking
  lastContactDate   DateTime?
  nextFollowUpDate  DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Multi-tenant
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  
  // Company Relationship
  companyId         String?
  company           CRMCompany? @relation(fields: [companyId], references: [id])
  
  // CRM Owner
  ownerId           String?
  owner             User?    @relation("ContactOwner", fields: [ownerId], references: [id])
  
  // Relations
  deals             CRMDeal[]
  activities        CRMActivity[]
  notes             CRMNote[]
  documents         CRMDocument[]
  tasks             CRMTask[]
  emails            CRMEmail[]
  calls             CRMCall[]
  meetings          CRMMeeting[]
  meetingAttendees  CRMMeetingAttendee[]

  @@map("crm_contacts")
  @@index([tenantId, status])
  @@index([email])
  @@index([companyId])
  @@index([ownerId])
}

model CRMDeal {
  id                String   @id @default(cuid())
  name              String
  value             Decimal
  currency          String   @default("USD")
  stage             String   @default("prospecting") // prospecting, qualification, proposal, negotiation, closed_won, closed_lost
  probability       Int      @default(0) // 0-100
  priority          String   @default("medium") // low, medium, high, critical
  source            String?
  type              String?  // new_business, existing_business, renewal
  description       String?
  tags              Json     @default("[]")
  customFields      Json     @default("{}")
  
  // Important Dates
  expectedCloseDate DateTime?
  actualCloseDate   DateTime?
  lastActivityDate  DateTime?
  nextActivityDate  DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Multi-tenant
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  
  // Relationships
  companyId         String?
  company           CRMCompany? @relation(fields: [companyId], references: [id])
  
  primaryContactId  String?
  primaryContact    CRMContact? @relation(fields: [primaryContactId], references: [id])
  
  // CRM Owner
  ownerId           String?
  owner             User?    @relation("DealOwner", fields: [ownerId], references: [id])
  
  // Relations
  activities        CRMActivity[]
  notes             CRMNote[]
  documents         CRMDocument[]
  tasks             CRMTask[]
  emails            CRMEmail[]
  calls             CRMCall[]
  meetings          CRMMeeting[]
  dealProducts      CRMDealProduct[]

  @@map("crm_deals")
  @@index([tenantId, stage])
  @@index([tenantId, expectedCloseDate])
  @@index([companyId])
  @@index([primaryContactId])
  @@index([ownerId])
}

model CRMProduct {
  id                String   @id @default(cuid())
  name              String
  sku               String?
  description       String?
  category          String?
  unitPrice         Decimal
  currency          String   @default("USD")
  active            Boolean  @default(true)
  customFields      Json     @default("{}")
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Multi-tenant
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  
  // Relations
  dealProducts      CRMDealProduct[]

  @@map("crm_products")
  @@index([tenantId, active])
  @@index([sku])
}

model CRMDealProduct {
  id                String   @id @default(cuid())
  quantity          Int      @default(1)
  unitPrice         Decimal
  discount          Decimal  @default(0)
  totalPrice        Decimal
  
  dealId            String
  deal              CRMDeal  @relation(fields: [dealId], references: [id], onDelete: Cascade)
  
  productId         String
  product           CRMProduct @relation(fields: [productId], references: [id])
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("crm_deal_products")
  @@index([dealId])
  @@index([productId])
}

model CRMActivity {
  id                String   @id @default(cuid())
  type              String   // call, email, meeting, task, note, demo, presentation
  subject           String
  description       String?
  status            String   @default("completed") // scheduled, in_progress, completed, cancelled
  priority          String   @default("medium") // low, medium, high, critical
  duration          Int?     // in minutes
  location          String?
  outcome           String?  // positive, negative, neutral
  customFields      Json     @default("{}")
  
  // Timing
  scheduledAt       DateTime?
  completedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Multi-tenant
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  
  // Relationships
  companyId         String?
  company           CRMCompany? @relation(fields: [companyId], references: [id])
  
  contactId         String?
  contact           CRMContact? @relation(fields: [contactId], references: [id])
  
  dealId            String?
  deal              CRMDeal? @relation(fields: [dealId], references: [id])
  
  // CRM Owner
  ownerId           String?
  owner             User?    @relation("ActivityOwner", fields: [ownerId], references: [id])

  @@map("crm_activities")
  @@index([tenantId, type])
  @@index([tenantId, scheduledAt])
  @@index([companyId])
  @@index([contactId])
  @@index([dealId])
  @@index([ownerId])
}

model CRMNote {
  id                String   @id @default(cuid())
  title             String?
  content           String
  isPrivate         Boolean  @default(false)
  tags              Json     @default("[]")
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Multi-tenant
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  
  // Relationships
  companyId         String?
  company           CRMCompany? @relation(fields: [companyId], references: [id])
  
  contactId         String?
  contact           CRMContact? @relation(fields: [contactId], references: [id])
  
  dealId            String?
  deal              CRMDeal? @relation(fields: [dealId], references: [id])
  
  // Author
  authorId          String
  author            User     @relation("NoteAuthor", fields: [authorId], references: [id])

  @@map("crm_notes")
  @@index([tenantId, createdAt])
  @@index([companyId])
  @@index([contactId])
  @@index([dealId])
  @@index([authorId])
}

model CRMDocument {
  id                String   @id @default(cuid())
  name              String
  fileName          String
  fileSize          Int?
  fileType          String?
  filePath          String
  description       String?
  tags              Json     @default("[]")
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Multi-tenant
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  
  // Relationships
  companyId         String?
  company           CRMCompany? @relation(fields: [companyId], references: [id])
  
  contactId         String?
  contact           CRMContact? @relation(fields: [contactId], references: [id])
  
  dealId            String?
  deal              CRMDeal? @relation(fields: [dealId], references: [id])
  
  // Uploader
  uploaderId        String
  uploader          User     @relation("DocumentUploader", fields: [uploaderId], references: [id])

  @@map("crm_documents")
  @@index([tenantId, createdAt])
  @@index([companyId])
  @@index([contactId])
  @@index([dealId])
  @@index([uploaderId])
}

model CRMTask {
  id                String   @id @default(cuid())
  title             String
  description       String?
  status            String   @default("pending") // pending, in_progress, completed, cancelled
  priority          String   @default("medium") // low, medium, high, critical
  dueDate           DateTime?
  completedAt       DateTime?
  tags              Json     @default("[]")
  customFields      Json     @default("{}")
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Multi-tenant
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  
  // Relationships
  companyId         String?
  company           CRMCompany? @relation(fields: [companyId], references: [id])
  
  contactId         String?
  contact           CRMContact? @relation(fields: [contactId], references: [id])
  
  dealId            String?
  deal              CRMDeal? @relation(fields: [dealId], references: [id])
  
  // Assignment
  assignedToId      String?
  assignedTo        User?    @relation("TaskAssignee", fields: [assignedToId], references: [id])
  
  createdById       String
  createdBy         User     @relation("TaskCreator", fields: [createdById], references: [id])

  @@map("crm_tasks")
  @@index([tenantId, status])
  @@index([tenantId, dueDate])
  @@index([companyId])
  @@index([contactId])
  @@index([dealId])
  @@index([assignedToId])
  @@index([createdById])
}

model CRMEmail {
  id                String   @id @default(cuid())
  subject           String
  body              String
  direction         String   // inbound, outbound
  status            String   @default("sent") // draft, scheduled, sent, delivered, opened, clicked, bounced
  threadId          String?
  messageId         String?
  fromEmail         String
  toEmails          Json     @default("[]")
  ccEmails          Json     @default("[]")
  bccEmails         Json     @default("[]")
  attachments       Json     @default("[]")
  emailProvider     String?  // gmail, outlook, sendgrid, etc.
  
  sentAt            DateTime?
  openedAt          DateTime?
  clickedAt         DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Multi-tenant
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  
  // Relationships
  companyId         String?
  company           CRMCompany? @relation(fields: [companyId], references: [id])
  
  contactId         String?
  contact           CRMContact? @relation(fields: [contactId], references: [id])
  
  dealId            String?
  deal              CRMDeal? @relation(fields: [dealId], references: [id])
  
  // Sender/Creator
  senderId          String?
  sender            User?    @relation("EmailSender", fields: [senderId], references: [id])

  @@map("crm_emails")
  @@index([tenantId, direction])
  @@index([tenantId, status])
  @@index([companyId])
  @@index([contactId])
  @@index([dealId])
  @@index([senderId])
  @@index([messageId])
}

model CRMCall {
  id                String   @id @default(cuid())
  subject           String
  description       String?
  direction         String   // inbound, outbound
  status            String   @default("completed") // scheduled, in_progress, completed, missed, cancelled
  outcome           String?  // positive, negative, neutral, voicemail
  duration          Int?     // in seconds
  recordingUrl      String?
  phoneNumber       String?
  
  scheduledAt       DateTime?
  startedAt         DateTime?
  endedAt           DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Multi-tenant
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  
  // Relationships
  companyId         String?
  company           CRMCompany? @relation(fields: [companyId], references: [id])
  
  contactId         String?
  contact           CRMContact? @relation(fields: [contactId], references: [id])
  
  dealId            String?
  deal              CRMDeal? @relation(fields: [dealId], references: [id])
  
  // Caller
  callerId          String?
  caller            User?    @relation("CallCaller", fields: [callerId], references: [id])

  @@map("crm_calls")
  @@index([tenantId, direction])
  @@index([tenantId, status])
  @@index([companyId])
  @@index([contactId])
  @@index([dealId])
  @@index([callerId])
}

model CRMMeeting {
  id                String   @id @default(cuid())
  title             String
  description       String?
  location          String?
  meetingUrl        String?
  status            String   @default("scheduled") // scheduled, in_progress, completed, cancelled
  type              String?  // demo, discovery, proposal, negotiation, closing
  outcome           String?  // positive, negative, neutral
  agenda            String?
  notes             String?
  
  startTime         DateTime
  endTime           DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Multi-tenant
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  
  // Relationships
  companyId         String?
  company           CRMCompany? @relation(fields: [companyId], references: [id])
  
  contactId         String?
  contact           CRMContact? @relation(fields: [contactId], references: [id])
  
  dealId            String?
  deal              CRMDeal? @relation(fields: [dealId], references: [id])
  
  // Organizer
  organizerId       String
  organizer         User     @relation("MeetingOrganizer", fields: [organizerId], references: [id])
  
  // Attendees
  attendees         CRMMeetingAttendee[]

  @@map("crm_meetings")
  @@index([tenantId, status])
  @@index([tenantId, startTime])
  @@index([companyId])
  @@index([contactId])
  @@index([dealId])
  @@index([organizerId])
}

model CRMMeetingAttendee {
  id                String   @id @default(cuid())
  email             String
  name              String?
  status            String   @default("invited") // invited, accepted, declined, tentative, no_response
  isOrganizer       Boolean  @default(false)
  
  meetingId         String
  meeting           CRMMeeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  
  contactId         String?
  contact           CRMContact? @relation(fields: [contactId], references: [id])
  
  userId            String?
  user              User?    @relation("MeetingAttendeeUser", fields: [userId], references: [id])

  @@map("crm_meeting_attendees")
  @@unique([meetingId, email])
  @@index([meetingId])
  @@index([contactId])
  @@index([userId])
}

model CRMPipeline {
  id                String   @id @default(cuid())
  name              String
  description       String?
  isDefault         Boolean  @default(false)
  active            Boolean  @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Multi-tenant
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  
  // Stages
  stages            CRMPipelineStage[]

  @@map("crm_pipelines")
  @@index([tenantId, active])
}

model CRMPipelineStage {
  id                String   @id @default(cuid())
  name              String
  description       String?
  probability       Int      @default(0) // 0-100
  order             Int
  color             String?
  active            Boolean  @default(true)
  
  pipelineId        String
  pipeline          CRMPipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("crm_pipeline_stages")
  @@unique([pipelineId, order])
  @@index([pipelineId])
}

// CRM Analytics and Reporting Models
model CRMReport {
  id                String   @id @default(cuid())
  name              String
  description       String?
  type              String   // sales, activities, performance, forecast
  config            Json     @default("{}")
  filters           Json     @default("{}")
  schedule          Json?    // for automated reports
  isPublic          Boolean  @default(false)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Multi-tenant
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  
  // Creator
  createdById       String
  createdBy         User     @relation("ReportCreator", fields: [createdById], references: [id])

  @@map("crm_reports")
  @@index([tenantId, type])
  @@index([createdById])
}

model CRMDashboard {
  id                String   @id @default(cuid())
  name              String
  description       String?
  layout            Json     @default("{}")
  widgets           Json     @default("[]")
  isDefault         Boolean  @default(false)
  isPublic          Boolean  @default(false)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Multi-tenant
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  
  // Creator
  createdById       String
  createdBy         User     @relation("DashboardCreator", fields: [createdById], references: [id])

  @@map("crm_dashboards")
  @@index([tenantId, isDefault])
  @@index([createdById])
}

// Update User model to include new CRM relations

// HR System Integration
model HRIntegration {
  id            String   @id @default(cuid())
  name          String
  type          String   // "workday", "bamboohr", "adp", "successfactors", "cornerstoneонdemand"
  version       String
  endpoint      String
  credentials   Json     @default("{}")
  config        Json     @default("{}")
  syncSettings  Json     @default("{}")
  status        String   @default("active")
  lastSync      DateTime?
  syncInterval  Int      @default(7200) // in seconds
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])

  syncLogs      HRSyncLog[]
  mappings      HRDataMapping[]

  @@map("hr_integrations")
}

model HRSyncLog {
  id            String   @id @default(cuid())
  integrationId String
  integration   HRIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  syncId        String   @unique
  operation     String
  status        String   @default("started")
  recordsProcessed Int   @default(0)
  recordsSucceeded Int   @default(0)
  recordsFailed    Int   @default(0)
  errors        Json     @default("[]")
  startTime     DateTime @default(now())
  endTime       DateTime?
  metadata      Json     @default("{}")

  @@map("hr_sync_logs")
}

// Widget Factory Models
model BlueprintDefinition {
  id            String   @id @default(cuid())
  name          String
  description   String?
  version       String   @default("1.0")
  category      String   @default("general")
  author        String   @default("system")
  type          String   @default("widget")
  tags          String[] @default([])
  composition   Json     @default("{}")
  validation    Json     @default("{}")
  inheritance   Json     @default("{}")
  configuration Json     @default("{}")
  schema        Json     @default("{}")
  metadata      Json     @default("{}")
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String

  instances BlueprintInstance[]

  @@map("blueprint_definitions")
}

model BlueprintInstance {
  id            String              @id @default(cuid())
  definitionId  String
  blueprintId   String              // Alias for definitionId
  definition    BlueprintDefinition @relation(fields: [definitionId], references: [id], onDelete: Cascade)
  name          String
  version       String              @default("1.0")
  config        Json                @default("{}")
  status        String              @default("active")
  state         String              @default("draft")
  isBuilt       Boolean             @default(false)
  buildErrors   String[]            @default([])
  canvasId      String?
  tenantId      String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  createdBy     String

  @@map("blueprint_instances")
}

model Canvas {
  id            String   @id @default(cuid())
  name          String
  description   String?
  layout        Json     @default("{}")
  elements      Json     @default("[]")
  viewport      Json     @default("{}")
  grid          Json     @default("{}")
  layers        Json     @default("[]")
  activeLayer   String?
  performance   Json     @default("{}")
  metadata      Json     @default("{}")
  active        Boolean  @default(true)
  tenantId      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String

  @@map("canvases")
}

model CollaborationSession {
  id            String   @id @default(cuid())
  name          String
  type          String   @default("widget_design")
  userName      String?
  userId        String?
  userColor     String?
  canvasId      String?
  cursor        Json     @default("{}")
  participants  Json     @default("[]")
  settings      Json     @default("{}")
  status        String   @default("active")
  isActive      Boolean  @default(true)
  startedAt     DateTime @default(now())
  endedAt       DateTime?
  lastSeen      DateTime @default(now())
  createdBy     String
  creator       User     @relation(fields: [createdBy], references: [id])
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])

  @@map("collaboration_sessions")
}

model HRDataMapping {
  id            String   @id @default(cuid())
  integrationId String
  integration   HRIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  sourceField   String
  targetField   String
  transformation Json    @default("{}")
  required      Boolean  @default(false)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([integrationId, sourceField, targetField])
  @@map("hr_data_mappings")
}

// Financial System Integration
model FinancialIntegration {
  id            String   @id @default(cuid())
  name          String
  type          String   // "quickbooks", "netsuite", "xero", "sage", "freshbooks"
  version       String
  endpoint      String
  credentials   Json     @default("{}")
  config        Json     @default("{}")
  syncSettings  Json     @default("{}")
  status        String   @default("active")
  lastSync      DateTime?
  syncInterval  Int      @default(3600) // in seconds
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])

  syncLogs      FinancialSyncLog[]
  mappings      FinancialDataMapping[]

  @@map("financial_integrations")
}

model FinancialSyncLog {
  id            String   @id @default(cuid())
  integrationId String
  integration   FinancialIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  syncId        String   @unique
  operation     String
  status        String   @default("started")
  recordsProcessed Int   @default(0)
  recordsSucceeded Int   @default(0)
  recordsFailed    Int   @default(0)
  errors        Json     @default("[]")
  startTime     DateTime @default(now())
  endTime       DateTime?
  metadata      Json     @default("{}")

  @@map("financial_sync_logs")
}

model FinancialDataMapping {
  id            String   @id @default(cuid())
  integrationId String
  integration   FinancialIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  sourceField   String
  targetField   String
  transformation Json    @default("{}")
  required      Boolean  @default(false)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([integrationId, sourceField, targetField])
  @@map("financial_data_mappings")
}

// Cloud Platform Integration
model CloudIntegration {
  id            String   @id @default(cuid())
  name          String
  type          String   // "aws", "azure", "gcp", "alibaba", "oracle_cloud"
  region        String
  credentials   Json     @default("{}")
  config        Json     @default("{}")
  services      Json     @default("[]") // ["compute", "storage", "database", "ai", "analytics"]
  status        String   @default("active")
  lastSync      DateTime?
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])

  resources     CloudResource[]
  deployments   CloudDeployment[]

  @@map("cloud_integrations")
}

model CloudResource {
  id            String   @id @default(cuid())
  integrationId String
  integration   CloudIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  resourceId    String
  name          String
  type          String   // "vm", "container", "function", "storage", "database"
  status        String   @default("running")
  region        String
  config        Json     @default("{}")
  metrics       Json     @default("{}")
  cost          Float    @default(0.0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")

  @@unique([integrationId, resourceId])
  @@map("cloud_resources")
}

model CloudDeployment {
  id            String   @id @default(cuid())
  integrationId String
  integration   CloudIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  deploymentId  String
  name          String
  type          String   // "kubernetes", "docker", "serverless", "vm"
  status        String   @default("pending")
  config        Json     @default("{}")
  logs          Json     @default("[]")
  startTime     DateTime @default(now())
  endTime       DateTime?
  metadata      Json     @default("{}")

  @@unique([integrationId, deploymentId])
  @@map("cloud_deployments")
}

// API Gateway & Management
model APIGateway {
  id            String   @id @default(cuid())
  name          String
  description   String
  baseUrl       String
  version       String   @default("1.0")
  status        String   @default("active")
  rateLimitConfig Json   @default("{}")
  authentication Json    @default("{}")
  middleware    Json     @default("[]")
  monitoring    Boolean  @default(true)
  analytics     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")

  endpoints     APIEndpoint[]
  apiKeys       APIKey[]
  rateLimits    APIRateLimit[]

  @@map("api_gateways")
}

model APIEndpoint {
  id          String   @id @default(cuid())
  gatewayId   String
  gateway     APIGateway @relation(fields: [gatewayId], references: [id], onDelete: Cascade)
  path        String
  method      String   // "GET", "POST", "PUT", "DELETE", "PATCH"
  description String
  handler     String
  middleware  Json     @default("[]")
  rateLimits  Json     @default("{}")
  auth        Json     @default("{}")
  validation  Json     @default("{}")
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  metadata    Json     @default("{}")

  analytics   APIAnalytics[]

  @@unique([gatewayId, path, method])
  @@map("api_endpoints")
}

model APIKey {
  id          String   @id @default(cuid())
  gatewayId   String
  gateway     APIGateway @relation(fields: [gatewayId], references: [id], onDelete: Cascade)
  keyId       String   @unique
  name        String
  description String?
  key         String   @unique
  scopes      String[]
  rateLimits  Json     @default("{}")
  expiresAt   DateTime?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  metadata    Json     @default("{}")

  @@map("api_keys")
}

model APIRateLimit {
  id          String   @id @default(cuid())
  gatewayId   String
  gateway     APIGateway @relation(fields: [gatewayId], references: [id], onDelete: Cascade)
  keyId       String?
  endpoint    String?
  limit       Int      @default(1000)
  window      Int      @default(3600) // in seconds
  current     Int      @default(0)
  resetTime   DateTime @default(now())
  metadata    Json     @default("{}")

  @@unique([gatewayId, keyId, endpoint])
  @@map("api_rate_limits")
}

model APIAnalytics {
  id          String   @id @default(cuid())
  endpointId  String
  endpoint    APIEndpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)
  timestamp   DateTime @default(now())
  method      String
  path        String
  statusCode  Int
  responseTime Int     // in milliseconds
  requestSize  Int     @default(0)
  responseSize Int     @default(0)
  userAgent   String?
  ipAddress   String?
  apiKey      String?
  metadata    Json     @default("{}")

  @@map("api_analytics")
}

// ===== CHUNK 6: MONITORING & ANALYTICS MODELS =====

// Real-time System Monitoring
model SystemMonitor {
  id                String   @id @default(cuid())
  tenantId          String?
  tenant            Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  monitorType       String   // "server", "database", "application", "network", "storage"
  instanceId        String   // Server/instance identifier
  status            String   @default("healthy") // healthy, warning, critical, down
  uptime            BigInt   @default(0) // Uptime in seconds
  lastHeartbeat     DateTime @default(now())
  responseTime      Float?   // Average response time in ms
  errorRate         Float    @default(0.0) // Error rate percentage
  throughput        BigInt   @default(0) // Requests per second
  memoryUsage       Float    @default(0.0) // Memory usage percentage
  cpuUsage          Float    @default(0.0) // CPU usage percentage
  diskUsage         Float    @default(0.0) // Disk usage percentage
  networkIn         BigInt   @default(0) // Network bytes in
  networkOut        BigInt   @default(0) // Network bytes out
  activeConnections Int      @default(0)
  queueDepth        Int      @default(0)
  metadata          Json     @default("{}")
  alertsTriggered   Json     @default("[]")
  region            String?
  environment       String   @default("production")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([monitorType, status, updatedAt])
  @@index([tenantId, monitorType, updatedAt])
  @@map("system_monitors")
}

// Live Metrics Collection
model LiveMetric {
  id          String   @id @default(cuid())
  tenantId    String?
  tenant      Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  metricType  String   // "performance", "usage", "business", "technical"
  metricName  String   // "api_response_time", "page_load_time", "conversion_rate"
  value       Float
  unit        String   // "ms", "seconds", "bytes", "percentage", "count"
  tags        Json     @default("{}")
  dimensions  Json     @default("{}")
  timestamp   DateTime @default(now())
  sourceId    String?  // Source system/component identifier
  userId      String?  // Optional user attribution
  sessionId   String?  // Session identifier
  metadata    Json     @default("{}")
  
  @@index([metricType, metricName, timestamp])
  @@index([tenantId, timestamp])
  @@index([timestamp]) // For time-series queries
  @@map("live_metrics")
}

// Resource Usage Tracking
model ResourceUsage {
  id             String   @id @default(cuid())
  tenantId       String?
  tenant         Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  resourceType   String   // "cpu", "memory", "disk", "network", "database", "api_calls"
  resourceName   String   // Specific resource identifier
  currentUsage   Float    // Current usage amount
  maxCapacity    Float?   // Maximum capacity
  usagePercent   Float    // Usage as percentage
  unit           String   // "bytes", "calls", "connections", "threads"
  threshold      Json     @default("{}") // Alert thresholds
  alertStatus    String   @default("ok") // ok, warning, critical
  trend          String?  // "increasing", "decreasing", "stable"
  forecast       Json     @default("{}") // Usage forecasting data
  region         String?
  instanceId     String?
  timestamp      DateTime @default(now())
  metadata       Json     @default("{}")

  @@index([resourceType, timestamp])
  @@index([tenantId, resourceType, timestamp])
  @@index([alertStatus, timestamp])
  @@map("resource_usage")
}

// User Engagement Analytics
model UserEngagement {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId            String?
  sessionId         String   // Session identifier
  pageViews         Int      @default(0)
  uniquePages       Int      @default(0)
  sessionDuration   Int      @default(0) // Duration in seconds
  bounceRate        Float    @default(0.0)
  interactionCount  Int      @default(0) // Clicks, form submissions, etc.
  featureUsage      Json     @default("{}") // Features used in session
  conversionEvents  Json     @default("[]") // Conversion funnel events
  deviceType        String?  // "desktop", "mobile", "tablet"
  browserType       String?
  operatingSystem   String?
  referrerSource    String?
  geoLocation       Json     @default("{}")
  userAgent         String?
  timestamp         DateTime @default(now())
  sessionStart      DateTime @default(now())
  sessionEnd        DateTime?
  metadata          Json     @default("{}")

  @@index([tenantId, timestamp])
  @@index([sessionId, timestamp])
  @@index([userId, timestamp])
  @@map("user_engagement")
}

// Feature Usage Statistics
model FeatureUsage {
  id             String   @id @default(cuid())
  tenantId       String
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  featureName    String   // "dashboard", "reports", "integrations", "widgets"
  featureCategory String  // "core", "advanced", "premium", "enterprise"
  userId         String?
  sessionId      String?
  usageCount     Int      @default(1)
  duration       Int      @default(0) // Time spent in feature (seconds)
  interactionType String  // "click", "view", "form_submit", "download"
  elementId      String?  // Specific UI element
  elementType    String?  // "button", "link", "form", "widget"
  context        Json     @default("{}") // Usage context
  success        Boolean  @default(true)
  errorMessage   String?
  userExperience Json     @default("{}") // UX metrics
  timestamp      DateTime @default(now())
  metadata       Json     @default("{}")

  @@index([tenantId, featureName, timestamp])
  @@index([featureName, timestamp])
  @@index([userId, timestamp])
  @@map("feature_usage")
}

// Conversion Funnel Analysis
model ConversionFunnel {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  funnelName      String   // "signup", "purchase", "demo_request", "subscription"
  funnelStep      String   // "awareness", "interest", "consideration", "purchase"
  stepOrder       Int      // Step order in funnel
  userId          String?
  sessionId       String   // Session identifier
  eventType       String   // "page_view", "form_start", "form_complete", "purchase"
  eventData       Json     @default("{}")
  conversionValue Float    @default(0.0) // Monetary value if applicable
  completed       Boolean  @default(false)
  timeToComplete  Int?     // Time to complete step (seconds)
  dropoffReason   String?  // If user dropped off
  source          String?  // Traffic source
  campaign        String?  // Marketing campaign
  cohort          String?  // User cohort
  timestamp       DateTime @default(now())
  metadata        Json     @default("{}")

  @@index([tenantId, funnelName, stepOrder, timestamp])
  @@index([funnelName, timestamp])
  @@index([sessionId, timestamp])
  @@map("conversion_funnels")
}

// Revenue Analytics
model RevenueAnalytics {
  id                String   @id @default(cuid())  
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  revenueType       String   // "subscription", "transaction", "usage", "addon"
  amount            Float    // Revenue amount
  currency          String   @default("USD")
  billingPeriod     String?  // "monthly", "yearly", "one_time"
  planTier          String?  // "basic", "premium", "enterprise"
  userId            String?
  accountId         String?  // Customer account identifier
  transactionId     String?
  paymentMethod     String?  // "card", "bank_transfer", "paypal"
  discountApplied   Float    @default(0.0)
  taxAmount         Float    @default(0.0)
  netRevenue        Float    // Amount after discounts and tax
  mrr               Float    @default(0.0) // Monthly Recurring Revenue
  arr               Float    @default(0.0) // Annual Recurring Revenue
  ltv               Float    @default(0.0) // Customer Lifetime Value
  churnRisk         Float    @default(0.0) // Churn probability
  cohort            String?
  region            String?
  timestamp         DateTime @default(now())
  recognitionDate   DateTime @default(now()) // Revenue recognition date
  metadata          Json     @default("{}")

  @@index([tenantId, revenueType, timestamp])
  @@index([planTier, timestamp])
  @@index([recognitionDate])
  @@map("revenue_analytics")
}

// Application Performance Monitoring (APM)
model APMMetric {
  id               String   @id @default(cuid())
  tenantId         String?
  tenant           Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  serviceName      String   // Service/application name
  endpointPath     String?  // API endpoint path
  methodType       String?  // GET, POST, PUT, DELETE
  responseTime     Float    // Response time in milliseconds
  statusCode       Int?     // HTTP status code
  errorRate        Float    @default(0.0)
  throughput       Float    @default(0.0) // Requests per second
  memoryUsage      Float    @default(0.0)
  cpuUsage         Float    @default(0.0)
  databaseTime     Float    @default(0.0) // Database query time
  externalApiTime  Float    @default(0.0) // External API call time
  cacheHitRate     Float    @default(0.0)
  errorMessage     String?
  traceId          String?  // Distributed tracing ID
  spanId           String?  // Span identifier
  userId           String?
  sessionId        String?
  userAgent        String?
  ipAddress        String?
  region           String?
  timestamp        DateTime @default(now())
  metadata         Json     @default("{}")

  @@index([serviceName, timestamp])
  @@index([endpointPath, methodType, timestamp])
  @@index([tenantId, timestamp])
  @@index([statusCode, timestamp])
  @@map("apm_metrics")
}

// Core Web Vitals Tracking
model WebVital {
  id                String   @id @default(cuid())  
  tenantId          String?
  tenant            Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  metricName        String   // "LCP", "FID", "CLS", "FCP", "TTFB"
  value             Float    // Metric value
  rating            String   // "good", "needs-improvement", "poor"
  pageUrl           String   // Page URL where metric was collected
  userId            String?
  sessionId         String?
  deviceType        String?  // "desktop", "mobile", "tablet"
  connectionType    String?  // "4g", "3g", "wifi", "slow-2g"
  browserName       String?
  browserVersion    String?
  operatingSystem   String?
  screenResolution  String?
  navigationTiming  Json     @default("{}") // Navigation timing API data
  resourceTiming    Json     @default("{}") // Resource timing data
  userAgent         String?
  ipAddress         String?
  geoLocation       Json     @default("{}")
  timestamp         DateTime @default(now())
  metadata          Json     @default("{}")

  @@index([metricName, rating, timestamp])
  @@index([pageUrl, timestamp])
  @@index([tenantId, timestamp])
  @@index([deviceType, timestamp])
  @@map("web_vitals")
}

// Database Query Performance
model QueryPerformance {
  id                String   @id @default(cuid())
  tenantId          String?
  tenant            Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  queryType         String   // "SELECT", "INSERT", "UPDATE", "DELETE"
  tableName         String?
  queryHash         String   // Hash of the query for grouping
  executionTime     Float    // Execution time in milliseconds
  rowsAffected      Int      @default(0)
  rowsScanned       Int      @default(0)
  indexUsage        Json     @default("[]") // Indexes used
  queryPlan         Json     @default("{}") // Query execution plan
  connectionCount   Int      @default(0)
  lockWaitTime      Float    @default(0.0)
  ioReadTime        Float    @default(0.0)
  ioWriteTime       Float    @default(0.0)
  cacheHit          Boolean  @default(false)
  userId            String?
  sessionId         String?
  applicationName   String?
  errorMessage      String?
  warningCount      Int      @default(0)
  region            String?
  timestamp         DateTime @default(now())
  metadata          Json     @default("{}")

  @@index([queryType, tableName, timestamp])
  @@index([executionTime, timestamp])
  @@index([tenantId, timestamp])
  @@index([queryHash, timestamp])
  @@map("query_performance")
}

// User Journey Tracking
model UserJourney {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId          String?
  sessionId       String   // Session identifier
  journeyId       String   // Unique journey identifier
  stepNumber      Int      // Step in the journey
  stepName        String   // "landing_page", "product_view", "cart_add", "checkout"
  pageUrl         String
  elementClicked  String?  // CSS selector or element ID
  actionType      String   // "page_view", "click", "form_submit", "scroll", "hover"
  actionData      Json     @default("{}")
  timeOnStep      Int      @default(0) // Time spent on this step (seconds)
  exitPoint       Boolean  @default(false) // If user exited journey at this step
  conversionEvent Boolean  @default(false) // If this step is a conversion
  errorOccurred   Boolean  @default(false)
  errorMessage    String?
  deviceType      String?
  browserType     String?
  referrerUrl     String?
  timestamp       DateTime @default(now())
  metadata        Json     @default("{}")

  @@index([tenantId, journeyId, stepNumber])
  @@index([sessionId, stepNumber])
  @@index([userId, timestamp])
  @@map("user_journeys")
}

// Heatmap Data
model HeatmapData {
  id           String   @id @default(cuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  pageUrl      String   // Page URL
  elementId    String?  // Element identifier
  elementType  String?  // "button", "link", "form", "image"
  elementText  String?  // Element text content
  xCoordinate  Float    // X coordinate of interaction
  yCoordinate  Float    // Y coordinate of interaction
  interactionType String // "click", "hover", "scroll", "touch"
  sessionId    String?
  userId       String?
  deviceType   String?
  screenWidth  Int?
  screenHeight Int?
  clickCount   Int      @default(1)
  hoverTime    Int      @default(0) // Hover duration in milliseconds
  scrollDepth  Float    @default(0.0) // Scroll percentage
  timestamp    DateTime @default(now())
  metadata     Json     @default("{}")

  @@index([tenantId, pageUrl, timestamp])
  @@index([elementType, interactionType, timestamp])
  @@index([sessionId, timestamp])
  @@map("heatmap_data")
}

// Session Recording
model SessionRecording {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  sessionId         String   @unique // Session identifier
  userId            String?
  recordingUrl      String?  // URL to recording file
  duration          Int      @default(0) // Recording duration in seconds
  pageCount         Int      @default(0) // Number of pages visited
  interactionCount  Int      @default(0) // Number of interactions
  errorCount        Int      @default(0) // Number of errors occurred
  conversionEvents  Json     @default("[]") // Conversion events in session
  deviceType        String?
  browserType       String?
  operatingSystem   String?
  screenResolution  String?
  ipAddress         String?
  geoLocation       Json     @default("{}")
  referrerUrl       String?
  landingPage       String?
  exitPage          String?
  bounced           Boolean  @default(false)
  startTime         DateTime @default(now())
  endTime           DateTime?
  metadata          Json     @default("{}")

  @@index([tenantId, startTime])
  @@index([userId, startTime])
  @@index([duration, interactionCount])
  @@map("session_recordings")
}

// A/B Testing Framework
model ABTest {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  testName          String   // Test name
  hypothesis        String?  // Test hypothesis
  status            String   @default("draft") // draft, running, paused, completed, archived
  testType          String   // "feature_flag", "ui_change", "algorithm", "content"
  variants          Json     // Test variants configuration
  trafficAllocation Json     // Traffic allocation per variant
  targetAudience    Json     @default("{}") // Audience targeting rules
  conversionGoals   Json     @default("[]") // Conversion goals and metrics
  statisticalPower  Float    @default(0.8)
  significanceLevel Float    @default(0.05)
  minDetectableEffect Float  @default(0.05)
  sampleSize        Int?     // Required sample size
  currentSampleSize Int      @default(0)
  startDate         DateTime?
  endDate           DateTime?
  results           Json     @default("{}") // Test results and statistics
  winner            String?  // Winning variant
  confidenceLevel   Float    @default(0.0)
  createdBy         String?
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  abTestParticipants ABTestParticipant[]

  @@index([tenantId, status, startDate])
  @@index([testType, status])
  @@map("ab_tests")
}

// A/B Test Participants
model ABTestParticipant {
  id            String   @id @default(cuid())
  testId        String
  abTest        ABTest   @relation(fields: [testId], references: [id], onDelete: Cascade)
  userId        String?
  sessionId     String   // Session identifier  
  assignedVariant String // Assigned test variant
  conversionEvents Json  @default("[]") // Conversion events for this participant
  converted     Boolean  @default(false)
  conversionValue Float  @default(0.0)
  deviceType    String?
  browserType   String?
  geoLocation   Json     @default("{}")
  assignedAt    DateTime @default(now())
  metadata      Json     @default("{}")

  @@index([testId, assignedVariant])
  @@index([sessionId])
  @@index([userId, testId])
  @@map("ab_test_participants")
}

// Behavioral Segmentation
model BehavioralSegment {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  segmentName     String   // "power_users", "churning_customers", "new_users"
  segmentType     String   // "behavioral", "demographic", "psychographic", "geographic"
  criteria        Json     // Segmentation criteria
  userCount       Int      @default(0)
  isActive        Boolean  @default(true)
  autoUpdate      Boolean  @default(true) // Auto-update segment membership
  description     String?
  tags            String[] @default([])
  createdBy       String?
  lastUpdated     DateTime @default(now())
  createdAt       DateTime @default(now())
  metadata        Json     @default("{}")

  // Relations
  segmentMemberships SegmentMembership[]

  @@index([tenantId, segmentType])
  @@index([isActive, autoUpdate])
  @@map("behavioral_segments")
}

// Segment Membership
model SegmentMembership {
  id              String            @id @default(cuid())
  segmentId       String
  segment         BehavioralSegment @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  userId          String?
  sessionId       String?
  membershipScore Float             @default(1.0) // How well user fits segment
  joinedAt        DateTime          @default(now())
  lastActivity    DateTime          @default(now())
  isActive        Boolean           @default(true)
  metadata        Json              @default("{}")

  @@index([segmentId, isActive])
  @@index([userId, segmentId])
  @@map("segment_memberships")
}

// Uptime Monitoring
model UptimeMonitor {
  id              String   @id @default(cuid())
  tenantId        String?
  tenant          Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  monitorName     String   // Human-readable monitor name
  monitorType     String   // "http", "tcp", "ping", "dns", "ssl"
  target          String   // URL, IP, or hostname to monitor
  checkInterval   Int      @default(60) // Check interval in seconds
  timeout         Int      @default(30) // Timeout in seconds
  isActive        Boolean  @default(true)
  status          String   @default("up") // up, down, degraded
  lastCheckTime   DateTime @default(now())
  responseTime    Float?   // Last response time in ms
  uptimePercent   Float    @default(100.0) // Uptime percentage
  totalChecks     Int      @default(0)
  successfulChecks Int     @default(0)
  failedChecks    Int      @default(0)
  lastDowntime    DateTime?
  downDuration    Int      @default(0) // Total downtime in seconds
  regions         String[] @default([]) // Monitoring regions
  alertContacts   Json     @default("[]") // Alert contact configuration
  slaTarget       Float    @default(99.9) // SLA target percentage
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  uptimeChecks UptimeCheck[]
  
  @@index([monitorType, status])
  @@index([tenantId, isActive])
  @@map("uptime_monitors")
}

// Uptime Checks
model UptimeCheck {
  id            String        @id @default(cuid())
  monitorId     String
  monitor       UptimeMonitor @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  checkTime     DateTime      @default(now())
  status        String        // "success", "failure", "timeout"
  responseTime  Float?        // Response time in ms
  statusCode    Int?          // HTTP status code (for HTTP monitors)
  errorMessage  String?       // Error message if check failed
  responseSize  Int?          // Response size in bytes
  region        String?       // Region where check was performed
  ipAddress     String?       // Resolved IP address
  sslExpiry     DateTime?     // SSL certificate expiry (for SSL monitors)
  metadata      Json          @default("{}")

  @@index([monitorId, checkTime])
  @@index([status, checkTime])
  @@map("uptime_checks")
}

// Error Rate Tracking
model ErrorRate {
  id              String   @id @default(cuid())
  tenantId        String?
  tenant          Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  serviceName     String   // Service or application name
  errorType       String   // "http_error", "javascript_error", "database_error", "api_error"
  errorCode       String?  // HTTP status code or error code
  errorMessage    String?  // Error message
  errorCount      Int      @default(1)
  totalRequests   Int      @default(1)
  errorRate       Float    @default(0.0) // Error rate percentage
  severity        String   @default("medium") // low, medium, high, critical
  affectedUsers   Int      @default(0)
  firstOccurrence DateTime @default(now())
  lastOccurrence  DateTime @default(now())
  resolved        Boolean  @default(false)
  resolution      String?  // Resolution notes
  stackTrace      String?  // Error stack trace
  userAgent       String?
  ipAddress       String?
  region          String?
  environment     String   @default("production")
  timestamp       DateTime @default(now())
  metadata        Json     @default("{}")

  @@index([serviceName, errorType, timestamp])
  @@index([errorRate, severity, timestamp])
  @@index([tenantId, timestamp])
  @@index([resolved, timestamp])
  @@map("error_rates")
}

// Alert Configuration
model AlertConfiguration {
  id                String   @id @default(cuid())
  tenantId          String?
  tenant            Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  alertName         String   // Human-readable alert name
  alertType         String   // "metric", "log", "synthetic", "composite"
  metricName        String?  // Metric to monitor
  condition         String   // "greater_than", "less_than", "equals", "not_equals"
  threshold         Float    // Alert threshold value
  evaluationWindow  Int      @default(300) // Evaluation window in seconds
  datapoints        Int      @default(2) // Datapoints to trigger alert
  comparison        String   @default("greater_than") // Comparison operator
  isActive          Boolean  @default(true)
  severity          String   @default("medium") // low, medium, high, critical
  description       String?
  query             String?  // Custom query for complex alerts
  suppressionRules  Json     @default("{}") // Alert suppression rules
  escalationRules   Json     @default("{}") // Escalation configuration
  notificationChannels Json  @default("[]") // Notification channels
  tags              String[] @default([])
  createdBy         String?
  lastTriggered     DateTime?
  triggerCount      Int      @default(0)
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  alertTriggers AlertTrigger[]

  @@index([alertType, isActive])
  @@index([tenantId, severity])
  @@map("alert_configurations")
}

// Alert Triggers
model AlertTrigger {
  id                    String             @id @default(cuid())
  alertConfigurationId  String
  alertConfiguration    AlertConfiguration @relation(fields: [alertConfigurationId], references: [id], onDelete: Cascade)
  triggerTime           DateTime           @default(now())
  triggerValue          Float              // Value that triggered the alert
  status                String             @default("triggered") // triggered, acknowledged, resolved
  acknowledgedBy        String?            // User who acknowledged the alert
  acknowledgedAt        DateTime?
  resolvedBy            String?            // User who resolved the alert
  resolvedAt            DateTime?
  resolution            String?            // Resolution notes
  notificationsSent     Json               @default("[]") // Notifications sent
  escalationLevel       Int                @default(0)
  metadata              Json               @default("{}")

  @@index([alertConfigurationId, triggerTime])
  @@index([status, triggerTime])
  @@map("alert_triggers")
}

// Incident Response
model IncidentResponse {
  id                String   @id @default(cuid())
  tenantId          String?
  tenant            Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  incidentId        String   @unique // Unique incident identifier
  title             String   // Incident title
  description       String?  // Incident description
  severity          String   // low, medium, high, critical
  status            String   @default("open") // open, investigating, resolved, closed
  category          String?  // "performance", "security", "availability", "data"
  priority          String   @default("medium") // low, medium, high, critical
  assignedTo        String?  // User assigned to incident
  reportedBy        String?  // User who reported incident
  affectedServices  String[] @default([]) // Services affected by incident
  affectedUsers     Int      @default(0) // Number of users affected
  rootCause         String?  // Root cause analysis
  timeline          Json     @default("[]") // Incident timeline
  actions           Json     @default("[]") // Actions taken
  postMortem        String?  // Post-mortem analysis
  preventionMeasures Json    @default("[]") // Prevention measures
  communicationPlan Json     @default("{}") // Communication plan
  externalComms     Boolean  @default(false) // External communications needed
  slaBreached       Boolean  @default(false) // SLA breach indicator
  estimatedImpact   Float    @default(0.0) // Estimated business impact
  detectedAt        DateTime @default(now())
  acknowledgedAt    DateTime?
  resolvedAt        DateTime?
  closedAt          DateTime?
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([severity, status, detectedAt])
  @@index([tenantId, status])
  @@index([category, detectedAt])
  @@map("incident_responses")
}

// Add relations to SystemMonitor, LiveMetric, etc. to Tenant model
// (Note: The relation fields will be added to the Tenant model)

// Workflow Automation & Orchestration
model WorkflowEngine {
  id            String   @id @default(cuid())
  name          String
  description   String
  type          String   // "sequential", "parallel", "conditional", "event_driven"
  status        String   @default("active")
  config        Json     @default("{}")
  triggers      Json     @default("[]")
  actions       Json     @default("[]")
  conditions    Json     @default("[]")
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  metadata      Json     @default("{}")

  workflows     Workflow[]
  executions    WorkflowExecution[]

  @@map("workflow_engines")
}

model Workflow {
  id            String   @id @default(cuid())
  engineId      String
  engine        WorkflowEngine @relation(fields: [engineId], references: [id], onDelete: Cascade)
  name          String
  description   String
  type          String   // "approval", "automation", "integration", "notification"
  definition    Json     @default("{}")
  config        Json     @default("{}")
  triggers      Json     @default("[]")
  steps         Json     @default("[]")
  conditions    Json     @default("[]")
  version       String   @default("1.0")
  status        String   @default("draft") // "draft", "active", "inactive", "deprecated"
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  metadata      Json     @default("{}")

  executions    WorkflowExecution[]

  @@map("workflows")
}

model WorkflowExecution {
  id            String   @id @default(cuid())
  workflowId    String
  workflow      Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  engineId      String
  engine        WorkflowEngine @relation(fields: [engineId], references: [id], onDelete: Cascade)
  executionId   String   @unique
  triggeredBy   String
  startTime     DateTime @default(now())
  endTime       DateTime?
  status        String   @default("running") // "running", "completed", "failed", "cancelled", "paused"
  currentStep   Int      @default(0)
  steps         Json     @default("[]")
  variables     Json     @default("{}")
  results       Json     @default("{}")
  errors        Json     @default("[]")
  metadata      Json     @default("{}")

  @@map("workflow_executions")
}

// ETL & Data Integration
model ETLPipeline {
  id            String   @id @default(cuid())
  name          String
  description   String
  type          String   // "extract", "transform", "load", "etl", "elt"
  source        Json     @default("{}")
  destination   Json     @default("{}")
  transformation Json    @default("{}")
  schedule      String   // cron expression
  status        String   @default("active")
  lastRun       DateTime?
  nextRun       DateTime?
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  metadata      Json     @default("{}")

  runs          ETLRun[]

  @@map("etl_pipelines")
}

model ETLRun {
  id            String   @id @default(cuid())
  pipelineId    String
  pipeline      ETLPipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  runId         String   @unique
  startTime     DateTime @default(now())
  endTime       DateTime?
  status        String   @default("running") // "running", "completed", "failed", "cancelled"
  recordsProcessed Int   @default(0)
  recordsSucceeded Int   @default(0)
  recordsFailed    Int   @default(0)
  errors        Json     @default("[]")
  logs          Json     @default("[]")
  metrics       Json     @default("{}")
  metadata      Json     @default("{}")

  @@map("etl_runs")
}

// Communication & Collaboration Integration
model CommunicationIntegration {
  id            String   @id @default(cuid())
  name          String
  type          String   // "slack", "teams", "email", "zoom", "webex"
  version       String
  endpoint      String
  credentials   Json     @default("{}")
  config        Json     @default("{}")
  status        String   @default("active")
  lastSync      DateTime?
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])

  channels      CommunicationChannel[]
  messages      CommunicationMessage[]

  @@map("communication_integrations")
}

model CommunicationChannel {
  id            String   @id @default(cuid())
  integrationId String
  integration   CommunicationIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  channelId     String
  name          String
  type          String   // "public", "private", "direct", "group"
  description   String?
  members       Json     @default("[]")
  config        Json     @default("{}")
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")

  @@unique([integrationId, channelId])
  @@map("communication_channels")
}

model CommunicationMessage {
  id            String   @id @default(cuid())
  integrationId String
  integration   CommunicationIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  messageId     String
  channelId     String
  senderId      String
  content       String
  type          String   // "text", "file", "image", "audio", "video"
  timestamp     DateTime @default(now())
  metadata      Json     @default("{}")

  @@unique([integrationId, messageId])
  @@map("communication_messages")
}

// Business Intelligence Integration
model BIIntegration {
  id            String   @id @default(cuid())
  name          String
  type          String   // "tableau", "powerbi", "looker", "qlik", "sisense"
  version       String
  endpoint      String
  credentials   Json     @default("{}")
  config        Json     @default("{}")
  status        String   @default("active")
  lastSync      DateTime?
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])

  dashboards    BIDashboard[]
  reports       BIReport[]

  @@map("bi_integrations")
}

model BIDashboard {
  id            String   @id @default(cuid())
  integrationId String
  integration   BIIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  dashboardId   String
  name          String
  description   String?
  url           String?
  config        Json     @default("{}")
  widgets       Json     @default("[]")
  permissions   Json     @default("{}")
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")

  @@unique([integrationId, dashboardId])
  @@map("bi_dashboards")
}

model BIReport {
  id            String   @id @default(cuid())
  integrationId String
  integration   BIIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  reportId      String
  name          String
  description   String?
  type          String   // "scheduled", "ad_hoc", "real_time"
  config        Json     @default("{}")
  schedule      String?  // cron expression
  recipients    Json     @default("[]")
  lastRun       DateTime?
  nextRun       DateTime?
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")

  @@unique([integrationId, reportId])
  @@map("bi_reports")
}

// Enterprise Marketplace
model MarketplaceApp {
  id            String   @id @default(cuid())
  name          String
  description   String
  category      String   // "integration", "automation", "analytics", "security", "productivity"
  publisher     String
  version       String
  logo          String?
  screenshots   Json     @default("[]")
  pricing       Json     @default("{}")
  features      Json     @default("[]")
  requirements  Json     @default("{}")
  config        Json     @default("{}")
  permissions   Json     @default("[]")
  status        String   @default("pending") // "pending", "approved", "rejected", "published", "deprecated"
  downloads     Int      @default(0)
  rating        Float    @default(0.0)
  reviews       Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")

  installations MarketplaceInstallation[]
  reviewRecords MarketplaceReview[]
  revenues      MarketplaceRevenue[]
  portal        DeveloperPortal? @relation(fields: [publisher], references: [developerId])

  @@map("marketplace_apps")
}

model MarketplaceInstallation {
  id            String   @id @default(cuid())
  appId         String
  app           MarketplaceApp @relation(fields: [appId], references: [id], onDelete: Cascade)
  tenantId      String
  userId        String
  version       String
  config        Json     @default("{}")
  status        String   @default("installing") // "installing", "installed", "failed", "updating", "uninstalling"
  installedAt   DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")

  @@unique([appId, tenantId])
  @@map("marketplace_installations")
}

// ===== CHUNK 7: API & INTEGRATION POWERHOUSE MODELS =====

// Comprehensive Webhook Management System
model WebhookEndpoint {
  id              String   @id @default(cuid())
  tenantId        String?
  tenant          Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name            String
  description     String?
  url             String
  method          String   @default("POST")
  events          String[] // Array of event types this webhook subscribes to
  headers         Json     @default("{}")
  secret          String?  // For HMAC signature verification
  isActive        Boolean  @default(true)
  retryPolicy     Json     @default("{\"maxRetries\": 3, \"backoffMultiplier\": 2}")
  timeout         Int      @default(30) // seconds
  lastTriggeredAt DateTime?
  successCount    Int      @default(0)
  failureCount    Int      @default(0)
  avgResponseTime Float    @default(0.0)
  securityConfig  Json     @default("{}")
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?

  deliveries      WebhookDelivery[]
  attempts        WebhookAttempt[]

  @@map("webhook_endpoints")
}

model WebhookEvent {
  id          String   @id @default(cuid())
  eventType   String   // "user.created", "order.completed", "payment.failed", etc.
  category    String   // "user", "order", "payment", "tenant", "integration"
  description String
  payloadSchema Json   @default("{}")
  isActive    Boolean  @default(true)
  priority    String   @default("normal") // "low", "normal", "high", "critical"
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  deliveries  WebhookDelivery[]

  @@unique([eventType])
  @@map("webhook_events")
}

model WebhookDelivery {
  id           String   @id @default(cuid())
  endpointId   String
  endpoint     WebhookEndpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)
  eventId      String
  event        WebhookEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  payload      Json
  status       String   @default("pending") // "pending", "success", "failed", "retrying"
  attempts     Int      @default(0)
  maxAttempts  Int      @default(3)
  nextAttempt  DateTime?
  firstAttempt DateTime @default(now())
  lastAttempt  DateTime?
  responseCode Int?
  responseBody String?
  errorMessage String?
  responseTime Int?     // milliseconds
  signature    String?  // HMAC signature for verification
  metadata     Json     @default("{}")

  attemptLogs  WebhookAttempt[]

  @@map("webhook_deliveries")
}

model WebhookAttempt {
  id           String   @id @default(cuid())
  deliveryId   String
  delivery     WebhookDelivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  endpointId   String
  endpoint     WebhookEndpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)
  attemptNumber Int
  status       String   // "pending", "success", "failed", "timeout"
  requestHeaders Json   @default("{}")
  requestBody  String
  responseCode Int?
  responseHeaders Json  @default("{}")
  responseBody String?
  responseTime Int?     // milliseconds
  errorMessage String?
  timestamp    DateTime @default(now())
  metadata     Json     @default("{}")

  @@unique([deliveryId, attemptNumber])
  @@map("webhook_attempts")
}

// GraphQL Support System
model GraphQLSchema {
  id          String   @id @default(cuid())
  version     String   @default("1.0")
  schema      String   // SDL (Schema Definition Language)
  isActive    Boolean  @default(true)
  description String?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  queries     GraphQLQuery[]

  @@unique([version])
  @@map("graphql_schemas")
}

model GraphQLQuery {
  id            String   @id @default(cuid())
  schemaId      String
  schema        GraphQLSchema @relation(fields: [schemaId], references: [id], onDelete: Cascade)
  query         String
  variables     Json     @default("{}")
  operationName String?
  queryHash     String   // Hash for query identification and caching
  complexity    Int      @default(0)
  depth         Int      @default(0)
  executionTime Float    // milliseconds
  status        String   // "success", "error", "timeout"
  result        Json?
  errorMessage  String?
  userId        String?
  apiKey        String?
  userAgent     String?
  ipAddress     String?
  timestamp     DateTime @default(now())
  metadata      Json     @default("{}")

  @@index([queryHash])
  @@index([timestamp])
  @@map("graphql_queries")
}

// Enhanced API Documentation System
model APIDocumentation {
  id            String   @id @default(cuid())
  gatewayId     String?
  name          String
  version       String   @default("1.0")
  title         String
  description   String
  basePath      String?
  schemes       String[] @default(["https"])
  consumes      String[] @default(["application/json"])
  produces      String[] @default(["application/json"])
  openAPISpec   Json     @default("{}")
  isPublished   Boolean  @default(false)
  isVersioned   Boolean  @default(true)
  authTypes     String[] @default(["apiKey", "oauth2"])
  tags          Json     @default("[]")
  externalDocs  Json     @default("{}")
  contact       Json     @default("{}")
  license       Json     @default("{}")
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  schemas       APISchema[]
  examples      APIExample[]

  @@unique([name, version])
  @@map("api_documentation")
}

model APISchema {
  id              String   @id @default(cuid())
  documentationId String
  documentation   APIDocumentation @relation(fields: [documentationId], references: [id], onDelete: Cascade)
  schemaName      String
  schemaType      String   @default("object") // "object", "array", "string", "number", "boolean"
  properties      Json     @default("{}")
  required        String[] @default([])
  description     String?
  example         Json?
  additionalProperties Boolean @default(true)
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([documentationId, schemaName])
  @@map("api_schemas")
}

model APIExample {
  id              String   @id @default(cuid())
  documentationId String
  documentation   APIDocumentation @relation(fields: [documentationId], references: [id], onDelete: Cascade)
  endpointPath    String
  method          String
  language        String   // "curl", "javascript", "python", "php", "java", "csharp", "go", "ruby"
  title           String
  description     String?
  code            String
  request         Json?
  response        Json?
  isDefault       Boolean  @default(false)
  order           Int      @default(0)
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([documentationId, endpointPath, method, language])
  @@map("api_examples")
}

// Third-party Platform Integration Connectors
model EcommerceIntegration {
  id              String   @id @default(cuid())
  tenantId        String?
  tenant          Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name            String
  platform        String   // "shopify", "woocommerce", "magento", "bigcommerce", "prestashop", "opencart"
  version         String
  storeUrl        String
  apiEndpoint     String
  credentials     Json     @default("{}")
  configuration   Json     @default("{}")
  syncSettings    Json     @default("{}")
  status          String   @default("inactive") // "active", "inactive", "error", "syncing", "suspended"
  lastSync        DateTime?
  syncInterval    Int      @default(3600) // seconds
  productsCount   Int      @default(0)
  ordersCount     Int      @default(0)
  customersCount  Int      @default(0)
  errorCount      Int      @default(0)
  lastError       String?
  features        Json     @default("[]") // ["products", "orders", "customers", "inventory", "analytics"]
  webhooks        Json     @default("[]")
  rateLimits      Json     @default("{}")
  monitoring      Json     @default("{}")
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?

  syncLogs        EcommerceSyncLog[]
  mappings        EcommerceDataMapping[]

  @@map("ecommerce_integrations")
}

model EcommerceSyncLog {
  id              String   @id @default(cuid())
  integrationId   String
  integration     EcommerceIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  syncId          String   @unique
  operation       String   // "import_products", "import_orders", "import_customers", "export_data", "sync_inventory"
  status          String   @default("started") // "started", "completed", "failed", "cancelled"
  recordsProcessed Int     @default(0)
  recordsSucceeded Int     @default(0)
  recordsFailed   Int      @default(0)
  dataType        String   // "products", "orders", "customers", "inventory"
  errors          Json     @default("[]")
  startTime       DateTime @default(now())
  endTime         DateTime?
  duration        Int?     // seconds
  metadata        Json     @default("{}")

  @@map("ecommerce_sync_logs")
}

model EcommerceDataMapping {
  id              String   @id @default(cuid())
  integrationId   String
  integration     EcommerceIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  dataType        String   // "product", "order", "customer", "category"
  sourceField     String
  targetField     String
  transformation  Json     @default("{}")
  required        Boolean  @default(false)
  defaultValue    String?
  validation      Json     @default("{}")
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([integrationId, dataType, sourceField, targetField])
  @@map("ecommerce_data_mappings")
}

model MarketingIntegration {
  id              String   @id @default(cuid())
  tenantId        String?
  tenant          Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name            String
  platform        String   // "mailchimp", "klaviyo", "sendgrid", "constant_contact", "campaign_monitor", "hubspot_marketing"
  version         String
  apiEndpoint     String
  credentials     Json     @default("{}")
  configuration   Json     @default("{}")
  syncSettings    Json     @default("{}")
  status          String   @default("inactive") // "active", "inactive", "error", "syncing", "suspended"
  lastSync        DateTime?
  syncInterval    Int      @default(3600) // seconds
  listsCount      Int      @default(0)
  subscribersCount Int     @default(0)
  campaignsCount  Int      @default(0)
  errorCount      Int      @default(0)
  lastError       String?
  features        Json     @default("[]") // ["email_marketing", "automation", "segmentation", "analytics", "templates"]
  webhooks        Json     @default("[]")
  rateLimits      Json     @default("{}")
  monitoring      Json     @default("{}")
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?

  syncLogs        MarketingSyncLog[]
  campaigns       MarketingCampaign[]

  @@map("marketing_integrations")
}

model MarketingSyncLog {
  id              String   @id @default(cuid())
  integrationId   String
  integration     MarketingIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  syncId          String   @unique
  operation       String   // "import_lists", "import_subscribers", "import_campaigns", "export_contacts", "sync_segments"
  status          String   @default("started") // "started", "completed", "failed", "cancelled"
  recordsProcessed Int     @default(0)
  recordsSucceeded Int     @default(0)
  recordsFailed   Int      @default(0)
  dataType        String   // "lists", "subscribers", "campaigns", "segments"
  errors          Json     @default("[]")
  startTime       DateTime @default(now())
  endTime         DateTime?
  duration        Int?     // seconds
  metadata        Json     @default("{}")

  @@map("marketing_sync_logs")
}

model MarketingCampaign {
  id              String   @id @default(cuid())
  integrationId   String
  integration     MarketingIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  externalId      String   // ID from external platform
  name            String
  type            String   // "email", "sms", "automation", "sequence"
  status          String   // "draft", "scheduled", "sent", "paused", "archived"
  subject         String?
  fromName        String?
  fromEmail       String?
  recipients      Int      @default(0)
  openRate        Float    @default(0.0)
  clickRate       Float    @default(0.0)
  bounceRate      Float    @default(0.0)
  unsubscribeRate Float    @default(0.0)
  scheduledAt     DateTime?
  sentAt          DateTime?
  analytics       Json     @default("{}")
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([integrationId, externalId])
  @@map("marketing_campaigns")
}

model PaymentIntegration {
  id              String   @id @default(cuid())
  tenantId        String?
  tenant          Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name            String
  provider        String   // "stripe", "paypal", "klarna", "square", "braintree", "adyen", "worldpay"
  version         String
  apiEndpoint     String
  credentials     Json     @default("{}")
  configuration   Json     @default("{}")
  webhookConfig   Json     @default("{}")
  status          String   @default("inactive") // "active", "inactive", "error", "testing", "suspended"
  isLive          Boolean  @default(false) // live vs sandbox mode
  supportedMethods String[] @default([]) // ["card", "bank_transfer", "digital_wallet", "crypto"]
  currencies      String[] @default(["USD", "EUR", "SEK"])
  transactionCount Int     @default(0)
  totalVolume     BigInt   @default(0) // in cents
  fees            Json     @default("{}")
  errorCount      Int      @default(0)
  lastError       String?
  features        Json     @default("[]") // ["payments", "refunds", "subscriptions", "marketplace", "fraud_detection"]
  webhooks        Json     @default("[]")
  rateLimits      Json     @default("{}")
  monitoring      Json     @default("{}")
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?

  transactions    PaymentTransaction[]

  @@map("payment_integrations")
}

model PaymentTransaction {
  id              String   @id @default(cuid())
  integrationId   String
  integration     PaymentIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  externalId      String   // Transaction ID from payment provider
  type            String   // "payment", "refund", "chargeback", "subscription"
  status          String   // "pending", "succeeded", "failed", "cancelled", "refunded"
  amount          BigInt   // in cents
  currency        String   @default("USD")
  description     String?
  customerEmail   String?
  paymentMethod   String?  // "card", "bank_transfer", "digital_wallet"
  processingFee   BigInt?  // in cents
  netAmount       BigInt?  // in cents
  metadata        Json     @default("{}")
  processedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([integrationId, externalId])
  @@map("payment_transactions")
}

model SocialIntegration {
  id              String   @id @default(cuid())
  tenantId        String?
  tenant          Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name            String
  platform        String   // "facebook", "instagram", "twitter", "linkedin", "tiktok", "youtube", "pinterest"
  version         String
  apiEndpoint     String
  credentials     Json     @default("{}")
  configuration   Json     @default("{}")
  status          String   @default("inactive") // "active", "inactive", "error", "rate_limited", "suspended"
  accountId       String?  // Platform-specific account ID
  accountName     String?
  accountHandle   String?
  followersCount  Int      @default(0)
  postsCount      Int      @default(0)
  engagementRate  Float    @default(0.0)
  lastSync        DateTime?
  syncInterval    Int      @default(7200) // seconds
  errorCount      Int      @default(0)
  lastError       String?
  features        Json     @default("[]") // ["posting", "analytics", "messaging", "advertising", "monitoring"]
  permissions     Json     @default("[]")
  rateLimits      Json     @default("{}")
  monitoring      Json     @default("{}")
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?

  posts           SocialPost[]
  analytics       SocialAnalytics[]

  @@map("social_integrations")
}

model SocialPost {
  id              String   @id @default(cuid())
  integrationId   String
  integration     SocialIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  externalId      String   // Post ID from social platform
  type            String   // "post", "story", "reel", "video", "image", "carousel"
  content         String?
  caption         String?
  mediaUrls       String[] @default([])
  hashtags        String[] @default([])
  mentions        String[] @default([])
  status          String   // "published", "draft", "scheduled", "failed", "deleted"
  visibility      String   @default("public") // "public", "private", "followers"
  likesCount      Int      @default(0)
  commentsCount   Int      @default(0)
  sharesCount     Int      @default(0)
  reachCount      Int      @default(0)
  impressionsCount Int     @default(0)
  engagementRate  Float    @default(0.0)
  scheduledAt     DateTime?
  publishedAt     DateTime?
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([integrationId, externalId])
  @@map("social_posts")
}

model SocialAnalytics {
  id              String   @id @default(cuid())
  integrationId   String
  integration     SocialIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  date            DateTime
  followers       Int      @default(0)
  following       Int      @default(0)
  posts           Int      @default(0)
  likes           Int      @default(0)
  comments        Int      @default(0)
  shares          Int      @default(0)
  reach           Int      @default(0)
  impressions     Int      @default(0)
  engagementRate  Float    @default(0.0)
  clickThroughRate Float   @default(0.0)
  demographics    Json     @default("{}")
  topPosts        Json     @default("[]")
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())

  @@unique([integrationId, date])
  @@map("social_analytics")
}

model AnalyticsIntegration {
  id              String   @id @default(cuid())
  tenantId        String?
  tenant          Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name            String
  platform        String   // "google_analytics", "mixpanel", "amplitude", "segment", "hotjar", "fullstory"
  version         String
  apiEndpoint     String
  credentials     Json     @default("{}")
  configuration   Json     @default("{}")
  trackingConfig  Json     @default("{}")
  status          String   @default("inactive") // "active", "inactive", "error", "syncing", "suspended"
  propertyId      String?  // Platform-specific property/project ID
  viewId          String?  // GA View ID, Mixpanel Project ID, etc.
  lastSync        DateTime?
  syncInterval    Int      @default(3600) // seconds
  eventsCount     BigInt   @default(0)
  usersCount      BigInt   @default(0)
  sessionsCount   BigInt   @default(0)
  errorCount      Int      @default(0)
  lastError       String?
  features        Json     @default("[]") // ["events", "users", "sessions", "funnels", "cohorts", "retention"]
  dimensions      Json     @default("[]")
  metrics         Json     @default("[]")
  rateLimits      Json     @default("{}")
  monitoring      Json     @default("{}")
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?

  reports         AnalyticsReport[]
  events          AnalyticsEventData[]

  @@map("analytics_integrations")
}

model AnalyticsReport {
  id              String   @id @default(cuid())
  integrationId   String
  integration     AnalyticsIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  name            String
  type            String   // "standard", "custom", "realtime", "funnel", "cohort", "retention"
  dimensions      String[] @default([])
  metrics         String[] @default([])
  filters         Json     @default("{}")
  dateRange       Json     @default("{}")
  data            Json     @default("{}")
  lastUpdated     DateTime @default(now())
  isScheduled     Boolean  @default(false)
  schedule        Json     @default("{}")
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("analytics_reports")
}

model AnalyticsEventData {
  id              String   @id @default(cuid())
  integrationId   String
  integration     AnalyticsIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  eventName       String
  eventCategory   String?
  eventAction     String?
  eventLabel      String?
  eventValue      Float?
  userId          String?
  sessionId       String?
  properties      Json     @default("{}")
  timestamp       DateTime @default(now())
  metadata        Json     @default("{}")

  @@index([integrationId, eventName, timestamp])
  @@map("analytics_event_data")
}

// Enhanced Marketplace & Developer Portal
model MarketplaceReview {
  id          String   @id @default(cuid())
  appId       String
  app         MarketplaceApp @relation(fields: [appId], references: [id], onDelete: Cascade)
  userId      String
  tenantId    String
  rating      Int      // 1-5 stars
  title       String
  comment     String
  verified    Boolean  @default(false) // Verified purchase/usage
  helpful     Int      @default(0) // Helpful votes
  reported    Int      @default(0) // Report count
  status      String   @default("published") // "published", "pending", "rejected", "hidden"
  response    String?  // Developer response
  respondedAt DateTime?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([appId, userId])
  @@map("marketplace_reviews")
}

model MarketplaceRevenue {
  id              String   @id @default(cuid())
  appId           String
  app             MarketplaceApp @relation(fields: [appId], references: [id], onDelete: Cascade)
  developerId     String
  period          String   // "2024-01", "2024-Q1", "2024"
  totalRevenue    BigInt   @default(0) // in cents
  platformFee     BigInt   @default(0) // in cents
  developerShare  BigInt   @default(0) // in cents
  installCount    Int      @default(0)
  activeInstalls  Int      @default(0)
  currency        String   @default("USD")
  payoutStatus    String   @default("pending") // "pending", "processing", "paid", "failed"
  payoutDate      DateTime?
  payoutReference String?
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([appId, period])
  @@map("marketplace_revenue")
}

model ConnectorTemplate {
  id            String   @id @default(cuid())
  name          String
  description   String
  category      String   // "ecommerce", "marketing", "payment", "social", "analytics", "crm", "erp"
  platform      String   // Target platform
  version       String   @default("1.0")
  codeTemplate  String   // Template code
  configSchema  Json     @default("{}")
  documentation String
  examples      Json     @default("[]")
  requirements  Json     @default("{}")
  isPublished   Boolean  @default(false)
  downloads     Int      @default(0)
  rating        Float    @default(0.0)
  createdBy     String
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("connector_templates")
}

model DeveloperPortal {
  id              String   @id @default(cuid())
  developerId     String   @unique
  companyName     String?
  website         String?
  description     String?
  logo            String?
  contactEmail    String
  isVerified      Boolean  @default(false)
  verificationLevel String @default("basic") // "basic", "standard", "premium", "enterprise"
  revenueShare    Float    @default(0.7) // 70% developer share
  payoutMethod    Json     @default("{}")
  bankDetails     Json     @default("{}")
  taxInfo         Json     @default("{}")
  settings        Json     @default("{}")
  apiQuota        Int      @default(10000)
  apiUsage        Int      @default(0)
  status          String   @default("active") // "active", "suspended", "banned"
  joinedAt        DateTime @default(now())
  lastActiveAt    DateTime @default(now())
  metadata        Json     @default("{}")
  updatedAt       DateTime @updatedAt

  apps            MarketplaceApp[]
  apiKeys         DeveloperAPIKey[]

  @@map("developer_portals")
}

model DeveloperAPIKey {
  id              String   @id @default(cuid())
  portalId        String
  portal          DeveloperPortal @relation(fields: [portalId], references: [id], onDelete: Cascade)
  keyId           String   @unique
  name            String
  description     String?
  key             String   @unique
  scopes          String[] @default([])
  environment     String   @default("sandbox") // "sandbox", "production"
  rateLimits      Json     @default("{}")
  quotaLimit      Int      @default(10000)
  quotaUsed       Int      @default(0)
  quotaResetAt    DateTime
  expiresAt       DateTime?
  lastUsedAt      DateTime?
  isActive        Boolean  @default(true)
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("developer_api_keys")
}

// SDK Generation & Developer Tools
model SDKGeneration {
  id              String   @id @default(cuid())
  language        String   // "javascript", "python", "php", "java", "csharp", "go", "ruby", "swift"
  version         String
  specVersion     String   // OpenAPI spec version
  packageName     String
  packageVersion  String
  downloadUrl     String
  documentation   String?
  examples        Json     @default("[]")
  isOfficial      Boolean  @default(true)
  downloads       Int      @default(0)
  lastGenerated   DateTime @default(now())
  generationConfig Json    @default("{}")
  status          String   @default("generated") // "generating", "generated", "failed", "deprecated"
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([language, version])
  @@map("sdk_generations")
}

model APIClient {
  id              String   @id @default(cuid())
  name            String
  description     String?
  clientId        String   @unique
  clientSecret    String
  redirectUris    String[] @default([])
  grantTypes      String[] @default(["authorization_code"])
  scopes          String[] @default([])
  isConfidential  Boolean  @default(true)
  isActive        Boolean  @default(true)
  rateLimits      Json     @default("{}")
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?

  tokens          APIToken[]

  @@map("api_clients")
}

model APIToken {
  id              String   @id @default(cuid())
  clientId        String
  client          APIClient @relation(fields: [clientId], references: [id], onDelete: Cascade)
  token           String   @unique
  tokenType       String   @default("Bearer")
  scopes          String[] @default([])
  expiresAt       DateTime
  isRevoked       Boolean  @default(false)
  revokedAt       DateTime?
  lastUsedAt      DateTime?
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())

  @@map("api_tokens")
}

// Advanced Integration Features
model IntegrationWorkflow {
  id              String   @id @default(cuid())
  tenantId        String?
  tenant          Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name            String
  description     String?
  trigger         Json     // Trigger configuration
  steps           Json     @default("[]") // Workflow steps
  conditions      Json     @default("[]") // Conditional logic
  mappings        Json     @default("[]") // Data mappings
  transformations Json     @default("[]") // Data transformations
  errorHandling   Json     @default("{}")
  retryPolicy     Json     @default("{}")
  isActive        Boolean  @default(true)
  category        String   @default("general") // "general", "data_sync", "automation", "notification"
  executionCount  Int      @default(0)
  successCount    Int      @default(0)
  failureCount    Int      @default(0)
  lastExecuted    DateTime?
  lastError       String?
  avgExecutionTime Float   @default(0.0) // milliseconds
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?

  executions      IntegrationWorkflowExecution[]

  @@map("integration_workflows")
}

model IntegrationWorkflowExecution {
  id              String   @id @default(cuid())
  workflowId      String
  workflow        IntegrationWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  executionId     String   @unique
  trigger         Json     // Trigger data
  status          String   @default("running") // "running", "completed", "failed", "cancelled", "timeout"
  currentStep     Int      @default(0)
  totalSteps      Int      @default(0)
  stepResults     Json     @default("[]")
  input           Json     @default("{}")
  output          Json?
  error           String?
  startTime       DateTime @default(now())
  endTime         DateTime?
  duration        Int?     // milliseconds
  metadata        Json     @default("{}")

  @@map("integration_workflow_executions")
}



model DataTransformation {
  id              String   @id @default(cuid())
  name            String
  description     String?
  type            String   // "mapping", "filtering", "aggregation", "format_conversion", "validation"
  inputSchema     Json     @default("{}")
  outputSchema    Json     @default("{}")
  transformationLogic Json @default("{}")
  isReusable      Boolean  @default(true)
  category        String   @default("general")
  usage           Int      @default(0)
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?

  @@map("data_transformations")
}

model IntegrationMonitoring {
  id              String   @id @default(cuid())
  integrationType String   // "ecommerce", "marketing", "payment", "social", "analytics", "crm", "erp"
  integrationId   String
  metricName      String   // "sync_success_rate", "api_response_time", "error_rate", "throughput"
  metricValue     Float
  metricUnit      String?
  timestamp       DateTime @default(now())
  dimensions      Json     @default("{}")
  metadata        Json     @default("{}")

  @@index([integrationType, integrationId, timestamp])
  @@index([metricName, timestamp])
  @@map("integration_monitoring")
}

// ================================================================
// CHUNK 8: COMMUNITY-DRIVEN DEVELOPMENT MODELS
// ================================================================

// ================================================================
// 1. COMMUNITY PLATFORM FOUNDATION
// ================================================================

// Community Forum System
model CommunityForum {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String
  description String?
  slug        String   @unique
  category    String   @default("general") // "general", "development", "support", "announcements"
  priority    Int      @default(0) // Higher number = higher priority
  isPrivate   Boolean  @default(false)
  isArchived  Boolean  @default(false)
  settings    Json     @default("{}")
  moderators  Json     @default("[]") // Array of user IDs
  tags        Json     @default("[]")
  rules       String?
  pinnedPosts Json     @default("[]") // Array of post IDs
  postCount   Int      @default(0)
  memberCount Int      @default(0)
  lastActivity DateTime @default(now())
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?

  threads     ForumThread[]
  
  @@index([tenantId, category])
  @@index([slug])
  @@map("community_forums")
}

model ForumThread {
  id          String   @id @default(cuid())
  forumId     String
  forum       CommunityForum @relation(fields: [forumId], references: [id], onDelete: Cascade)
  title       String
  slug        String   @unique
  content     String
  contentType String   @default("markdown") // "markdown", "html", "text"
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], name: "ThreadAuthor")
  category    String?
  tags        Json     @default("[]")
  status      String   @default("open") // "open", "closed", "locked", "archived"
  priority    String   @default("normal") // "low", "normal", "high", "urgent"
  isPinned    Boolean  @default(false)
  isLocked    Boolean  @default(false)
  isAnswered  Boolean  @default(false)
  acceptedAnswerId String?
  viewCount   Int      @default(0)
  likeCount   Int      @default(0)
  postCount   Int      @default(0)
  lastPostAt  DateTime @default(now())
  lastPostBy  String?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts       ForumPost[]
  
  @@index([forumId, status])
  @@index([authorId])
  @@index([slug])
  @@map("forum_threads")
}

model ForumPost {
  id            String   @id @default(cuid())
  threadId      String
  thread        ForumThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  parentId      String?  // For nested replies
  parent        ForumPost? @relation("PostReplies", fields: [parentId], references: [id])
  content       String
  contentType   String   @default("markdown")
  authorId      String
  author        User     @relation(fields: [authorId], references: [id], name: "PostAuthor")
  isAccepted    Boolean  @default(false) // For answer posts
  isEdited      Boolean  @default(false)
  editedAt      DateTime?
  editedBy      String?
  isDeleted     Boolean  @default(false)
  deletedAt     DateTime?
  deletedBy     String?
  deletionReason String?
  likeCount     Int      @default(0)
  dislikeCount  Int      @default(0)
  reportCount   Int      @default(0)
  attachments   Json     @default("[]")
  mentions      Json     @default("[]") // User mentions
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  replies       ForumPost[] @relation("PostReplies")
  reactions     PostReaction[]
  reports       PostReport[]
  
  @@index([threadId, createdAt])
  @@index([authorId])
  @@index([parentId])
  @@map("forum_posts")
}

model PostReaction {
  id       String   @id @default(cuid())
  postId   String
  post     ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId   String
  user     User     @relation(fields: [userId], references: [id], name: "UserPostReactions")
  type     String   // "like", "dislike", "helpful", "solved", "heart", "laugh"
  createdAt DateTime @default(now())

  @@unique([postId, userId, type])
  @@map("post_reactions")
}

model PostReport {
  id         String   @id @default(cuid())
  postId     String
  post       ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  reporterId String
  reporter   User     @relation(fields: [reporterId], references: [id], name: "UserPostReports")
  reason     String   // "spam", "harassment", "inappropriate", "off_topic", "other"
  description String?
  status     String   @default("pending") // "pending", "reviewed", "resolved", "dismissed"
  reviewedBy String?
  reviewedAt DateTime?
  resolution String?
  metadata   Json     @default("{}")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([postId, status])
  @@map("post_reports")
}

// Community Events System
model CommunityEvent {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  title           String
  description     String?
  slug            String   @unique
  type            String   // "meetup", "webinar", "hackathon", "workshop", "conference"
  category        String   @default("general")
  status          String   @default("draft") // "draft", "published", "ongoing", "completed", "cancelled"
  visibility      String   @default("public") // "public", "private", "member_only"
  format          String   @default("virtual") // "virtual", "in_person", "hybrid"
  location        String?
  venue           Json     @default("{}")
  startTime       DateTime
  endTime         DateTime
  timezone        String   @default("UTC")
  maxAttendees    Int?
  registrationRequired Boolean @default(true)
  registrationDeadline DateTime?
  price           Float?   @default(0.0)
  currency        String   @default("USD")
  tags            Json     @default("[]")
  agenda          Json     @default("[]")
  speakers        Json     @default("[]")
  sponsors        Json     @default("[]")
  resources       Json     @default("[]")
  attendeeCount   Int      @default(0)
  waitlistCount   Int      @default(0)
  imageUrl        String?
  bannerUrl       String?
  streamUrl       String?
  recordingUrl    String?
  feedbackSummary Json     @default("{}")
  organizerId     String
  organizer       User     @relation(fields: [organizerId], references: [id], name: "EventOrganizer")
  coOrganizers    Json     @default("[]") // Array of user IDs
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  registrations   EventRegistration[]
  feedback        EventFeedback[]
  
  @@index([tenantId, type, status])
  @@index([startTime, endTime])
  @@index([slug])
  @@map("community_events")
}

model EventRegistration {
  id            String   @id @default(cuid())
  eventId       String
  event         CommunityEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId        String
  user          User     @relation(fields: [userId], references: [id], name: "UserEventRegistrations")
  status        String   @default("registered") // "registered", "waitlist", "attended", "no_show", "cancelled"
  registeredAt  DateTime @default(now())
  cancelledAt   DateTime?
  attendedAt    DateTime?
  checkInMethod String?  // "manual", "qr_code", "email_link"
  paymentStatus String?  @default("not_required") // "not_required", "pending", "paid", "failed", "refunded"
  paymentId     String?
  specialRequests String?
  metadata      Json     @default("{}")

  @@unique([eventId, userId])
  @@index([userId, status])
  @@map("event_registrations")
}

model EventFeedback {
  id          String   @id @default(cuid())
  eventId     String
  event       CommunityEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], name: "UserEventFeedback")
  rating      Int      // 1-5 scale
  content     String?
  categories  Json     @default("{}") // {"venue": 5, "speakers": 4, "content": 5}
  wouldRecommend Boolean?
  wouldAttendAgain Boolean?
  suggestions String?
  isPublic    Boolean  @default(false)
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([eventId, userId])
  @@map("event_feedback")
}

// Knowledge Sharing Platform
model KnowledgeArticle {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  title           String
  slug            String   @unique
  content         String
  contentType     String   @default("markdown")
  excerpt         String?
  category        String   @default("general")
  subcategory     String?
  tags            Json     @default("[]")
  status          String   @default("draft") // "draft", "review", "published", "archived"
  difficulty      String   @default("beginner") // "beginner", "intermediate", "advanced", "expert"
  estimatedReadTime Int?   // minutes
  authorId        String
  author          User     @relation(fields: [authorId], references: [id], name: "ArticleAuthor")
  collaborators   Json     @default("[]") // Array of user IDs
  reviewers       Json     @default("[]") // Array of user IDs
  version         Int      @default(1)
  lastReviewedAt  DateTime?
  lastReviewedBy  String?
  publishedAt     DateTime?
  featuredImageUrl String?
  viewCount       Int      @default(0)
  likeCount       Int      @default(0)
  bookmarkCount   Int      @default(0)
  shareCount      Int      @default(0)
  helpfulCount    Int      @default(0)
  tableOfContents Json     @default("[]")
  relatedArticles Json     @default("[]") // Array of article IDs
  prerequisites   Json     @default("[]")
  attachments     Json     @default("[]")
  metadata        Json     @default("{}")
  seoTitle        String?
  seoDescription  String?
  seoKeywords     Json     @default("[]")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  comments        ArticleComment[]
  bookmarks       ArticleBookmark[]
  
  @@index([tenantId, category, status])
  @@index([authorId])
  @@index([slug])
  @@index([publishedAt])
  @@map("knowledge_articles")
}

model ArticleComment {
  id        String   @id @default(cuid())
  articleId String
  article   KnowledgeArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    ArticleComment? @relation("CommentReplies", fields: [parentId], references: [id])
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], name: "CommentAuthor")
  isEdited  Boolean  @default(false)
  editedAt  DateTime?
  likeCount Int      @default(0)
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  replies   ArticleComment[] @relation("CommentReplies")
  
  @@index([articleId, createdAt])
  @@index([authorId])
  @@map("article_comments")
}

model ArticleBookmark {
  id        String   @id @default(cuid())
  articleId String
  article   KnowledgeArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "UserArticleBookmarks")
  collection String? // Optional bookmark collection name
  notes     String?
  createdAt DateTime @default(now())

  @@unique([articleId, userId])
  @@index([userId, collection])
  @@map("article_bookmarks")
}

// Community Moderation System
model CommunityModeration {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  targetType  String   // "forum", "thread", "post", "article", "comment", "user"
  targetId    String
  action      String   // "warn", "mute", "ban", "delete", "edit", "pin", "feature"
  reason      String
  description String?
  duration    Int?     // Duration in minutes for temporary actions
  moderatorId String
  moderator   User     @relation(fields: [moderatorId], references: [id], name: "ModeratorActions")
  autoAction  Boolean  @default(false) // Whether this was an automated action
  severity    String   @default("low") // "low", "medium", "high", "critical"
  status      String   @default("active") // "active", "appealed", "reversed", "expired"
  appealedAt  DateTime?
  appealedBy  String?
  appealReason String?
  reviewedAt  DateTime?
  reviewedBy  String?
  resolution  String?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId, targetType, targetId])
  @@index([moderatorId])
  @@map("community_moderations")
}

// Community Reputation System
model CommunityReputation {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], name: "UserReputation")
  totalScore  Int      @default(0)
  level       Int      @default(1)
  levelName   String   @default("Newcomer")
  nextLevelScore Int   @default(100)
  
  // Category-specific scores
  forumScore      Int @default(0)
  articleScore    Int @default(0)
  contributionScore Int @default(0)
  helpfulScore    Int @default(0)
  mentorshipScore Int @default(0)
  
  // Achievement counts
  badgeCount      Int @default(0)
  achievementCount Int @default(0)
  
  // Activity metrics
  postsCount      Int @default(0)
  articlesCount   Int @default(0)
  helpfulVotes    Int @default(0)
  acceptedAnswers Int @default(0)
  menteeCount     Int @default(0)
  
  // Streak tracking
  currentStreak   Int @default(0)
  longestStreak   Int @default(0)
  lastActiveDate  DateTime @default(now())
  
  metadata        Json @default("{}")
  lastCalculated  DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  scoreHistory    ReputationScoreHistory[]
  
  @@map("community_reputation")
}

model ReputationScoreHistory {
  id           String   @id @default(cuid())
  reputationId String
  reputation   CommunityReputation @relation(fields: [reputationId], references: [id], onDelete: Cascade)
  action       String   // "post_created", "post_liked", "answer_accepted", "article_published", etc.
  scoreChange  Int      // Positive or negative
  targetType   String?  // "post", "article", "comment", etc.
  targetId     String?
  description  String?
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now())

  @@index([reputationId, createdAt])
  @@map("reputation_score_history")
}

model CommunityBadge {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  category    String   // "contribution", "expertise", "community", "special", "milestone"
  type        String   @default("standard") // "standard", "rare", "epic", "legendary"
  iconUrl     String?
  colorHex    String   @default("#6366f1")
  criteria    Json     @default("{}") // Criteria for earning the badge
  isActive    Boolean  @default(true)
  rarity      String   @default("common") // "common", "uncommon", "rare", "epic", "legendary"
  pointValue  Int      @default(10)
  sortOrder   Int      @default(0)
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userBadges  UserBadge[]
  
  @@map("community_badges")
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "UserBadges")
  badgeId   String
  badge     CommunityBadge @relation(fields: [badgeId], references: [id])
  earnedAt  DateTime @default(now())
  reason    String?  // Why the badge was earned
  metadata  Json     @default("{}")

  @@unique([userId, badgeId])
  @@index([userId])
  @@map("user_badges")
}

model CommunityAchievement {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  category    String   // "first_time", "consistency", "expertise", "social", "milestone"
  type        String   @default("standard") // "standard", "hidden", "progressive"
  iconUrl     String?
  criteria    Json     @default("{}")
  reward      Json     @default("{}") // Points, badges, etc.
  isActive    Boolean  @default(true)
  difficulty  String   @default("easy") // "easy", "medium", "hard", "extreme"
  pointValue  Int      @default(50)
  prerequisiteAchievements Json @default("[]") // Array of achievement IDs
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userAchievements UserAchievement[]
  
  @@map("community_achievements")
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], name: "UserAchievements")
  achievementId String
  achievement   CommunityAchievement @relation(fields: [achievementId], references: [id])
  earnedAt      DateTime @default(now())
  progress      Float?   @default(1.0) // For progressive achievements
  metadata      Json     @default("{}")

  @@unique([userId, achievementId])
  @@index([userId])
  @@map("user_achievements")
}

// ================================================================
// 2. PLUGIN/EXTENSION FRAMEWORK
// ================================================================

model Plugin {
  id              String   @id @default(cuid())
  name            String
  displayName     String
  description     String
  slug            String   @unique
  category        String   // "widget", "integration", "theme", "automation", "analytics"
  type            String   @default("community") // "official", "verified", "community"
  status          String   @default("draft") // "draft", "review", "approved", "rejected", "deprecated"
  visibility      String   @default("public") // "public", "private", "unlisted"
  developerId     String
  developer       User     @relation(fields: [developerId], references: [id], name: "DeveloperPlugins")
  maintainers     Json     @default("[]") // Array of user IDs
  repositoryUrl   String?
  documentationUrl String?
  websiteUrl      String?
  supportUrl      String?
  licenseType     String   @default("MIT")
  licenseUrl      String?
  tags            Json     @default("[]")
  keywords        Json     @default("[]")
  
  // Plugin Configuration
  manifest        Json     @default("{}")
  permissions     Json     @default("[]")
  dependencies    Json     @default("[]")
  apiVersion      String   @default("1.0")
  minPlatformVersion String @default("1.0.0")
  maxPlatformVersion String?
  
  // Statistics
  downloadCount   Int      @default(0)
  installCount    Int      @default(0)
  activeInstalls  Int      @default(0)
  rating          Float?   @default(0.0)
  reviewCount     Int      @default(0)
  
  // Pricing
  price           Float?   @default(0.0)
  currency        String   @default("USD")
  pricingModel    String   @default("free") // "free", "one_time", "subscription", "freemium"
  
  // Publishing Info
  publishedAt     DateTime?
  lastUpdated     DateTime @default(now())
  
  // Security & Quality
  securityScanStatus String @default("pending") // "pending", "passed", "failed", "exempted"
  securityScanDate   DateTime?
  qualityScore       Float? @default(0.0)
  
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  versions        PluginVersion[]
  installations   PluginInstallation[]
  reviews         PluginReview[]
  securityScans   PluginSecurityScan[]
  approvals       PluginApproval[]
  
  @@index([slug])
  @@index([category, status])
  @@index([developerId])
  @@map("plugins")
}

model PluginVersion {
  id              String   @id @default(cuid())
  pluginId        String
  plugin          Plugin   @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  version         String   // Semantic version
  versionCode     Int      // Incrementing integer
  releaseNotes    String?
  changelog       String?
  status          String   @default("draft") // "draft", "beta", "stable", "deprecated"
  
  // Package Information
  packageUrl      String?
  packageSize     BigInt?  // Size in bytes
  packageHash     String?  // SHA-256 hash
  
  // Dependencies & Compatibility
  dependencies    Json     @default("[]")
  compatibility   Json     @default("{}")
  breakingChanges Json     @default("[]")
  
  // Security & Quality
  securityScanStatus String @default("pending")
  securityScanDate   DateTime?
  qualityMetrics     Json   @default("{}")
  
  // Statistics
  downloadCount   Int      @default(0)
  installCount    Int      @default(0)
  
  publishedAt     DateTime?
  deprecatedAt    DateTime?
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  installations   PluginInstallation[]
  
  @@unique([pluginId, version])
  @@index([pluginId, status])
  @@map("plugin_versions")
}

model PluginInstallation {
  id              String   @id @default(cuid())
  pluginId        String
  plugin          Plugin   @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  versionId       String
  version         PluginVersion @relation(fields: [versionId], references: [id])
  userId          String
  user            User     @relation(fields: [userId], references: [id], name: "UserPluginInstallations")
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  status          String   @default("installed") // "installed", "active", "inactive", "updating", "uninstalled"
  installMethod   String   @default("marketplace") // "marketplace", "sideload", "developer"
  configuration   Json     @default("{}")
  customization   Json     @default("{}")
  
  // Usage Statistics
  lastUsed        DateTime?
  usageCount      Int      @default(0)
  errorCount      Int      @default(0)
  lastError       String?
  lastErrorAt     DateTime?
  
  // Installation Tracking
  installedAt     DateTime @default(now())
  activatedAt     DateTime?
  deactivatedAt   DateTime?
  uninstalledAt   DateTime?
  
  metadata        Json     @default("{}")
  updatedAt       DateTime @updatedAt

  @@unique([pluginId, userId, tenantId])
  @@index([userId, status])
  @@index([tenantId, status])
  @@map("plugin_installations")
}

model PluginReview {
  id          String   @id @default(cuid())
  pluginId    String
  plugin      Plugin   @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], name: "UserPluginReviews")
  rating      Int      // 1-5 scale
  title       String?
  content     String?
  pros        Json     @default("[]")
  cons        Json     @default("[]")
  
  // Review Metadata
  version     String?  // Version reviewed
  verified    Boolean  @default(false) // Verified purchase/installation
  helpful     Int      @default(0) // Helpful votes
  reported    Int      @default(0) // Report count
  
  // Moderation
  status      String   @default("published") // "published", "pending", "hidden", "deleted"
  moderatedBy String?
  moderatedAt DateTime?
  
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([pluginId, userId])
  @@index([pluginId, rating])
  @@map("plugin_reviews")
}

model PluginSecurityScan {
  id              String   @id @default(cuid())
  pluginId        String
  plugin          Plugin   @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  version         String?
  scanType        String   // "static", "dynamic", "dependency", "manual"
  status          String   @default("pending") // "pending", "running", "completed", "failed"
  result          String?  // "passed", "failed", "warning"
  
  // Scan Results
  vulnerabilities Json     @default("[]")
  warnings        Json     @default("[]")
  score           Float?   @default(0.0) // Security score 0-100
  
  // Scan Configuration
  scannerVersion  String?
  scanConfig      Json     @default("{}")
  
  // Timing
  startedAt       DateTime @default(now())
  completedAt     DateTime?
  duration        Int?     // Scan duration in seconds
  
  // Report
  reportUrl       String?
  reportData      Json     @default("{}")
  
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())

  @@index([pluginId, result])
  @@map("plugin_security_scans")
}

model PluginApproval {
  id          String   @id @default(cuid())
  pluginId    String
  plugin      Plugin   @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  version     String?
  status      String   @default("pending") // "pending", "approved", "rejected", "needs_changes"
  reviewerId  String?
  reviewer    User?    @relation(fields: [reviewerId], references: [id], name: "PluginReviewer")
  
  // Review Details
  reviewNotes String?
  checklist   Json     @default("{}")
  feedback    Json     @default("[]")
  
  // Requirements
  requirements Json    @default("[]")
  changes     Json     @default("[]")
  
  // Timing
  submittedAt DateTime @default(now())
  reviewedAt  DateTime?
  
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([pluginId, status])
  @@map("plugin_approvals")
}

// ================================================================
// 3. COMMUNITY MARKETPLACE ECOSYSTEM
// ================================================================

model MarketplaceWidget {
  id              String   @id @default(cuid())
  name            String
  displayName     String
  description     String
  slug            String   @unique
  category        String   // "chart", "form", "layout", "navigation", "data", "utility"
  subcategory     String?
  creatorId       String
  creator         User     @relation(fields: [creatorId], references: [id], name: "CreatedMarketplaceWidgets")
  
  // Widget Configuration
  widgetType      String   // "react_component", "web_component", "iframe", "script"
  sourceCode      String?
  compiledCode    String?
  stylesCode      String?
  configSchema    Json     @default("{}")
  previewImage    String?
  screenshots     Json     @default("[]")
  demoUrl         String?
  
  // Marketplace Information
  status          String   @default("draft") // "draft", "review", "published", "deprecated"
  visibility      String   @default("public") // "public", "private", "unlisted"
  tags            Json     @default("[]")
  compatibility   Json     @default("{}")
  dependencies    Json     @default("[]")
  
  // Pricing & Licensing
  price           Float?   @default(0.0)
  currency        String   @default("USD")
  licenseType     String   @default("MIT")
  isOpenSource    Boolean  @default(true)
  
  // Statistics
  downloadCount   Int      @default(0)
  usageCount      Int      @default(0)
  rating          Float?   @default(0.0)
  reviewCount     Int      @default(0)
  favoriteCount   Int      @default(0)
  
  // SEO & Discovery
  seoTitle        String?
  seoDescription  String?
  seoKeywords     Json     @default("[]")
  
  publishedAt     DateTime?
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  reviews         MarketplaceWidgetReview[]
  downloads       WidgetDownload[]
  favorites       WidgetFavorite[]
  
  @@index([slug])
  @@index([category, status])
  @@index([creatorId])
  @@map("marketplace_widgets")
}

model MarketplaceTemplate {
  id              String   @id @default(cuid())
  name            String
  displayName     String
  description     String
  slug            String   @unique
  category        String   // "dashboard", "form", "landing", "admin", "ecommerce", "blog"
  subcategory     String?
  creatorId       String
  creator         User     @relation(fields: [creatorId], references: [id], name: "CreatedMarketplaceTemplates")
  
  // Template Configuration
  templateData    Json     @default("{}")
  previewImage    String?
  screenshots     Json     @default("[]")
  demoUrl         String?
  
  // Template Structure
  pages           Json     @default("[]")
  components      Json     @default("[]")
  styles          Json     @default("{}")
  configuration   Json     @default("{}")
  
  // Marketplace Information
  status          String   @default("draft") // "draft", "review", "published", "deprecated"
  visibility      String   @default("public") // "public", "private", "unlisted"
  tags            Json     @default("[]")
  industries      Json     @default("[]")
  difficulty      String   @default("beginner") // "beginner", "intermediate", "advanced"
  
  // Pricing & Licensing
  price           Float?   @default(0.0)
  currency        String   @default("USD")
  licenseType     String   @default("MIT")
  isOpenSource    Boolean  @default(true)
  
  // Statistics
  downloadCount   Int      @default(0)
  usageCount      Int      @default(0)
  rating          Float?   @default(0.0)
  reviewCount     Int      @default(0)
  favoriteCount   Int      @default(0)
  
  publishedAt     DateTime?
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  reviews         MarketplaceTemplateReview[]
  downloads       TemplateDownload[]
  favorites       TemplateFavorite[]
  
  @@index([slug])
  @@index([category, status])
  @@index([creatorId])
  @@map("marketplace_templates")
}

model MarketplaceWidgetReview {
  id          String   @id @default(cuid())
  widgetId    String
  widget      MarketplaceWidget @relation(fields: [widgetId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], name: "UserMarketplaceWidgetReviews")
  rating      Int      // 1-5 scale
  title       String?
  content     String?
  pros        Json     @default("[]")
  cons        Json     @default("[]")
  
  // Quality Ratings
  easeOfUse   Int?     // 1-5 scale
  documentation Int?   // 1-5 scale
  performance Int?     // 1-5 scale
  design      Int?     // 1-5 scale
  support     Int?     // 1-5 scale
  
  verified    Boolean  @default(false)
  helpful     Int      @default(0)
  status      String   @default("published")
  
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([widgetId, userId])
  @@index([widgetId, rating])
  @@map("marketplace_widget_reviews")
}

model MarketplaceTemplateReview {
  id          String   @id @default(cuid())
  templateId  String
  template    MarketplaceTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], name: "UserMarketplaceTemplateReviews")
  rating      Int      // 1-5 scale
  title       String?
  content     String?
  pros        Json     @default("[]")
  cons        Json     @default("[]")
  
  // Quality Ratings
  design      Int?     // 1-5 scale
  usability   Int?     // 1-5 scale
  documentation Int?   // 1-5 scale
  customization Int?   // 1-5 scale
  
  verified    Boolean  @default(false)
  helpful     Int      @default(0)
  status      String   @default("published")
  
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([templateId, userId])
  @@index([templateId, rating])
  @@map("marketplace_template_reviews")
}

model WidgetDownload {
  id        String   @id @default(cuid())
  widgetId  String
  widget    MarketplaceWidget @relation(fields: [widgetId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "UserWidgetDownloads")
  version   String?
  method    String   @default("marketplace") // "marketplace", "api", "cli"
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())

  @@index([widgetId])
  @@index([userId])
  @@map("widget_downloads")
}

model TemplateDownload {
  id         String   @id @default(cuid())
  templateId String
  template   MarketplaceTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], name: "UserTemplateDownloads")
  method     String   @default("marketplace") // "marketplace", "api", "cli"
  metadata   Json     @default("{}")
  createdAt  DateTime @default(now())

  @@index([templateId])
  @@index([userId])
  @@map("template_downloads")
}

model WidgetFavorite {
  id        String   @id @default(cuid())
  widgetId  String
  widget    MarketplaceWidget @relation(fields: [widgetId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "UserWidgetFavorites")
  collection String? // Optional collection name
  createdAt DateTime @default(now())

  @@unique([widgetId, userId])
  @@index([userId])
  @@map("widget_favorites")
}

model TemplateFavorite {
  id         String   @id @default(cuid())
  templateId String
  template   MarketplaceTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], name: "UserTemplateFavorites")
  collection String? // Optional collection name
  createdAt  DateTime @default(now())

  @@unique([templateId, userId])
  @@index([userId])
  @@map("template_favorites")
}

// Revenue Sharing System
model RevenueShare {
  id            String   @id @default(cuid())
  creatorId     String
  creator       User     @relation(fields: [creatorId], references: [id], name: "CreatorRevenueShares")
  itemType      String   // "widget", "template", "plugin", "theme"
  itemId        String
  transactionId String
  
  // Revenue Details
  grossAmount   Float
  platformFee   Float
  creatorShare  Float
  currency      String   @default("USD")
  
  // Payment Information
  paymentStatus String   @default("pending") // "pending", "processing", "paid", "failed"
  paymentMethod String?
  paymentId     String?
  paidAt        DateTime?
  
  // Transaction Details
  period        String   // "2024-01", monthly periods
  description   String?
  
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([creatorId, period])
  @@index([itemType, itemId])
  @@map("revenue_shares")
}

model MarketplaceTransaction {
  id            String   @id @default(cuid())
  buyerId       String
  buyer         User     @relation(fields: [buyerId], references: [id], name: "BuyerTransactions")
  sellerId      String
  seller        User     @relation(fields: [sellerId], references: [id], name: "SellerTransactions")
  itemType      String   // "widget", "template", "plugin", "theme"
  itemId        String
  
  // Transaction Details
  amount        Float
  currency      String   @default("USD")
  type          String   @default("purchase") // "purchase", "subscription", "renewal"
  status        String   @default("pending") // "pending", "completed", "failed", "refunded"
  
  // Payment Information
  paymentMethod String?
  paymentId     String?
  gatewayTxnId  String?
  
  // License & Usage
  licenseType   String   @default("standard")
  usageRights   Json     @default("{}")
  
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([buyerId])
  @@index([sellerId])
  @@index([itemType, itemId])
  @@map("marketplace_transactions")
}

// ================================================================
// 4. DEVELOPER COLLABORATION TOOLS
// ================================================================

model DeveloperProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], name: "UserDeveloperProfile")
  
  // Professional Information
  title           String?
  company         String?
  location        String?
  website         String?
  bio             String?
  skills          Json     @default("[]")
  expertise       Json     @default("[]") // Areas of expertise
  experience      String?  // "junior", "mid", "senior", "expert"
  
  // Social Links
  githubUsername  String?
  linkedinUrl     String?
  twitterHandle   String?
  portfolioUrl    String?
  
  // Developer Stats
  contributionCount Int    @default(0)
  repositoryCount   Int    @default(0)
  followerCount     Int    @default(0)
  followingCount    Int    @default(0)
  
  // Preferences
  isHireable      Boolean  @default(false)
  isAvailableForMentoring Boolean @default(false)
  timeZone        String?
  workingHours    Json     @default("{}")
  communication   Json     @default("[]") // Preferred communication methods
  
  // Profile Settings
  isPublic        Boolean  @default(true)
  showEmail       Boolean  @default(false)
  showStats       Boolean  @default(true)
  showContributions Boolean @default(true)
  
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  codeShares      CodeShare[]
  projects        CollaborativeProject[] @relation("ProjectOwner")
  collaborations  ProjectCollaborator[]
  mentorships     DeveloperMentorship[] @relation("Mentor")
  menteeships     DeveloperMentorship[] @relation("Mentee")
  follows         DeveloperFollow[] @relation("Follower")
  followers       DeveloperFollow[] @relation("Following")
  
  @@map("developer_profiles")
}

model CodeShare {
  id          String   @id @default(cuid())
  title       String
  description String?
  slug        String   @unique
  creatorId   String
  creator     DeveloperProfile @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  
  // Code Information
  language    String   // "javascript", "typescript", "python", "css", etc.
  framework   String?  // "react", "vue", "angular", etc.
  code        String
  files       Json     @default("[]") // Multiple files with syntax highlighting
  
  // Organization
  category    String   @default("snippet") // "snippet", "component", "function", "tutorial"
  tags        Json     @default("[]")
  difficulty  String   @default("beginner") // "beginner", "intermediate", "advanced"
  
  // Sharing & Collaboration
  visibility  String   @default("public") // "public", "unlisted", "private"
  isEditable  Boolean  @default(false) // Allow others to edit
  forkable    Boolean  @default(true)
  
  // Interaction
  viewCount   Int      @default(0)
  likeCount   Int      @default(0)
  forkCount   Int      @default(0)
  commentCount Int     @default(0)
  
  // Version Control
  version     String   @default("1.0.0")
  parentId    String?  // For forks
  parent      CodeShare? @relation("CodeForks", fields: [parentId], references: [id])
  
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  forks       CodeShare[] @relation("CodeForks")
  comments    CodeComment[]
  likes       CodeLike[]
  
  @@index([creatorId])
  @@index([category, language])
  @@index([slug])
  @@map("code_shares")
}

model CodeComment {
  id          String   @id @default(cuid())
  codeShareId String
  codeShare   CodeShare @relation(fields: [codeShareId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], name: "UserCodeComments")
  parentId    String?
  parent      CodeComment? @relation("CommentReplies", fields: [parentId], references: [id])
  
  content     String
  lineNumber  Int?     // For line-specific comments
  isResolved  Boolean  @default(false)
  likeCount   Int      @default(0)
  
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  replies     CodeComment[] @relation("CommentReplies")
  
  @@index([codeShareId])
  @@index([userId])
  @@map("code_comments")
}

model CodeLike {
  id          String   @id @default(cuid())
  codeShareId String
  codeShare   CodeShare @relation(fields: [codeShareId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], name: "UserCodeLikes")
  createdAt   DateTime @default(now())

  @@unique([codeShareId, userId])
  @@map("code_likes")
}

model CollaborativeProject {
  id              String   @id @default(cuid())
  name            String
  description     String?
  slug            String   @unique
  ownerId         String
  owner           DeveloperProfile @relation("ProjectOwner", fields: [ownerId], references: [id])
  
  // Project Information
  type            String   @default("open_source") // "open_source", "private", "commercial"
  category        String   // "web_app", "mobile_app", "library", "tool", "game"
  status          String   @default("active") // "planning", "active", "on_hold", "completed", "archived"
  
  // Repository Information
  repositoryUrl   String?
  repositoryType  String?  // "github", "gitlab", "bitbucket", "internal"
  mainBranch      String   @default("main")
  
  // Project Settings
  visibility      String   @default("public") // "public", "private", "team_only"
  isRecruitingContributors Boolean @default(false)
  contributionGuidelines String?
  codeOfConduct   String?
  
  // Project Metadata
  tags            Json     @default("[]")
  technologies    Json     @default("[]")
  license         String?
  
  // Statistics
  contributorCount Int     @default(1)
  commitCount     Int      @default(0)
  issueCount      Int      @default(0)
  starCount       Int      @default(0)
  forkCount       Int      @default(0)
  
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  collaborators   ProjectCollaborator[]
  codeReviews     CodeReview[]
  
  @@index([ownerId])
  @@index([slug])
  @@index([category, status])
  @@map("collaborative_projects")
}

model ProjectCollaborator {
  id          String   @id @default(cuid())
  projectId   String
  project     CollaborativeProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  developerId String
  developer   DeveloperProfile @relation(fields: [developerId], references: [id])
  
  role        String   @default("contributor") // "owner", "maintainer", "contributor", "viewer"
  permissions Json     @default("[]")
  status      String   @default("active") // "invited", "active", "inactive", "removed"
  
  joinedAt    DateTime @default(now())
  invitedAt   DateTime @default(now())
  invitedBy   String?
  
  // Activity Tracking
  lastActiveAt DateTime @default(now())
  contributionCount Int @default(0)
  
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([projectId, developerId])
  @@index([developerId])
  @@map("project_collaborators")
}

model CodeReview {
  id              String   @id @default(cuid())
  projectId       String
  project         CollaborativeProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  title           String
  description     String?
  
  // Review Information
  pullRequestUrl  String?
  branchName      String?
  commitHash      String?
  diff            String?
  
  authorId        String
  author          User     @relation(fields: [authorId], references: [id], name: "AuthorCodeReviews")
  reviewerId      String?
  reviewer        User?    @relation(fields: [reviewerId], references: [id], name: "ReviewerCodeReviews")
  
  // Review Status
  status          String   @default("pending") // "pending", "in_review", "approved", "changes_requested", "rejected"
  priority        String   @default("normal") // "low", "normal", "high", "critical"
  
  // Review Details
  fileChanges     Json     @default("[]")
  addedLines      Int      @default(0)
  deletedLines    Int      @default(0)
  reviewComments  Json     @default("[]")
  
  // Timing
  submittedAt     DateTime @default(now())
  reviewStartedAt DateTime?
  reviewedAt      DateTime?
  mergedAt        DateTime?
  
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([projectId])
  @@index([authorId])
  @@index([reviewerId])
  @@map("code_reviews")
}

model DeveloperMentorship {
  id              String   @id @default(cuid())
  mentorId        String
  mentor          DeveloperProfile @relation("Mentor", fields: [mentorId], references: [id])
  menteeId        String
  mentee          DeveloperProfile @relation("Mentee", fields: [menteeId], references: [id])
  
  // Mentorship Details
  status          String   @default("pending") // "pending", "active", "completed", "cancelled"
  focus           Json     @default("[]") // Areas of focus
  goals           String?
  duration        Int?     // Duration in weeks
  
  // Communication
  preferredMethod String?  // "video", "chat", "email", "forum"
  frequency       String?  // "weekly", "biweekly", "monthly"
  nextSession     DateTime?
  
  // Progress Tracking
  sessionsCompleted Int    @default(0)
  milestonesAchieved Json  @default("[]")
  feedback          String?
  rating            Int?   // 1-5 scale
  
  // Timing
  startedAt       DateTime?
  completedAt     DateTime?
  lastSessionAt   DateTime?
  
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([mentorId, menteeId])
  @@index([mentorId])
  @@index([menteeId])
  @@map("developer_mentorships")
}

model DeveloperFollow {
  id          String   @id @default(cuid())
  followerId  String
  follower    DeveloperProfile @relation("Follower", fields: [followerId], references: [id])
  followingId String
  following   DeveloperProfile @relation("Following", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@map("developer_follows")
}

// ================================================================
// 5. OPEN SOURCE CONTRIBUTION SYSTEM
// ================================================================

model OpenSourceProject {
  id              String   @id @default(cuid())
  name            String
  description     String
  slug            String   @unique
  maintainerId    String
  maintainer      User     @relation(fields: [maintainerId], references: [id], name: "MaintainedProjects")
  
  // Repository Information
  repositoryUrl   String
  repositoryType  String   @default("github") // "github", "gitlab", "bitbucket"
  defaultBranch   String   @default("main")
  
  // Project Configuration
  category        String   // "library", "framework", "tool", "application", "documentation"
  language        String   // Primary language
  languages       Json     @default("[]") // All languages used
  topics          Json     @default("[]")
  tags            Json     @default("[]")
  
  // Project Status
  status          String   @default("active") // "active", "maintenance", "deprecated", "archived"
  visibility      String   @default("public") // "public", "private"
  license         String?
  
  // Contribution Guidelines
  contributionGuide String?
  codeOfConduct   String?
  issueTemplate   String?
  prTemplate      String?
  contributorAgreement String?
  
  // Project Statistics
  starCount       Int      @default(0)
  forkCount       Int      @default(0)
  contributorCount Int     @default(1)
  commitCount     Int      @default(0)
  issueCount      Int      @default(0)
  pullRequestCount Int     @default(0)
  
  // Quality Metrics
  codeQualityScore Float?  @default(0.0)
  testCoverage    Float?
  documentationScore Float? @default(0.0)
  maintainabilityIndex Float? @default(0.0)
  
  // Activity Tracking
  lastCommitAt    DateTime?
  lastReleaseAt   DateTime?
  lastActivityAt  DateTime @default(now())
  
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  contributions   Contribution[]
  releases        ProjectRelease[]
  qualityMetrics  CodeQualityMetric[]
  
  @@index([slug])
  @@index([maintainerId])
  @@index([category, status])
  @@map("open_source_projects")
}

model Contribution {
  id              String   @id @default(cuid())
  projectId       String
  project         OpenSourceProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  contributorId   String
  contributor     User     @relation(fields: [contributorId], references: [id], name: "UserContributions")
  
  // Contribution Details
  type            String   // "code", "documentation", "bug_report", "feature_request", "review", "testing"
  title           String
  description     String?
  
  // GitHub/GitLab Integration
  pullRequestUrl  String?
  issueUrl        String?
  commitHash      String?
  commitMessage   String?
  
  // Contribution Metadata
  filesChanged    Int?     @default(0)
  linesAdded      Int?     @default(0)
  linesDeleted    Int?     @default(0)
  complexity      String?  @default("simple") // "simple", "moderate", "complex"
  
  // Status & Review
  status          String   @default("submitted") // "submitted", "reviewed", "merged", "rejected", "reverted"
  reviewedBy      String?
  reviewedAt      DateTime?
  mergedAt        DateTime?
  
  // Impact & Recognition
  impact          String   @default("minor") // "minor", "moderate", "major", "critical"
  pointsAwarded   Int      @default(0)
  isFirstContribution Boolean @default(false)
  isFeatured      Boolean  @default(false)
  
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([projectId])
  @@index([contributorId])
  @@index([type, status])
  @@map("contributions")
}

model ProjectRelease {
  id              String   @id @default(cuid())
  projectId       String
  project         OpenSourceProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Release Information
  version         String
  name            String?
  description     String?
  releaseNotes    String?
  changelog       String?
  
  // Release Metadata
  tagName         String?
  commitHash      String?
  isPrerelease    Boolean  @default(false)
  isDraft         Boolean  @default(false)
  
  // Assets
  downloadUrl     String?
  downloadCount   Int      @default(0)
  assets          Json     @default("[]")
  
  // Contributors
  contributors    Json     @default("[]") // Array of contributor IDs for this release
  contributionCount Int    @default(0)
  
  // Timing
  publishedAt     DateTime @default(now())
  
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())

  @@unique([projectId, version])
  @@index([projectId, publishedAt])
  @@map("project_releases")
}

model CodeQualityMetric {
  id              String   @id @default(cuid())
  projectId       String
  project         OpenSourceProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Quality Metrics
  linesOfCode     Int?     @default(0)
  technicalDebt   Float?   @default(0.0) // Hours of technical debt
  testCoverage    Float?   @default(0.0) // Percentage
  codeSmells      Int?     @default(0)
  bugs            Int?     @default(0)
  vulnerabilities Int?     @default(0)
  duplicatedLines Int?     @default(0)
  
  // Complexity Metrics
  cyclomaticComplexity Float? @default(0.0)
  cognitiveComplexity  Float? @default(0.0)
  maintainabilityIndex Float? @default(0.0)
  
  // Quality Scores
  overallScore    Float?   @default(0.0) // 0-100
  reliabilityScore Float?  @default(0.0) // A-E scale converted to 0-100
  securityScore   Float?   @default(0.0) // A-E scale converted to 0-100
  maintainabilityScore Float? @default(0.0) // A-E scale converted to 0-100
  
  // Analysis Tool Information
  toolName        String?  // "sonarqube", "codeclimate", "eslint", etc.
  toolVersion     String?
  analysisDate    DateTime @default(now())
  
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())

  @@index([projectId, analysisDate])
  @@map("code_quality_metrics")
}

model ContributionTracking {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], name: "UserContributionTracking")
  
  // Period Tracking
  period          String   // "2024-01", monthly periods
  year            Int
  month           Int
  
  // Contribution Counts
  totalContributions Int   @default(0)
  codeContributions  Int   @default(0)
  documentationContributions Int @default(0)
  issueContributions Int   @default(0)
  reviewContributions Int  @default(0)
  
  // Impact Metrics
  linesAdded      Int      @default(0)
  linesDeleted    Int      @default(0)
  filesChanged    Int      @default(0)
  projectsContributed Int  @default(0)
  
  // Recognition & Points
  pointsEarned    Int      @default(0)
  badgesEarned    Int      @default(0)
  achievementsUnlocked Int @default(0)
  
  // Streak Tracking
  currentStreak   Int      @default(0)
  longestStreak   Int      @default(0)
  activeDays      Int      @default(0)
  
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, period])
  @@index([userId, year, month])
  @@map("contribution_tracking")
}

model CommunityRecognition {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], name: "UserCommunityRecognition")
  
  // Recognition Details
  type        String   // "contributor_of_month", "top_reviewer", "mentor_of_year", "community_champion"
  title       String
  description String?
  category    String   // "contribution", "mentorship", "community", "innovation"
  
  // Recognition Metadata
  period      String?  // "2024-01" for monthly awards
  criteria    Json     @default("{}")
  stats       Json     @default("{}")
  
  // Award Information
  badgeUrl    String?
  certificateUrl String?
  isPublic    Boolean  @default(true)
  isEmailSent Boolean  @default(false)
  
  // Recognition Value
  pointValue  Int      @default(0)
  level       String   @default("bronze") // "bronze", "silver", "gold", "platinum"
  
  awardedBy   String?
  awardedAt   DateTime @default(now())
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())

  @@index([userId, type])
  @@index([period, type])
  @@map("community_recognition")
}

model OpenSourceLicense {
  id              String   @id @default(cuid())
  name            String   @unique
  shortName       String   @unique // "MIT", "GPL-3.0", "Apache-2.0"
  description     String
  fullText        String
  
  // License Properties
  isOsiApproved   Boolean  @default(false)
  isDeprecated    Boolean  @default(false)
  category        String   // "permissive", "copyleft", "public_domain", "proprietary"
  
  // Usage Information
  commonUse       String?
  compatibility   Json     @default("[]") // Compatible license short names
  restrictions    Json     @default("[]")
  permissions     Json     @default("[]")
  conditions      Json     @default("[]")
  
  // Reference Information
  url             String?
  spdxId          String?  @unique
  
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("open_source_licenses")
}

// ================================================================
// 6. COMMUNITY ENGAGEMENT FEATURES
// ================================================================

model CommunityChallenge {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  title           String
  description     String
  slug            String   @unique
  
  // Challenge Details
  type            String   // "coding", "design", "documentation", "innovation", "hackathon"
  category        String   @default("general")
  difficulty      String   @default("beginner") // "beginner", "intermediate", "advanced", "expert"
  
  // Timing
  startTime       DateTime
  endTime         DateTime
  submissionDeadline DateTime
  judingDeadline  DateTime?
  
  // Participation
  maxParticipants Int?
  participantCount Int     @default(0)
  teamSize        Int?     @default(1) // 1 for individual, >1 for team challenges
  
  // Requirements & Rules
  requirements    Json     @default("[]")
  rules           String?
  judingCriteria  Json     @default("[]")
  resources       Json     @default("[]")
  
  // Prizes & Recognition
  prizes          Json     @default("[]")
  pointReward     Int      @default(0)
  badgeReward     String?
  
  // Challenge Status
  status          String   @default("draft") // "draft", "open", "judging", "completed", "cancelled"
  
  // Organization
  organizerId     String
  organizer       User     @relation(fields: [organizerId], references: [id], name: "OrganizedChallenges")
  judges          Json     @default("[]") // Array of user IDs
  sponsors        Json     @default("[]")
  
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  submissions     ChallengeSubmission[]
  
  @@index([tenantId, type, status])
  @@index([slug])
  @@map("community_challenges")
}

model ChallengeSubmission {
  id              String   @id @default(cuid())
  challengeId     String
  challenge       CommunityChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  submitterId     String
  submitter       User     @relation(fields: [submitterId], references: [id], name: "UserChallengeSubmissions")
  
  // Submission Details
  title           String
  description     String
  
  // Submission Content
  repositoryUrl   String?
  demoUrl         String?
  documentation   String?
  sourceCode      String?
  files           Json     @default("[]")
  screenshots     Json     @default("[]")
  
  // Team Information (for team challenges)
  teamMembers     Json     @default("[]") // Array of user IDs
  teamName        String?
  
  // Submission Status
  status          String   @default("submitted") // "draft", "submitted", "under_review", "judged"
  isPublic        Boolean  @default(true)
  
  // Judging & Results
  judgeScores     Json     @default("{}")
  averageScore    Float?   @default(0.0)
  ranking         Int?
  feedback        String?
  
  // Recognition
  isWinner        Boolean  @default(false)
  prizeWon        String?
  pointsAwarded   Int      @default(0)
  
  submittedAt     DateTime @default(now())
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([challengeId])
  @@index([submitterId])
  @@map("challenge_submissions")
}

model DeveloperShowcase {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creatorId       String
  creator         User     @relation(fields: [creatorId], references: [id], name: "CreatedShowcases")
  
  // Showcase Details
  title           String
  description     String
  slug            String   @unique
  category        String   // "web_app", "mobile_app", "library", "tool", "game", "ai_project"
  
  // Project Information
  repositoryUrl   String?
  liveUrl         String?
  downloadUrl     String?
  documentationUrl String?
  
  // Media
  featuredImage   String?
  screenshots     Json     @default("[]")
  videoUrl        String?
  
  // Technical Details
  technologies    Json     @default("[]")
  frameworks      Json     @default("[]")
  languages       Json     @default("[]")
  tags            Json     @default("[]")
  
  // Project Stats
  viewCount       Int      @default(0)
  likeCount       Int      @default(0)
  shareCount      Int      @default(0)
  commentCount    Int      @default(0)
  
  // Status & Visibility
  status          String   @default("published") // "draft", "published", "featured", "archived"
  isFeatured      Boolean  @default(false)
  isOpenSource    Boolean  @default(false)
  
  // SEO
  seoTitle        String?
  seoDescription  String?
  
  publishedAt     DateTime?
  featuredAt      DateTime?
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  comments        ShowcaseComment[]
  likes           ShowcaseLike[]
  
  @@index([tenantId, category, status])
  @@index([creatorId])
  @@index([slug])
  @@map("developer_showcases")
}

model ShowcaseComment {
  id          String   @id @default(cuid())
  showcaseId  String
  showcase    DeveloperShowcase @relation(fields: [showcaseId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], name: "UserShowcaseComments")
  parentId    String?
  parent      ShowcaseComment? @relation("CommentReplies", fields: [parentId], references: [id])
  
  content     String
  likeCount   Int      @default(0)
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  replies     ShowcaseComment[] @relation("CommentReplies")
  
  @@index([showcaseId])
  @@index([userId])
  @@map("showcase_comments")
}

model ShowcaseLike {
  id          String   @id @default(cuid())
  showcaseId  String
  showcase    DeveloperShowcase @relation(fields: [showcaseId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], name: "UserShowcaseLikes")
  createdAt   DateTime @default(now())

  @@unique([showcaseId, userId])
  @@map("showcase_likes")
}

model CommunityNewsletter {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  title           String
  slug            String   @unique
  
  // Newsletter Content
  subject         String
  content         String
  contentType     String   @default("html") // "html", "markdown", "text"
  excerpt         String?
  
  // Newsletter Configuration
  type            String   @default("community") // "community", "developer", "product", "announcement"
  audience        String   @default("all") // "all", "developers", "contributors", "subscribers"
  
  // Scheduling
  status          String   @default("draft") // "draft", "scheduled", "sent", "cancelled"
  scheduledAt     DateTime?
  sentAt          DateTime?
  
  // Statistics
  recipientCount  Int      @default(0)
  openCount       Int      @default(0)
  clickCount      Int      @default(0)
  unsubscribeCount Int     @default(0)
  
  // Content Sections
  highlightedContributions Json @default("[]")
  featuredProjects Json    @default("[]")
  upcomingEvents  Json     @default("[]")
  communitySpotlight Json  @default("[]")
  
  createdBy       String
  author          User     @relation(fields: [createdBy], references: [id], name: "AuthoredNewsletters")
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([tenantId, type, status])
  @@index([slug])
  @@map("community_newsletters")
}

model CommunityJob {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  title           String
  company         String
  location        String?
  type            String   // "full_time", "part_time", "contract", "freelance", "internship"
  category        String   // "frontend", "backend", "fullstack", "mobile", "devops", "design", "data"
  
  // Job Details
  description     String
  requirements    Json     @default("[]")
  responsibilities Json    @default("[]")
  benefits        Json     @default("[]")
  
  // Compensation
  salaryMin       Int?
  salaryMax       Int?
  currency        String   @default("USD")
  salaryType      String   @default("annual") // "hourly", "annual", "project"
  isRemote        Boolean  @default(false)
  
  // Company Information
  companySize     String?  // "startup", "small", "medium", "large", "enterprise"
  companyUrl      String?
  companyLogo     String?
  
  // Skills & Experience
  requiredSkills  Json     @default("[]")
  preferredSkills Json     @default("[]")
  experienceLevel String   @default("mid") // "entry", "mid", "senior", "lead", "executive"
  
  // Application
  applicationUrl  String?
  applicationEmail String?
  applicationInstructions String?
  
  // Job Status
  status          String   @default("published") // "draft", "published", "filled", "expired"
  expiresAt       DateTime?
  
  // Statistics
  viewCount       Int      @default(0)
  applicationCount Int     @default(0)
  
  postedBy        String
  poster          User     @relation(fields: [postedBy], references: [id], name: "PostedJobs")
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([tenantId, category, status])
  @@index([type, isRemote])
  @@map("community_jobs")
}

model CommunityFeedback {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId          String
  user            User     @relation(fields: [userId], references: [id], name: "UserCommunityFeedback")
  
  // Feedback Details
  type            String   // "feature_request", "bug_report", "improvement", "general", "praise"
  category        String   // "platform", "community", "marketplace", "documentation", "api"
  title           String
  description     String
  
  // Feedback Priority & Impact
  priority        String   @default("medium") // "low", "medium", "high", "critical"
  impact          String   @default("minor") // "minor", "moderate", "major", "critical"
  
  // Status & Resolution
  status          String   @default("submitted") // "submitted", "acknowledged", "in_review", "planned", "in_progress", "resolved", "closed"
  resolution      String?
  resolvedBy      String?
  resolvedAt      DateTime?
  
  // Community Engagement
  voteCount       Int      @default(0)
  commentCount    Int      @default(0)
  
  // Additional Information
  environment     String?  // "production", "staging", "development"
  browserInfo     Json     @default("{}")
  attachments     Json     @default("[]")
  
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  votes           FeedbackVote[]
  comments        FeedbackComment[]
  
  @@index([tenantId, type, status])
  @@index([userId])
  @@map("community_feedback")
}

// ================================================================
// CHUNK 10: COMPREHENSIVE GAMIFICATION SYSTEM
// ================================================================

// ================================================================
// 1. POINT SYSTEM & CURRENCIES
// ================================================================

model GamificationProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Multi-Currency Point System
  experiencePoints    Int      @default(0)    // XP - Main progression currency
  gamificationCoins   Int      @default(0)    // Coins - Earned from activities
  premiumGems         Int      @default(0)    // Gems - Premium/rare activities
  reputationPoints    Int      @default(0)    // Reputation - Community-based points
  
  // Level & Progression System
  currentLevel        Int      @default(1)
  nextLevelXP         Int      @default(100)
  totalXPEarned       BigInt   @default(0)
  levelUpCount        Int      @default(0)
  
  // Activity Tracking
  dailyStreak         Int      @default(0)
  longestStreak       Int      @default(0)
  lastActivityDate    DateTime @default(now())
  totalActivities     Int      @default(0)
  
  // Engagement Metrics
  platformEngagement  Json     @default("{}")  // Daily/weekly/monthly activity
  socialEngagement    Json     @default("{}")  // Community participation
  learningProgress    Json     @default("{}")  // Skill development
  
  // Tier System
  currentTier         String   @default("bronze") // "bronze", "silver", "gold", "platinum", "diamond"
  tierProgress        Float    @default(0.0)
  tierBenefits        Json     @default("[]")
  
  // Statistics
  lifetimeEarnings    Json     @default("{}")  // Total earnings per currency
  lifetimeSpending    Json     @default("{}")  // Total spending per currency
  conversionHistory   Json     @default("[]")  // Currency conversion history
  
  // Profile Settings
  isPublic            Boolean  @default(true)
  displayPreferences  Json     @default("{}")
  privacySettings     Json     @default("{}")
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  pointTransactions   PointTransaction[]
  earnedAchievements  UserGamificationAchievement[]
  rewardRedemptions   RewardRedemption[]
  leaderboardEntries  LeaderboardEntry[]
  challengeProgress   DailyChallengeProgress[]
  engagementLogs      EngagementLog[]
  competitionParticipants CompetitionParticipant[]

  @@index([tenantId, currentLevel])
  @@index([userId])
  @@map("gamification_profiles")
}

model PointTransaction {
  id                  String   @id @default(cuid())
  profileId           String
  profile             GamificationProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  // Transaction Details
  type                String   // "earned", "spent", "converted", "bonus", "penalty", "refund"
  currency            String   // "xp", "coins", "gems", "reputation"
  amount              Int
  previousBalance     Int
  newBalance          Int
  
  // Transaction Context
  source              String   // "login", "task_completion", "achievement", "daily_challenge", "social_share", etc.
  sourceId            String?  // ID of the related entity (task, achievement, etc.)
  description         String?
  category            String?  // "activity", "bonus", "purchase", "reward"
  
  // Multipliers & Bonuses
  baseAmount          Int      // Amount before multipliers
  multiplier          Float    @default(1.0)
  bonusAmount         Int      @default(0)
  streakBonus         Int      @default(0)
  tierBonus           Int      @default(0)
  
  // Transaction Metadata
  isReversible        Boolean  @default(false)
  expiresAt           DateTime?
  relatedTransactionId String?  // For reversals/refunds
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())

  @@index([profileId, type])
  @@index([currency, createdAt])
  @@map("point_transactions")
}

model GamificationRule {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Rule Definition
  name                String
  description         String?
  type                String   // "point_award", "achievement_trigger", "level_bonus", "streak_bonus"
  category            String   // "activity", "social", "achievement", "milestone"
  
  // Trigger Conditions
  triggerEvent        String   // "user_login", "task_complete", "social_share", "achievement_unlock"
  triggerConditions   Json     @default("{}")  // Conditions that must be met
  triggerLimit        Int?     // Max times rule can trigger per user per period
  
  // Award Configuration
  pointRewards        Json     @default("{}")  // {"xp": 10, "coins": 5, "gems": 1}
  achievementIds      Json     @default("[]")  // Achievement IDs to unlock
  bonusMultiplier     Float    @default(1.0)
  
  // Rule Constraints
  isActive            Boolean  @default(true)
  validFrom           DateTime @default(now())
  validUntil          DateTime?
  applicableRoles     Json     @default("[]")  // User roles this rule applies to
  minimumLevel        Int      @default(1)
  maximumLevel        Int?
  
  // Usage Tracking
  triggerCount        Int      @default(0)
  lastTriggered       DateTime?
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([tenantId, type, isActive])
  @@index([triggerEvent])
  @@map("gamification_rules")
}

// ================================================================
// 2. ACHIEVEMENT & BADGE SYSTEM
// ================================================================

model GamificationAchievement {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Achievement Definition
  name                String
  description         String
  category            String   // "milestone", "skill", "social", "creative", "completion", "special"
  type                String   // "progress", "binary", "tiered", "collection", "social"
  
  // Achievement Rarity & Value
  rarity              String   @default("common") // "common", "uncommon", "rare", "epic", "legendary", "mythic"
  difficulty          String   @default("easy")   // "easy", "medium", "hard", "expert", "master"
  pointValue          Int      @default(10)
  
  // Visual Design
  iconUrl             String?
  badgeUrl            String?
  animationUrl        String?
  color               String   @default("#3B82F6")
  gradientColors      Json     @default("[]")
  
  // Unlock Criteria
  criteria            Json     @default("{}")  // Complex criteria definition
  prerequisites       Json     @default("[]")  // Achievement IDs that must be unlocked first
  
  // Progress Tracking
  progressType        String   @default("count") // "count", "percentage", "threshold", "collection"
  maxProgress         Int?     // For progress-based achievements
  
  // Rewards
  xpReward            Int      @default(0)
  coinReward          Int      @default(0)
  gemReward           Int      @default(0)
  reputationReward    Int      @default(0)
  specialRewards      Json     @default("[]")  // Special perks, badges, titles
  
  // Achievement Properties
  isSecret            Boolean  @default(false)  // Hidden until unlocked
  isRepeatable        Boolean  @default(false)  // Can be earned multiple times
  isTimeLimited       Boolean  @default(false)  // Limited time achievement
  isRetroactive       Boolean  @default(true)   // Apply to past activities
  
  // Timing
  availableFrom       DateTime @default(now())
  availableUntil      DateTime?
  seasonId            String?  // For seasonal achievements
  
  // Statistics
  unlockedCount       Int      @default(0)
  avgTimeToUnlock     Int?     // Average time in hours
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  userAchievements    UserGamificationAchievement[]

  @@index([tenantId, category, rarity])
  @@index([type, difficulty])
  @@map("gamification_achievements")
}

model UserGamificationAchievement {
  id                  String   @id @default(cuid())
  profileId           String
  profile             GamificationProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  achievementId       String
  achievement         GamificationAchievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  // Progress Tracking
  currentProgress     Int      @default(0)
  maxProgress         Int?
  progressData        Json     @default("{}")  // Detailed progress information
  
  // Unlock Information
  isUnlocked          Boolean  @default(false)
  unlockedAt          DateTime?
  timeToUnlock        Int?     // Time taken in hours
  
  // Display & Showcase
  isFavorite          Boolean  @default(false)
  isPublic            Boolean  @default(true)
  displayOrder        Int      @default(0)
  
  // Achievement Context
  unlockTrigger       String?  // What triggered the unlock
  unlockContext       Json     @default("{}")
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([profileId, achievementId])
  @@index([profileId, isUnlocked])
  @@map("user_gamification_achievements")
}

// ================================================================
// 3. LEADERBOARDS & COMPETITIONS
// ================================================================

model Leaderboard {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Leaderboard Definition
  name                String
  description         String?
  category            String   // "global", "weekly", "monthly", "seasonal", "challenge", "skill"
  type                String   // "points", "level", "achievements", "activities", "social"
  
  // Scoring & Ranking
  metric              String   // "total_xp", "weekly_coins", "achievement_count", "social_score"
  scoringFormula      Json     @default("{}")  // Complex scoring rules
  rankingMethod       String   @default("points") // "points", "time", "percentage", "combo"
  
  // Time Period
  period              String   // "all_time", "yearly", "monthly", "weekly", "daily", "custom"
  startDate           DateTime?
  endDate             DateTime?
  resetFrequency      String?  // "never", "daily", "weekly", "monthly", "yearly"
  lastReset           DateTime?
  
  // Competition Features
  isCompetition       Boolean  @default(false)
  competitionType     String?  // "tournament", "race", "challenge", "seasonal"
  maxParticipants     Int?
  entryRequirements   Json     @default("{}")
  
  // Rewards & Prizes
  rewardStructure     Json     @default("{}")  // Rewards for different positions
  prizes              Json     @default("[]")  // Special prizes for winners
  
  // Visibility & Access
  isPublic            Boolean  @default(true)
  accessLevel         String   @default("all") // "all", "premium", "tier_based", "invite_only"
  displaySettings     Json     @default("{}")
  
  // Status
  status              String   @default("active") // "draft", "active", "paused", "completed", "archived"
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  entries             LeaderboardEntry[]

  @@index([tenantId, category, status])
  @@index([type, period])
  @@map("leaderboards")
}

model LeaderboardEntry {
  id                  String   @id @default(cuid())
  leaderboardId       String
  leaderboard         Leaderboard @relation(fields: [leaderboardId], references: [id], onDelete: Cascade)
  profileId           String
  profile             GamificationProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  // Ranking Information
  currentRank         Int
  previousRank        Int?
  rankChange          Int      @default(0)  // Positive = up, negative = down
  
  // Score Information
  score               BigInt   @default(0)
  previousScore       BigInt   @default(0)
  scoreChange         BigInt   @default(0)
  
  // Performance Metrics
  streak              Int      @default(0)
  bestStreak          Int      @default(0)
  participationDays   Int      @default(0)
  
  // Achievement Information
  achievementsUnlocked Int     @default(0)
  totalActivities     Int      @default(0)
  
  // Time-based Metrics
  timeInLeaderboard   Int      @default(0)  // Days in this leaderboard
  firstEntryDate      DateTime @default(now())
  
  // Rewards Earned
  rewardsEarned       Json     @default("[]")
  totalRewardValue    Int      @default(0)
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([leaderboardId, profileId])
  @@index([leaderboardId, currentRank])
  @@index([score])
  @@map("leaderboard_entries")
}

model Competition {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Competition Definition
  name                String
  description         String
  slug                String   @unique
  type                String   // "tournament", "race", "challenge", "seasonal", "team_battle"
  category            String   // "individual", "team", "guild", "department"
  
  // Competition Rules
  rules               Json     @default("{}")
  objectives          Json     @default("[]")
  scoringSystem       Json     @default("{}")
  
  // Timing
  registrationStart   DateTime
  registrationEnd     DateTime
  competitionStart    DateTime
  competitionEnd      DateTime
  
  // Participation
  maxParticipants     Int?
  minParticipants     Int      @default(1)
  currentParticipants Int      @default(0)
  teamSize            Int      @default(1)  // 1 for individual
  
  // Requirements
  entryFee            Int      @default(0)  // In coins
  levelRequirement    Int      @default(1)
  tierRequirement     String?
  prerequisites       Json     @default("[]")
  
  // Prizes & Rewards
  prizePool           Json     @default("{}")
  rewardStructure     Json     @default("{}")  // 1st, 2nd, 3rd place rewards
  participationRewards Json    @default("{}")
  
  // Competition Status
  status              String   @default("upcoming") // "upcoming", "registration", "active", "completed", "cancelled"
  
  // Visibility
  isPublic            Boolean  @default(true)
  isFeatured          Boolean  @default(false)
  bannerImage         String?
  
  // Statistics
  totalViews          Int      @default(0)
  totalShares         Int      @default(0)
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  participants        CompetitionParticipant[]
  submissions         CompetitionSubmission[]

  @@index([tenantId, type, status])
  @@index([slug])
  @@map("competitions")
}

model CompetitionParticipant {
  id                  String   @id @default(cuid())
  competitionId       String
  competition         Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  profileId           String
  profile             GamificationProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  // Participation Details
  teamName            String?
  teamMembers         Json     @default("[]")  // For team competitions
  registrationDate    DateTime @default(now())
  
  // Performance Tracking
  currentScore        BigInt   @default(0)
  currentRank         Int?
  progress            Json     @default("{}")
  
  // Status
  status              String   @default("registered") // "registered", "active", "completed", "disqualified"
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([competitionId, profileId])
  @@index([competitionId, currentRank])
  @@map("competition_participants")
}

model CompetitionSubmission {
  id                  String   @id @default(cuid())
  competitionId       String
  competition         Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  participantId       String
  
  // Submission Details
  title               String
  description         String?
  submissionData      Json     @default("{}")
  attachments         Json     @default("[]")
  
  // Scoring
  judgeScores         Json     @default("{}")
  publicVotes         Int      @default(0)
  finalScore          Float?
  ranking             Int?
  
  // Status
  status              String   @default("submitted") // "draft", "submitted", "judged", "winner"
  
  submittedAt         DateTime @default(now())
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([competitionId, ranking])
  @@map("competition_submissions")
}

// ================================================================
// 4. REWARD SYSTEM & MARKETPLACE
// ================================================================

model RewardItem {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Item Definition
  name                String
  description         String
  category            String   // "premium_features", "cosmetics", "perks", "real_world", "discounts"
  type                String   // "consumable", "permanent", "subscription", "physical", "digital"
  
  // Pricing
  cost                Json     @default("{}")  // {"coins": 100, "gems": 10}
  originalValue       Json?    @default("{}")  // Original value for discount calculation
  discountPercentage  Int      @default(0)
  
  // Availability
  isActive            Boolean  @default(true)
  stock               Int?     // null = unlimited
  maxPerUser          Int?     // Purchase limit per user
  
  // Requirements
  levelRequirement    Int      @default(1)
  tierRequirement     String?
  achievements        Json     @default("[]")  // Required achievement IDs
  
  // Visual Design
  imageUrl            String?
  iconUrl             String?
  rarity              String   @default("common") // "common", "rare", "epic", "legendary"
  
  // Time Constraints
  availableFrom       DateTime @default(now())
  availableUntil      DateTime?
  isLimitedTime       Boolean  @default(false)
  
  // Item Properties
  benefits            Json     @default("[]")   // What the item provides
  duration            Int?     // Duration in hours for temporary items
  stackable           Boolean  @default(false)
  tradeable           Boolean  @default(false)
  
  // Usage Tracking
  totalPurchases      Int      @default(0)
  totalRevenue        Json     @default("{}")   // Revenue per currency
  popularity          Float    @default(0.0)
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  redemptions         RewardRedemption[]

  @@index([tenantId, category, isActive])
  @@index([type, rarity])
  @@map("reward_items")
}

model RewardRedemption {
  id                  String   @id @default(cuid())
  profileId           String
  profile             GamificationProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  rewardItemId        String
  rewardItem          RewardItem @relation(fields: [rewardItemId], references: [id], onDelete: Cascade)
  
  // Redemption Details
  quantity            Int      @default(1)
  totalCost           Json     @default("{}")  // Actual cost paid
  
  // Status & Fulfillment
  status              String   @default("pending") // "pending", "fulfilled", "expired", "refunded"
  fulfilledAt         DateTime?
  expiresAt           DateTime?
  
  // Usage Tracking
  isUsed              Boolean  @default(false)
  usedAt              DateTime?
  remainingUses       Int?     // For consumable items
  
  // Delivery Information
  deliveryMethod      String?  // "instant", "email", "manual", "api"
  deliveryData        Json     @default("{}")
  trackingInfo        String?
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([profileId, status])
  @@index([rewardItemId])
  @@map("reward_redemptions")
}

model VirtualCurrency {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Currency Definition
  name                String   // "Experience Points", "Gold Coins", "Premium Gems"
  shortName           String   // "XP", "COINS", "GEMS"
  symbol              String   // "XP", "🪙", "💎"
  description         String?
  
  // Currency Properties
  type                String   // "primary", "secondary", "premium", "seasonal"
  isTransferable      Boolean  @default(false)
  isConvertible       Boolean  @default(false)
  isPurchasable       Boolean  @default(false)
  
  // Visual Design
  iconUrl             String?
  color               String   @default("#3B82F6")
  
  // Economic Settings
  conversionRates     Json     @default("{}")  // Conversion to other currencies
  inflationRate       Float    @default(0.0)
  decayRate           Float    @default(0.0)   // For expiring currencies
  
  // Limits & Constraints
  maxBalance          BigInt?   // Maximum a user can hold
  dailyEarnLimit      Int?      // Maximum earned per day
  transferLimit       Int?      // Maximum transferred per day
  
  // Status
  isActive            Boolean  @default(true)
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([tenantId, shortName])
  @@index([tenantId, type])
  @@map("virtual_currencies")
}

// ================================================================
// 5. ENGAGEMENT MECHANICS
// ================================================================

model DailyChallenge {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Challenge Definition
  name                String
  description         String
  category            String   // "login", "activity", "social", "learning", "creative", "community"
  type                String   // "simple", "progressive", "social", "competitive"
  
  // Challenge Requirements
  objective           String   // Clear description of what to do
  targetValue         Int      // Target number (e.g., 5 tasks, 3 posts)
  criteria            Json     @default("{}")  // Detailed criteria
  
  // Rewards
  baseReward          Json     @default("{}")  // Base reward for completion
  bonusReward         Json     @default("{}")  // Bonus for streak/excellence
  streakMultiplier    Float    @default(1.0)
  
  // Timing
  availableDate       DateTime
  expiresAt           DateTime
  duration            Int      @default(24)    // Hours available
  
  // Difficulty & Rarity
  difficulty          String   @default("easy") // "easy", "medium", "hard"
  rarity              String   @default("common") // "common", "rare", "epic"
  
  // Challenge Properties
  isRepeating         Boolean  @default(false)
  repeatInterval      String?  // "daily", "weekly", "monthly"
  maxCompletions      Int      @default(1)
  
  // Statistics
  totalParticipants   Int      @default(0)
  completionRate      Float    @default(0.0)
  averageTimeToComplete Int?   // In minutes
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  userProgress        DailyChallengeProgress[]

  @@index([tenantId, availableDate, category])
  @@index([type, difficulty])
  @@map("daily_challenges")
}

model DailyChallengeProgress {
  id                  String   @id @default(cuid())
  challengeId         String
  challenge           DailyChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  profileId           String
  profile             GamificationProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  // Progress Tracking
  currentProgress     Int      @default(0)
  targetProgress      Int
  progressPercentage  Float    @default(0.0)
  
  // Completion Status
  isCompleted         Boolean  @default(false)
  completedAt         DateTime?
  timeToComplete      Int?     // Minutes taken to complete
  
  // Rewards Earned
  rewardsEarned       Json     @default("{}")
  bonusEarned         Json     @default("{}")
  
  // Progress Details
  activities          Json     @default("[]")  // Detailed activity log
  milestones          Json     @default("[]")  // Progress milestones hit
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([challengeId, profileId])
  @@index([profileId, isCompleted])
  @@map("daily_challenge_progress")
}

model EngagementLog {
  id                  String   @id @default(cuid())
  profileId           String
  profile             GamificationProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  // Activity Information
  activityType        String   // "login", "task_complete", "social_share", "achievement_unlock"
  activityCategory    String   // "platform", "social", "learning", "community"
  activityValue       Int      @default(1)  // Quantified value of activity
  
  // Context Information
  sourceType          String?  // "web", "mobile", "api"
  sourceId            String?  // Related entity ID
  sessionId           String?
  
  // Engagement Metrics
  engagementScore     Float    @default(1.0)
  qualityScore        Float    @default(1.0)
  socialImpact        Float    @default(0.0)
  
  // Time Tracking
  duration            Int?     // Activity duration in seconds
  timeOfDay           Int      // Hour of day (0-23)
  dayOfWeek           Int      // Day of week (1-7)
  
  // Gamification Impact
  pointsEarned        Json     @default("{}")
  achievementsUnlocked Json    @default("[]")
  streakImpact        Boolean  @default(false)
  
  // Additional Context
  userAgent           String?
  ipAddress           String?
  location            Json?    @default("{}")
  deviceInfo          Json?    @default("{}")
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())

  @@index([profileId, activityType])
  @@index([createdAt, activityCategory])
  @@map("engagement_logs")
}

model SocialEngagement {
  id                  String   @id @default(cuid())
  profileId           String
  tenantId            String
  
  // Social Action
  actionType          String   // "share", "like", "comment", "mention", "follow", "invite"
  targetType          String   // "showcase", "achievement", "post", "user", "challenge"
  targetId            String
  
  // Platform Information
  platform            String?  // "internal", "twitter", "linkedin", "facebook"
  externalUrl         String?
  
  // Engagement Value
  viralScore          Float    @default(1.0)
  reachEstimate       Int      @default(1)
  engagementRate      Float    @default(0.0)
  
  // Rewards
  pointsAwarded       Json     @default("{}")
  bonusMultiplier     Float    @default(1.0)
  
  // Verification
  isVerified          Boolean  @default(false)
  verificationMethod  String?
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())

  @@index([profileId, actionType])
  @@index([platform, createdAt])
  @@map("social_engagements")
}

model ReferralProgram {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade, name: "TenantReferralPrograms")
  
  // Program Definition
  name                String
  description         String
  type                String   // "standard", "tiered", "milestone", "competitive"
  
  // Reward Structure
  referrerRewards     Json     @default("{}")  // Rewards for referrer
  refereeRewards      Json     @default("{}")  // Rewards for referred user
  milestoneRewards    Json     @default("[]")  // Bonus for multiple referrals
  
  // Program Rules
  maxReferrals        Int?     // Max referrals per user
  validityPeriod      Int?     // Days the referral is valid
  minimumActivity     Json     @default("{}")  // Required activity from referee
  
  // Status
  isActive            Boolean  @default(true)
  startDate           DateTime @default(now())
  endDate             DateTime?
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  referrals           UserReferral[]
  referralTracking    ReferralTracking[]

  @@index([tenantId, isActive])
  @@map("referral_programs")
}

model UserReferral {
  id                  String   @id @default(cuid())
  programId           String
  program             ReferralProgram @relation(fields: [programId], references: [id], onDelete: Cascade)
  referrerProfileId   String
  refereeProfileId    String?
  
  // Referral Information
  referralCode        String   @unique
  refereeEmail        String?
  status              String   @default("pending") // "pending", "registered", "qualified", "rewarded"
  
  // Tracking
  clickCount          Int      @default(0)
  lastClicked         DateTime?
  registeredAt        DateTime?
  qualifiedAt         DateTime?
  
  // Rewards
  referrerReward      Json     @default("{}")
  refereeReward       Json     @default("{}")
  isRewarded          Boolean  @default(false)
  rewardedAt          DateTime?
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([referrerProfileId])
  @@index([referralCode])
  @@map("user_referrals")
}

// ================================================================
// 6. ENTERPRISE GAMIFICATION FEATURES
// ================================================================

model TeamGamification {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Team Definition
  name                String
  description         String?
  department          String?
  division            String?
  
  // Team Configuration
  teamType            String   // "department", "project", "division", "custom"
  maxMembers          Int?
  
  // Gamification Settings
  pointSharing        Boolean  @default(false)  // Share points among team members
  teamGoals           Json     @default("[]")   // Team-specific goals
  competitionMode     Boolean  @default(false)  // Compete with other teams
  
  // Team Performance
  totalTeamPoints     BigInt   @default(0)
  averageLevel        Float    @default(1.0)
  teamRanking         Int?
  
  // Team Achievements
  teamAchievements    Json     @default("[]")
  collaborationScore  Float    @default(0.0)
  
  // Status
  isActive            Boolean  @default(true)
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  members             TeamMembership[]
  activities          TeamActivity[]

  @@index([tenantId, teamType])
  @@map("team_gamification")
}

model TeamMembership {
  id                  String   @id @default(cuid())
  teamId              String
  team                TeamGamification @relation(fields: [teamId], references: [id], onDelete: Cascade)
  profileId           String
  
  // Membership Details
  role                String   @default("member") // "leader", "member", "contributor"
  joinedAt            DateTime @default(now())
  
  // Individual Team Performance
  teamContribution    BigInt   @default(0)
  collaborationScore  Float    @default(0.0)
  leadershipScore     Float    @default(0.0)
  
  // Status
  isActive            Boolean  @default(true)
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([teamId, profileId])
  @@index([profileId])
  @@map("team_memberships")
}

model TeamActivity {
  id                  String   @id @default(cuid())
  teamId              String
  team                TeamGamification @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  // Activity Details
  activityType        String   // "collaboration", "goal_completion", "team_challenge", "knowledge_share"
  description         String
  participantIds      Json     @default("[]")  // Team member IDs involved
  
  // Impact & Rewards
  teamPointsEarned    Int      @default(0)
  individualRewards   Json     @default("{}")  // Per-participant rewards
  
  // Context
  sourceType          String?
  sourceId            String?
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())

  @@index([teamId, activityType])
  @@map("team_activities")
}

model GamificationAnalytics {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Analytics Period
  period              String   // "daily", "weekly", "monthly", "quarterly", "yearly"
  startDate           DateTime
  endDate             DateTime
  
  // Engagement Metrics
  totalActiveUsers    Int      @default(0)
  averageSessionTime  Float    @default(0.0)
  dailyActiveUsers    Int      @default(0)
  weeklyActiveUsers   Int      @default(0)
  monthlyActiveUsers  Int      @default(0)
  
  // Gamification Metrics
  pointsDistributed   Json     @default("{}")  // Per currency type
  achievementsUnlocked Int     @default(0)
  challengesCompleted Int      @default(0)
  leaderboardActivity Int      @default(0)
  
  // Economic Metrics
  rewardsPurchased    Int      @default(0)
  currencyCirculation Json     @default("{}")
  economyHealth       Float    @default(1.0)
  
  // Behavioral Metrics
  userRetention       Float    @default(0.0)
  engagementGrowth    Float    @default(0.0)
  socialActivity      Int      @default(0)
  
  // Performance Indicators
  conversionRate      Float    @default(0.0)
  churnRate           Float    @default(0.0)
  lifetimeValue       Float    @default(0.0)
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())

  @@index([tenantId, period, startDate])
  @@map("gamification_analytics")
}

// ================================================================
// ENHANCED TENANT RELATIONS FOR GAMIFICATION
// ================================================================

// Add gamification relations to existing Tenant model at the end of its relations section
// These will be added to the existing Tenant relations

model FeedbackVote {
  id          String   @id @default(cuid())
  feedbackId  String
  feedback    CommunityFeedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], name: "UserFeedbackVotes")
  type        String   @default("upvote") // "upvote", "downvote"
  createdAt   DateTime @default(now())

  @@unique([feedbackId, userId])
  @@map("feedback_votes")
}

model FeedbackComment {
  id          String   @id @default(cuid())
  feedbackId  String
  feedback    CommunityFeedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], name: "UserFeedbackComments")
  parentId    String?
  parent      FeedbackComment? @relation("CommentReplies", fields: [parentId], references: [id])
  
  content     String
  isOfficial  Boolean  @default(false) // Official response from team
  likeCount   Int      @default(0)
  
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  replies     FeedbackComment[] @relation("CommentReplies")
  
  @@index([feedbackId])
  @@index([userId])
  @@map("feedback_comments")
}

// =============================================================================
// CHUNK 9: CUSTOMER SHOWCASE MARKETPLACE MODELS
// =============================================================================

// Customer Showcase Platform Models
model CustomerSuccessStory {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantCustomerSuccessStories")
  customerId  String?
  customer    CustomerProfile? @relation(fields: [customerId], references: [id], name: "CustomerSuccessStories")
  
  title       String
  description String
  content     String   // Rich text content
  industry    String
  companySize String   // "startup", "small", "medium", "large", "enterprise"
  useCase     String
  
  // Media & Assets
  heroImage   String?
  gallery     Json     @default("[]") // Array of image/video URLs
  videoUrl    String?
  attachments Json     @default("[]")
  
  // Story Details
  timeline    String?  // Implementation timeline
  challenges  Json     @default("[]") // Array of challenge objects
  solutions   Json     @default("[]") // Array of solution objects
  outcomes    Json     @default("[]") // Array of outcome objects
  
  // Metrics & Results
  keyMetrics  Json     @default("[]") // Array of key performance metrics
  roiData     Json     @default("{}")  // ROI calculation data
  beforeAfter Json     @default("{}")  // Before/after comparison data
  
  // Engagement & Social Proof
  featured    Boolean  @default(false)
  verified    Boolean  @default(false)
  published   Boolean  @default(false)
  viewCount   Int      @default(0)
  shareCount  Int      @default(0)
  likeCount   Int      @default(0)
  
  // Categorization
  tags        Json     @default("[]")
  category    String?
  priority    Int      @default(0)
  
  // Publication & Sharing
  publishedAt DateTime?
  authorId    String?
  author      User?    @relation(fields: [authorId], references: [id], name: "AuthoredSuccessStories")
  approvedBy  String?
  approver    User?    @relation(fields: [approvedBy], references: [id], name: "ApprovedSuccessStories")
  
  // Distribution Settings
  allowPublicSharing Boolean @default(true)
  allowCaseStudyUse  Boolean @default(false)
  allowMarketingUse  Boolean @default(false)
  
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  spotlights        CustomerSpotlight[]
  journeyMaps       CustomerJourneyMap[]
  transformations   TransformationStory[]
  achievements      CustomerAchievement[]
  testimonials      Testimonial[]
  quotes            SuccessQuote[]
  
  @@index([tenantId, industry, published])
  @@index([customerId])
  @@index([featured, verified])
  @@index([authorId])
  @@map("customer_success_stories")
}

model CustomerProfile {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantCustomerProfiles")
  
  // Company Information
  companyName String
  industry    String
  companySize String
  website     String?
  logoUrl     String?
  
  // Contact Information
  primaryContact Json   @default("{}")  // Name, title, email, phone
  billingContact Json   @default("{}")
  technicalContact Json @default("{}")
  
  // Business Details
  headquarters   String?
  employees      Int?
  revenue        String?
  founded        Int?
  description    String?
  
  // Relationship Status
  customerSince  DateTime?
  planType       String?
  contractValue  Decimal?
  renewalDate    DateTime?
  
  // Engagement Level
  advocacyScore     Int      @default(0)   // 0-100 advocacy willingness score
  referralCount     Int      @default(0)
  testimonialsCount Int      @default(0)
  caseStudiesCount  Int      @default(0)
  
  // Permissions & Preferences
  allowShowcase     Boolean  @default(false)
  allowTestimonials Boolean  @default(false)
  allowCaseStudies  Boolean  @default(false)
  allowLogoUsage    Boolean  @default(false)
  allowReferrals    Boolean  @default(false)
  
  // Success Metrics
  successMetrics    Json     @default("[]")
  roiCalculations   Json     @default("{}")
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  successStories    CustomerSuccessStory[] @relation("CustomerSuccessStories")
  spotlights        CustomerSpotlight[]
  journeyMaps       CustomerJourneyMap[]
  transformations   TransformationStory[]
  achievements      CustomerAchievement[]
  testimonials      Testimonial[]
  referrals         ReferralTracking[]
  advocacyPrograms  CustomerAdvocate[]
  successMetricData SuccessMetric[]
  roiTracking       ROITracking[]
  logos             CustomerLogo[]
  awards            IndustryAward[]
  successQuotes     SuccessQuote[]
  
  @@index([tenantId, industry])
  @@index([companyName])
  @@index([advocacyScore])
  @@map("customer_profiles")
}

model CustomerSpotlight {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantCustomerSpotlights")
  customerId  String
  customer    CustomerProfile @relation(fields: [customerId], references: [id])
  storyId     String?
  story       CustomerSuccessStory? @relation(fields: [storyId], references: [id])
  
  // Spotlight Details
  title       String
  subtitle    String?
  description String
  content     String   // Rich text content
  
  // Media
  heroImage   String?
  portraits   Json     @default("[]") // Array of portrait images
  videoUrl    String?
  
  // Featured Quote
  quote       String?
  quotee      String?  // Name of person quoted
  quoteeTitle String?  // Title of person quoted
  
  // Spotlight Scheduling
  scheduledFor DateTime?
  publishedAt  DateTime?
  expiresAt    DateTime?
  
  // Engagement
  featured     Boolean  @default(false)
  published    Boolean  @default(false)
  viewCount    Int      @default(0)
  shareCount   Int      @default(0)
  
  // Distribution Channels
  channels     Json     @default("[]") // website, newsletter, social, etc.
  
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([tenantId, published])
  @@index([customerId])
  @@index([scheduledFor])
  @@map("customer_spotlights")
}

model IndustryShowcase {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantIndustryShowcases")
  
  // Industry Information
  industry    String
  title       String
  description String
  content     String   // Rich text content
  
  // Associated Stories
  storyIds    Json     @default("[]") // Array of CustomerSuccessStory IDs
  
  // Industry Insights
  marketSize      String?
  growthRate      String?
  keyTrends       Json   @default("[]")
  commonChallenges Json  @default("[]")
  solutions       Json   @default("[]")
  
  // Industry Metrics
  averageROI      Decimal?
  implementationTime String?
  adoptionRate    Decimal?
  
  // Media & Presentation
  heroImage       String?
  infographics    Json   @default("[]")
  videoUrl        String?
  
  // SEO & Marketing
  slug           String   @unique
  metaTitle      String?
  metaDescription String?
  keywords       Json     @default("[]")
  
  // Publication
  featured       Boolean  @default(false)
  published      Boolean  @default(false)
  publishedAt    DateTime?
  viewCount      Int      @default(0)
  
  metadata       Json     @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([tenantId, industry, published])
  @@index([slug])
  @@map("industry_showcases")
}

model CustomerJourneyMap {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantCustomerJourneyMaps")
  customerId  String
  customer    CustomerProfile @relation(fields: [customerId], references: [id])
  storyId     String?
  story       CustomerSuccessStory? @relation(fields: [storyId], references: [id])
  
  // Journey Details
  title       String
  description String?
  totalTime   String?  // "6 months", "1 year", etc.
  
  // Journey Phases
  phases      Json     @default("[]") // Array of phase objects with timeline, activities, outcomes
  milestones  Json     @default("[]") // Array of key milestone objects
  
  // Stakeholders & Participants
  stakeholders Json    @default("[]") // Array of stakeholder objects (roles, names, involvement)
  
  // Metrics & Success Factors
  kpis        Json     @default("[]") // Array of KPI objects tracked throughout journey
  successFactors Json  @default("[]") // Array of critical success factors
  
  // Visual Representation
  visualData  Json     @default("{}")  // Data for journey visualization
  chartType   String   @default("timeline") // timeline, flowchart, kanban, etc.
  
  // Implementation Guidance
  bestPractices Json   @default("[]") // Array of best practice objects
  lessons       Json   @default("[]") // Array of lessons learned
  recommendations Json @default("[]") // Array of recommendation objects
  
  // Sharing & Usage
  template      Boolean  @default(false) // Can be used as template for similar customers
  published     Boolean  @default(false)
  viewCount     Int      @default(0)
  
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([tenantId, customerId])
  @@index([template, published])
  @@map("customer_journey_maps")
}

model TransformationStory {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantTransformationStories")
  customerId  String
  customer    CustomerProfile @relation(fields: [customerId], references: [id])
  storyId     String?
  story       CustomerSuccessStory? @relation(fields: [storyId], references: [id])
  
  // Transformation Overview
  title       String
  summary     String
  
  // Before State
  beforeState Json     @default("{}")  // Description, metrics, challenges, pain points
  
  // Transformation Process
  approach    Json     @default("[]")  // Array of approach/methodology objects
  timeline    Json     @default("[]")  // Array of timeline/phase objects
  resources   Json     @default("[]")  // Array of resource objects (people, tools, budget)
  
  // After State
  afterState  Json     @default("{}")  // Description, metrics, improvements, benefits
  
  // Impact Analysis
  quantitativeImpact Json @default("[]") // Array of measurable impact objects
  qualitativeImpact  Json @default("[]") // Array of qualitative impact objects
  
  // Transformation Metrics
  roiPercentage      Decimal?
  paybackPeriod      String?
  costSavings        Decimal?
  revenueIncrease    Decimal?
  efficiencyGains    Json     @default("[]")
  
  // Visual Elements
  beforeAfterImages  Json     @default("[]") // Array of before/after image pairs
  infographics       Json     @default("[]") // Array of infographic URLs
  videoUrl           String?
  
  // Validation & Credibility
  verified           Boolean  @default(false)
  verificationDate   DateTime?
  verifiedBy         String?  // Internal verifier
  
  // Usage & Sharing
  featured           Boolean  @default(false)
  published          Boolean  @default(false)
  allowMarketing     Boolean  @default(false)
  
  metadata           Json     @default("{}")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  @@index([tenantId, customerId])
  @@index([featured, published])
  @@index([verified])
  @@map("transformation_stories")
}

model CustomerAchievement {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantCustomerAchievements")
  customerId  String
  customer    CustomerProfile @relation(fields: [customerId], references: [id])
  storyId     String?
  story       CustomerSuccessStory? @relation(fields: [storyId], references: [id])
  
  // Achievement Details
  title       String
  description String
  category    String   // "milestone", "award", "metric", "recognition", etc.
  type        String   // "internal", "external", "industry", etc.
  
  // Achievement Value
  metric      String?  // "revenue", "efficiency", "growth", etc.
  value       String   // "150%", "$2.5M", "50 hours/week", etc.
  baseline    String?  // Previous value for comparison
  improvement String?  // Calculated improvement
  
  // Timeline
  achievedAt  DateTime
  timeToAchieve String? // "6 months", "1 year", etc.
  
  // Verification & Credibility
  verified    Boolean  @default(false)
  verifiedBy  String?
  verificationSource String? // "internal", "third-party", "customer-reported"
  
  // Recognition & Awards
  awardName   String?
  awardingBody String?
  awardDate   DateTime?
  awardUrl    String?
  
  // Visual Elements
  badgeUrl    String?
  certificateUrl String?
  imageUrl    String?
  
  // Sharing & Promotion
  featured    Boolean  @default(false)
  published   Boolean  @default(false)
  priority    Int      @default(0)
  
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([tenantId, customerId])
  @@index([category, type])
  @@index([achievedAt])
  @@index([featured, published])
  @@map("customer_achievements")
}

// Testimonial Collection System Models
model Testimonial {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantTestimonials")
  customerId  String?
  customer    CustomerProfile? @relation(fields: [customerId], references: [id])
  storyId     String?
  story       CustomerSuccessStory? @relation(fields: [storyId], references: [id])
  
  // Testimonial Content
  content     String   // Main testimonial text
  rating      Int?     // 1-5 star rating
  headline    String?  // Optional headline/title
  
  // Testimonial Author
  authorName  String
  authorTitle String?
  authorCompany String?
  authorEmail String?
  authorImage String?
  
  // Testimonial Type
  type        String   @default("text") // "text", "video", "audio"
  format      String   @default("short") // "short", "medium", "long", "case-study"
  
  // Media Content
  videoUrl    String?
  audioUrl    String?
  imageUrl    String?
  attachments Json     @default("[]")
  
  // Collection Details
  collectionMethod String? // "email", "survey", "interview", "spontaneous"
  collectedBy      String? // User ID who collected it
  collectedAt      DateTime?
  
  // Approval Workflow
  status      String   @default("pending") // "pending", "approved", "rejected", "needs-review"
  moderatedBy String?
  moderatedAt DateTime?
  moderationNotes String?
  
  // Usage & Rights
  allowPublicUse   Boolean @default(false)
  allowMarketing   Boolean @default(false)
  allowCaseStudy   Boolean @default(false)
  allowWebsite     Boolean @default(false)
  allowSocial      Boolean @default(false)
  
  // Engagement & Analytics
  featured        Boolean @default(false)
  published       Boolean @default(false)
  publishedAt     DateTime?
  viewCount       Int     @default(0)
  shareCount      Int     @default(0)
  likeCount       Int     @default(0)
  
  // Categorization & Tagging
  category        String?
  tags            Json    @default("[]")
  keywords        Json    @default("[]")
  
  // Widget Usage
  widgetEnabled   Boolean @default(false)
  widgetSettings  Json    @default("{}")
  
  metadata        Json    @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  collections     TestimonialCollection[]
  widgets         TestimonialWidget[]
  moderations     TestimonialModeration[]
  
  @@index([tenantId, status, published])
  @@index([customerId])
  @@index([type, format])
  @@index([featured, rating])
  @@map("testimonials")
}

model TestimonialCollection {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantTestimonialCollections")
  
  // Collection Campaign
  name        String
  description String?
  purpose     String?  // "product-launch", "case-study", "website-refresh", etc.
  
  // Collection Configuration
  type        String   @default("email") // "email", "survey", "form", "interview"
  method      String   @default("automated") // "automated", "manual", "hybrid"
  
  // Target Audience
  targetSegment Json   @default("{}")  // Customer segment criteria
  targetCount   Int?   // Target number of testimonials
  
  // Collection Content
  template      Json   @default("{}")  // Email/form template configuration
  questions     Json   @default("[]") // Array of question objects
  
  // Campaign Timeline
  startDate     DateTime
  endDate       DateTime?
  
  // Automation Settings
  automated     Boolean @default(false)
  reminderSchedule Json @default("[]") // Array of reminder timing objects
  followUpTemplate Json @default("{}")
  
  // Collection Results
  sent          Int     @default(0)
  opened        Int     @default(0)
  responded     Int     @default(0)
  completed     Int     @default(0)
  approved      Int     @default(0)
  
  // Status
  status        String  @default("draft") // "draft", "active", "paused", "completed"
  
  metadata      Json    @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  testimonials  Testimonial[]
  
  @@index([tenantId, status])
  @@index([startDate, endDate])
  @@map("testimonial_collections")
}

model TestimonialWidget {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantTestimonialWidgets")
  
  // Widget Configuration
  name        String
  description String?
  type        String   @default("slider") // "slider", "grid", "list", "single", "popup"
  
  // Display Settings
  displayCount   Int      @default(3)
  autoRotate     Boolean  @default(true)
  rotateInterval Int      @default(5000) // milliseconds
  showRating     Boolean  @default(true)
  showAuthor     Boolean  @default(true)
  showCompany    Boolean  @default(true)
  showImage      Boolean  @default(true)
  
  // Styling Configuration
  theme          String   @default("default") // "default", "minimal", "card", "modern"
  primaryColor   String   @default("#0066cc")
  backgroundColor String  @default("#ffffff")
  textColor      String   @default("#333333")
  borderRadius   Int      @default(8)
  
  // Content Filtering
  filterCriteria Json     @default("{}")  // Criteria for which testimonials to show
  sortOrder      String   @default("newest") // "newest", "oldest", "rating", "random"
  
  // Widget Code
  embedCode      String?  // Generated embed code
  jsCode         String?  // Generated JavaScript
  cssCode        String?  // Generated CSS
  
  // Usage Tracking
  websiteUrl     String?
  installCount   Int      @default(0)
  viewCount      Int      @default(0)
  
  // Status
  active         Boolean  @default(true)
  published      Boolean  @default(false)
  
  metadata       Json     @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  testimonials   Testimonial[]
  
  @@index([tenantId, active])
  @@index([published])
  @@map("testimonial_widgets")
}

model TestimonialModeration {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], name: "TenantTestimonialModerations")
  testimonialId   String
  testimonial     Testimonial @relation(fields: [testimonialId], references: [id])
  
  // Moderation Action
  action          String   // "approve", "reject", "flag", "edit", "request-changes"
  status          String   @default("pending") // "pending", "completed", "escalated"
  
  // Moderator Information
  moderatorId     String
  moderator       User     @relation(fields: [moderatorId], references: [id], name: "TestimonialModerator")
  
  // Moderation Details
  reason          String?
  notes           String?
  changes         Json     @default("[]") // Array of change objects
  
  // Quality Assessment
  qualityScore    Int?     // 1-10 quality rating
  credibilityScore Int?    // 1-10 credibility rating
  usabilityScore  Int?     // 1-10 usability rating
  
  // Escalation
  escalated       Boolean  @default(false)
  escalatedTo     String?
  escalationReason String?
  
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([tenantId, status])
  @@index([testimonialId])
  @@index([moderatorId])
  @@map("testimonial_moderations")
}

// Success Metrics Dashboard Models
model SuccessMetric {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantSuccessMetrics")
  customerId  String?
  customer    CustomerProfile? @relation(fields: [customerId], references: [id])
  
  // Metric Definition
  name        String
  description String?
  category    String   // "financial", "operational", "strategic", "satisfaction", etc.
  type        String   // "percentage", "currency", "count", "ratio", "time", etc.
  unit        String?  // "USD", "%", "hours", "count", etc.
  
  // Metric Values
  currentValue    Decimal?
  previousValue   Decimal?
  targetValue     Decimal?
  baselineValue   Decimal?
  
  // Time Period
  measurementPeriod String? // "monthly", "quarterly", "annually", "real-time"
  periodStart       DateTime?
  periodEnd         DateTime?
  
  // Calculation Details
  formula           String?  // Calculation formula if applicable
  dataSource        String?  // Where the data comes from
  calculationMethod String?  // How it's calculated
  
  // Benchmarking
  industryBenchmark Decimal?
  peerBenchmark     Decimal?
  internalBenchmark Decimal?
  
  // Trend Analysis
  trend             String?  // "improving", "declining", "stable", "volatile"
  trendConfidence   Int?     // 1-100 confidence in trend analysis
  
  // Alerting & Monitoring
  alertEnabled      Boolean  @default(false)
  alertThreshold    Decimal?
  alertDirection    String?  // "above", "below"
  lastAlertSent     DateTime?
  
  // Visualization
  chartType         String   @default("line") // "line", "bar", "gauge", "kpi"
  displayFormat     String   @default("number") // "number", "percentage", "currency"
  
  // Access & Sharing
  visibility        String   @default("internal") // "internal", "customer", "public"
  featured          Boolean  @default(false)
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  roiTracking       ROITracking[]
  benchmarks        BenchmarkComparison[]
  customDefinitions CustomMetricDefinition[]
  
  @@index([tenantId, category, type])
  @@index([customerId])
  @@index([featured, visibility])
  @@map("success_metrics")
}

model ROITracking {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantROITracking")
  customerId  String
  customer    CustomerProfile @relation(fields: [customerId], references: [id])
  metricId    String?
  metric      SuccessMetric? @relation(fields: [metricId], references: [id])
  
  // ROI Calculation Period
  periodType  String   @default("annual") // "monthly", "quarterly", "annual", "custom"
  startDate   DateTime
  endDate     DateTime
  
  // Investment Details
  initialInvestment    Decimal  // Original investment amount
  ongoingCosts         Decimal  @default(0) // Recurring costs
  implementationCosts  Decimal  @default(0) // One-time implementation costs
  trainingCosts        Decimal  @default(0) // Training and change management costs
  totalInvestment      Decimal  // Calculated total investment
  
  // Returns/Benefits
  directSavings        Decimal  @default(0) // Direct cost savings
  revenueIncrease      Decimal  @default(0) // Additional revenue generated
  efficiencyGains      Decimal  @default(0) // Value of efficiency improvements
  riskMitigation       Decimal  @default(0) // Value of risk mitigation
  totalBenefits        Decimal  // Calculated total benefits
  
  // ROI Calculations
  netBenefit          Decimal  // Total benefits - total investment
  roiPercentage       Decimal  // (Net benefit / Total investment) * 100
  paybackPeriod       Decimal? // Time to recoup investment (in months)
  npv                 Decimal? // Net Present Value
  irr                 Decimal? // Internal Rate of Return
  
  // Confidence & Validation
  confidenceLevel     Int      @default(80) // 1-100 confidence in ROI calculation
  validatedBy         String?  // Who validated these numbers
  validatedAt         DateTime?
  validationNotes     String?
  
  // Breakdown Details
  benefitBreakdown    Json     @default("[]") // Detailed breakdown of benefits
  costBreakdown       Json     @default("[]") // Detailed breakdown of costs
  assumptions         Json     @default("[]") // Key assumptions made
  
  // Comparison & Benchmarking
  industryAvgROI      Decimal?
  peerAvgROI          Decimal?
  expectedROI         Decimal? // Originally projected ROI
  
  // Reporting
  currency            String   @default("USD")
  reportGenerated     Boolean  @default(false)
  reportUrl           String?
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@index([tenantId, customerId])
  @@index([periodType, startDate, endDate])
  @@index([roiPercentage])
  @@map("roi_tracking")
}

model BenchmarkComparison {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantBenchmarkComparisons")
  metricId    String
  metric      SuccessMetric @relation(fields: [metricId], references: [id])
  
  // Benchmark Details
  benchmarkType       String   // "industry", "peer", "historical", "target"
  benchmarkName       String
  benchmarkDescription String?
  
  // Benchmark Values
  benchmarkValue      Decimal
  customerValue       Decimal
  variance            Decimal  // Difference between customer and benchmark
  variancePercentage  Decimal  // Percentage difference
  
  // Benchmark Context
  dataSource          String?  // Where benchmark data comes from
  sampleSize          Int?     // Number of companies in benchmark
  lastUpdated         DateTime?
  
  // Performance Assessment
  performance         String   // "above", "at", "below", "significantly-above", "significantly-below"
  percentile          Int?     // Customer's percentile rank (1-100)
  
  // Industry Context
  industry            String?
  companySize         String?
  geography           String?
  
  // Trend Analysis
  trend               String?  // "improving", "declining", "stable"
  previousComparison  Decimal?
  trendPeriod         String?  // Period over which trend is measured
  
  // Visualization Data
  chartData           Json     @default("{}")
  
  metadata            Json     @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@index([tenantId, benchmarkType])
  @@index([metricId])
  @@index([performance])
  @@map("benchmark_comparisons")
}

model IndustryPerformance {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantIndustryPerformance")
  
  // Industry Information
  industry    String
  sector      String?
  region      String?
  
  // Performance Period
  periodType  String   @default("quarterly") // "monthly", "quarterly", "annual"
  year        Int
  quarter     Int?
  month       Int?
  
  // Performance Metrics
  metrics     Json     @default("[]") // Array of industry metric objects
  
  // Statistical Analysis
  averages    Json     @default("{}")  // Average values for key metrics
  medians     Json     @default("{}")  // Median values
  percentiles Json     @default("{}")  // 25th, 75th, 90th percentiles
  
  // Trend Analysis
  trends      Json     @default("[]")  // Array of trend objects
  forecasts   Json     @default("[]")  // Array of forecast objects
  
  // Data Quality
  sampleSize  Int?     // Number of companies in dataset
  confidence  Int?     // Confidence level in data (1-100)
  dataSource  String?  // Source of industry data
  
  // Insights
  insights    Json     @default("[]")  // Array of insight objects
  recommendations Json @default("[]")  // Array of recommendation objects
  
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([tenantId, industry, year])
  @@index([periodType, quarter, month])
  @@map("industry_performance")
}

model CustomMetricDefinition {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantCustomMetricDefinitions")
  metricId    String?
  metric      SuccessMetric? @relation(fields: [metricId], references: [id])
  
  // Custom Metric Details
  name        String
  description String
  purpose     String?  // Why this metric was created
  
  // Calculation Logic
  formula     String   // Mathematical formula or calculation logic
  variables   Json     @default("[]") // Array of variable definitions
  dataPoints  Json     @default("[]") // Array of required data points
  
  // Data Collection
  collectionMethod    String? // "manual", "automated", "api", "import"
  dataSource          String? // Where data comes from
  updateFrequency     String? // How often data is updated
  
  // Business Context
  businessUnit        String?
  department          String?
  stakeholders        Json    @default("[]") // Array of stakeholder objects
  
  // Validation Rules
  validationRules     Json    @default("[]") // Array of validation rule objects
  dataQualityChecks   Json    @default("[]") // Array of quality check objects
  
  // Usage & Adoption
  active              Boolean @default(true)
  usageCount          Int     @default(0)
  lastUsed            DateTime?
  
  // Approval Workflow
  approved            Boolean @default(false)
  approvedBy          String?
  approvedAt          DateTime?
  approvalNotes       String?
  
  metadata            Json    @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@index([tenantId, active])
  @@index([businessUnit, department])
  @@map("custom_metric_definitions")
}

// Customer Advocacy Program Models
model CustomerAdvocate {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantCustomerAdvocates")
  customerId  String
  customer    CustomerProfile @relation(fields: [customerId], references: [id])
  
  // Advocate Profile
  contactName     String
  contactTitle    String?
  contactEmail    String
  contactPhone    String?
  
  // Advocacy Level
  advocacyTier    String   @default("bronze") // "bronze", "silver", "gold", "platinum", "ambassador"
  advocacyScore   Int      @default(0)        // 0-1000 points
  levelStartDate  DateTime @default(now())
  
  // Advocacy Activities
  activitiesCount       Int      @default(0)
  referralsGiven        Int      @default(0)
  testimonialsProvided  Int      @default(0)
  caseStudiesParticipated Int    @default(0)
  eventsAttended        Int      @default(0)
  contentContributed    Int      @default(0)
  
  // Program Participation
  joinedAt           DateTime  @default(now())
  lastActivityAt     DateTime?
  programStatus      String    @default("active") // "active", "inactive", "paused", "graduated"
  
  // Rewards & Recognition
  totalRewardsEarned Decimal   @default(0)
  rewardsCurrency    String    @default("USD")
  recognitionsCount  Int       @default(0)
  
  // Communication Preferences
  communicationPrefs Json      @default("{}")  // Email, phone, social preferences
  contentInterests   Json      @default("[]")  // Array of content topic interests
  eventInterests     Json      @default("[]")  // Array of event type interests
  
  // Program Settings
  allowPublicProfile  Boolean  @default(false)
  allowNameUsage      Boolean  @default(true)
  allowContactSharing Boolean  @default(false)
  
  // Performance Tracking
  quarterlyGoals     Json      @default("{}")
  achievementHistory Json      @default("[]")
  
  metadata           Json      @default("{}")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  referrals          ReferralTracking[]
  rewards            AdvocateReward[]
  ambassadorPrograms AmbassadorProgram[]
  challengeParticipations AdvocacyChallenge[]
  contentContributions AdvocacyContent[]
  
  @@index([tenantId, advocacyTier])
  @@index([customerId])
  @@index([advocacyScore])
  @@index([programStatus])
  @@map("customer_advocates")
}

model ReferralTracking {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantReferralTracking")
  programId   String
  program     ReferralProgram @relation(fields: [programId], references: [id])
  referrerId  String
  referrer    CustomerProfile @relation(fields: [referrerId], references: [id])
  advocateId  String?
  advocate    CustomerAdvocate? @relation(fields: [advocateId], references: [id])
  
  // Referral Details
  referralCode     String?  @unique
  referralLink     String?
  refereeEmail     String
  refereeName      String?
  refereeCompany   String?
  
  // Tracking Information
  referredAt       DateTime @default(now())
  clickedAt        DateTime?
  signedUpAt       DateTime?
  purchasedAt      DateTime?
  activatedAt      DateTime?
  
  // Attribution Data
  source           String?  // How referral was shared (email, social, direct)
  medium           String?  // Channel details
  campaign         String?  // Marketing campaign if applicable
  
  // Status Tracking
  status           String   @default("sent") // "sent", "clicked", "signed-up", "qualified", "rewarded", "expired"
  qualificationMet Boolean  @default(false)
  rewardEligible   Boolean  @default(false)
  
  // Reward Information
  referrerRewarded Boolean  @default(false)
  referrerRewardAmount Decimal @default(0)
  referrerRewardedAt DateTime?
  
  refereeRewarded  Boolean  @default(false)
  refereeRewardAmount Decimal @default(0)
  refereeRewardedAt DateTime?
  
  // Conversion Tracking
  conversionValue  Decimal? // Value of successful conversion
  conversionData   Json     @default("{}")
  
  // Communication History
  emailsSent       Int      @default(0)
  lastEmailSent    DateTime?
  responseReceived Boolean  @default(false)
  
  metadata         Json     @default("{}")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([tenantId, programId])
  @@index([referrerId])
  @@index([status, qualificationMet])
  @@index([referralCode])
  @@map("referral_tracking")
}

model AdvocateReward {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantAdvocateRewards")
  advocateId  String
  advocate    CustomerAdvocate @relation(fields: [advocateId], references: [id])
  
  // Reward Details
  rewardType      String   // "points", "credit", "cash", "gift", "experience", "recognition"
  rewardCategory  String   // "referral", "testimonial", "case-study", "content", "event", "milestone"
  
  // Reward Value
  points          Int?     // Points awarded (if points-based system)
  monetaryValue   Decimal? // Monetary value
  currency        String   @default("USD")
  description     String
  
  // Trigger Information
  triggerActivity String   // What activity triggered this reward
  triggerDate     DateTime
  activityId      String?  // ID of the specific activity
  
  // Reward Status
  status          String   @default("pending") // "pending", "approved", "issued", "claimed", "expired"
  approvedBy      String?
  approvedAt      DateTime?
  issuedAt        DateTime?
  claimedAt       DateTime?
  expiresAt       DateTime?
  
  // Delivery Information
  deliveryMethod  String?  // "account-credit", "gift-card", "check", "transfer", "physical"
  deliveryDetails Json     @default("{}")
  deliveryStatus  String   @default("pending") // "pending", "processing", "delivered", "failed"
  
  // Recognition Element
  public          Boolean  @default(false)
  announcement    String?  // Public announcement text
  announcedAt     DateTime?
  
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([tenantId, advocateId])
  @@index([rewardType, rewardCategory])
  @@index([status, triggerDate])
  @@map("advocate_rewards")
}

model AmbassadorProgram {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantAmbassadorPrograms")
  advocateId  String
  advocate    CustomerAdvocate @relation(fields: [advocateId], references: [id])
  
  // Ambassador Details
  ambassadorTier  String   @default("junior") // "junior", "senior", "executive", "global"
  specializations Json     @default("[]")     // Array of specialization areas
  
  // Program Terms
  startDate       DateTime
  endDate         DateTime?
  renewalDate     DateTime?
  termLength      Int      @default(12)       // Months
  
  // Responsibilities & Commitments
  responsibilities Json    @default("[]")     // Array of responsibility objects
  commitments      Json    @default("[]")     // Array of commitment objects
  expectations     Json    @default("[]")     // Array of expectation objects
  
  // Benefits & Perks
  benefits         Json    @default("[]")     // Array of benefit objects
  exclusiveAccess  Json    @default("[]")     // Array of exclusive access privileges
  
  // Performance Requirements
  quarterlyGoals   Json    @default("[]")     // Array of quarterly goal objects
  annualGoals      Json    @default("[]")     // Array of annual goal objects
  kpis             Json    @default("[]")     // Array of KPI objects
  
  // Performance Tracking
  goalAchievement  Json    @default("{}")     // Current goal achievement status
  performanceScore Int     @default(0)        // 0-100 performance score
  lastReviewDate   DateTime?
  nextReviewDate   DateTime?
  
  // Recognition & Rewards
  totalRecognitions Int    @default(0)
  publicRecognition Boolean @default(false)
  internalRecognition Boolean @default(true)
  
  // Program Status
  status           String  @default("active") // "active", "probation", "suspended", "graduated", "terminated"
  statusReason     String?
  statusChangedAt  DateTime?
  
  // Communication & Support
  dedicatedSupport Boolean @default(true)
  supportContact   String?
  communicationChannel String? // "email", "slack", "teams", "direct"
  
  metadata         Json    @default("{}")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([tenantId, ambassadorTier])
  @@index([advocateId])
  @@index([status, performanceScore])
  @@map("ambassador_programs")
}

model AdvocacyChallenge {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantAdvocacyChallenges")
  
  // Challenge Details
  title       String
  description String
  objective   String
  category    String   // "referral", "content", "social", "testimonial", "case-study", "event"
  
  // Challenge Configuration
  challengeType String @default("individual") // "individual", "team", "community"
  difficulty    String @default("medium")     // "easy", "medium", "hard", "expert"
  
  // Timeline
  startDate     DateTime
  endDate       DateTime
  duration      Int      // Duration in days
  
  // Participation Rules
  eligibility   Json     @default("[]")       // Array of eligibility criteria
  requirements  Json     @default("[]")       // Array of requirement objects
  restrictions  Json     @default("[]")       // Array of restriction objects
  
  // Success Criteria
  successMetrics Json    @default("[]")       // Array of success metric objects
  completionGoal String  // What constitutes completion
  qualityStandards Json  @default("[]")       // Array of quality standard objects
  
  // Rewards & Recognition
  rewardStructure Json   @default("{}")       // Reward structure for different levels
  maxParticipants Int?   // Maximum number of participants
  leaderboard     Boolean @default(true)
  publicResults   Boolean @default(true)
  
  // Challenge Progress
  participantCount Int    @default(0)
  completedCount   Int    @default(0)
  totalSubmissions Int    @default(0)
  
  // Status
  status          String  @default("draft")   // "draft", "active", "paused", "completed", "cancelled"
  featured        Boolean @default(false)
  
  metadata        Json    @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  advocates       CustomerAdvocate[]
  submissions     AdvocacyContent[]
  
  @@index([tenantId, status, category])
  @@index([startDate, endDate])
  @@index([featured, challengeType])
  @@map("advocacy_challenges")
}

model AdvocacyContent {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantAdvocacyContent")
  advocateId  String
  advocate    CustomerAdvocate @relation(fields: [advocateId], references: [id])
  challengeId String?
  challenge   AdvocacyChallenge? @relation(fields: [challengeId], references: [id])
  
  // Content Details
  title       String
  description String?
  contentType String   // "article", "video", "infographic", "case-study", "testimonial", "social-post"
  format      String   // "text", "image", "video", "audio", "document", "presentation"
  
  // Content Data
  content     String?  // Text content
  mediaUrl    String?  // URL to media file
  attachments Json     @default("[]")       // Array of attachment URLs
  
  // Content Metadata
  keywords    Json     @default("[]")       // Array of keywords/tags
  topics      Json     @default("[]")       // Array of topic areas
  audience    String?  // Target audience
  industry    String?  // Industry focus
  
  // Submission Information
  submittedAt DateTime @default(now())
  source      String   @default("created") // "created", "curated", "shared", "adapted"
  
  // Approval Workflow
  status      String   @default("submitted") // "submitted", "under-review", "approved", "needs-revision", "rejected"
  reviewedBy  String?
  reviewedAt  DateTime?
  reviewNotes String?
  
  // Quality Assessment
  qualityScore   Int?     // 1-10 quality rating
  usabilityScore Int?     // 1-10 usability rating
  originality    Int?     // 1-10 originality rating
  
  // Usage & Performance
  approved       Boolean  @default(false)
  published      Boolean  @default(false)
  publishedAt    DateTime?
  viewCount      Int      @default(0)
  shareCount     Int      @default(0)
  engagementRate Decimal? // Engagement metrics if applicable
  
  // Rights & Usage
  allowMarketing Boolean  @default(false)
  allowPublic    Boolean  @default(false)
  allowEdit      Boolean  @default(false)
  attribution    String?  // How to attribute the content
  
  metadata       Json     @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([tenantId, advocateId])
  @@index([challengeId])
  @@index([contentType, status])
  @@index([approved, published])
  @@map("advocacy_content")
}

// Case Study Marketplace Extension Models
model CaseStudyTemplate {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantCaseStudyTemplates")
  
  // Template Details
  name        String
  description String
  industry    String?
  useCase     String?
  companySize String?  // Target company size
  
  // Template Structure
  sections    Json     @default("[]")       // Array of section objects
  fields      Json     @default("[]")       // Array of field definitions
  layout      Json     @default("{}")       // Layout configuration
  
  // Template Configuration
  templateType String  @default("standard") // "standard", "premium", "custom", "enterprise"
  difficulty   String  @default("medium")   // "easy", "medium", "hard"
  estimatedTime String?                     // "30 minutes", "2 hours", etc.
  
  // Content Guidelines
  guidelines   Json    @default("[]")       // Array of guideline objects
  examples     Json    @default("[]")       // Array of example objects
  tips         Json    @default("[]")       // Array of tip objects
  
  // Template Assets
  templateFile String? // URL to template file (Word, PowerPoint, etc.)
  previewImages Json   @default("[]")       // Array of preview image URLs
  sampleContent Json   @default("{}")       // Sample content for demonstration
  
  // Usage & Popularity
  usageCount   Int     @default(0)
  rating       Decimal @default(0)
  ratingCount  Int     @default(0)
  featured     Boolean @default(false)
  
  // Access & Availability
  public       Boolean @default(true)
  premium      Boolean @default(false)
  price        Decimal @default(0)
  currency     String  @default("USD")
  
  // Template Maintenance
  version      String  @default("1.0")
  lastUpdated  DateTime @default(now())
  deprecated   Boolean @default(false)
  
  metadata     Json    @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  collaborations CaseStudyCollaboration[]
  analytics      CaseStudyAnalytics[]
  distributions  CaseStudyDistribution[]
  
  @@index([tenantId, industry, public])
  @@index([featured, rating])
  @@index([templateType, premium])
  @@map("case_study_templates")
}

model CaseStudyCollaboration {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantCaseStudyCollaborations")
  templateId  String?
  template    CaseStudyTemplate? @relation(fields: [templateId], references: [id])
  
  // Collaboration Details
  title       String
  description String?
  objective   String?
  
  // Participants
  initiatorId String
  initiator   User     @relation(fields: [initiatorId], references: [id], name: "CaseStudyInitiator")
  participants Json    @default("[]")       // Array of participant objects
  
  // Collaboration Settings
  type        String   @default("internal") // "internal", "customer", "partner", "mixed"
  accessLevel String   @default("private")  // "private", "restricted", "public"
  
  // Content Management
  contentStatus String @default("draft")    // "draft", "in-progress", "review", "completed"
  currentVersion String @default("1.0")
  versionHistory Json  @default("[]")       // Array of version objects
  
  // Workflow
  workflowSteps Json   @default("[]")       // Array of workflow step objects
  currentStep   String?
  approvalRequired Boolean @default(true)
  finalApprover String?
  
  // Collaboration Data
  contentSections Json @default("[]")       // Array of content section objects
  sharedAssets   Json  @default("[]")       // Array of shared asset objects
  comments       Json  @default("[]")       // Array of comment objects
  
  // Timeline
  targetCompletion DateTime?
  actualCompletion DateTime?
  
  // Status
  status         String  @default("active") // "active", "paused", "completed", "cancelled"
  progress       Int     @default(0)        // 0-100 completion percentage
  
  metadata       Json    @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([tenantId, initiatorId])
  @@index([templateId])
  @@index([status, type])
  @@map("case_study_collaborations")
}

model CaseStudyAnalytics {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantCaseStudyAnalytics")
  templateId  String?
  template    CaseStudyTemplate? @relation(fields: [templateId], references: [id])
  caseStudyId String?  // Reference to actual case study if applicable
  
  // Analytics Period
  periodType  String   @default("monthly") // "daily", "weekly", "monthly", "quarterly"
  periodStart DateTime
  periodEnd   DateTime
  
  // Engagement Metrics
  views       Int      @default(0)
  downloads   Int      @default(0)
  shares      Int      @default(0)
  bookmarks   Int      @default(0)
  
  // Usage Analytics
  uniqueUsers      Int      @default(0)
  returningUsers   Int      @default(0)
  averageTimeSpent Decimal? // In minutes
  bounceRate       Decimal? // Percentage
  
  // Conversion Metrics
  leadGeneration   Int      @default(0)
  meetingRequests  Int      @default(0)
  contactFormFills Int      @default(0)
  trialSignups     Int      @default(0)
  
  // Geographic Data
  topCountries     Json     @default("[]")    // Array of country objects with counts
  topRegions       Json     @default("[]")    // Array of region objects with counts
  
  // Referral Sources
  referralSources  Json     @default("[]")    // Array of source objects with counts
  searchKeywords   Json     @default("[]")    // Array of keyword objects with counts
  
  // Device & Technology
  deviceTypes      Json     @default("[]")    // Array of device type objects with counts
  browsers         Json     @default("[]")    // Array of browser objects with counts
  
  // Content Performance
  sectionEngagement Json    @default("[]")    // Array of section engagement objects
  exitPoints       Json     @default("[]")    // Where users typically exit
  
  metadata         Json     @default("{}")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([tenantId, periodType])
  @@index([templateId])
  @@index([periodStart, periodEnd])
  @@map("case_study_analytics")
}

model CaseStudyDistribution {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantCaseStudyDistribution")
  templateId  String?
  template    CaseStudyTemplate? @relation(fields: [templateId], references: [id])
  caseStudyId String?  // Reference to actual case study
  
  // Distribution Details
  title       String
  description String?
  distributionType String // "email", "social", "website", "pdf", "presentation", "white-label"
  
  // Distribution Configuration
  channels    Json     @default("[]")       // Array of distribution channel objects
  targeting   Json     @default("{}")       // Targeting criteria
  scheduling  Json     @default("{}")       // Scheduling configuration
  
  // Content Customization
  customization Json   @default("{}")       // Customization settings for white-label
  branding     Json    @default("{}")       // Branding configuration
  
  // Distribution Status
  status       String  @default("draft")    // "draft", "scheduled", "active", "paused", "completed"
  scheduledFor DateTime?
  startedAt    DateTime?
  completedAt  DateTime?
  
  // Performance Tracking
  sent         Int     @default(0)
  delivered    Int     @default(0)
  opened       Int     @default(0)
  clicked      Int     @default(0)
  converted    Int     @default(0)
  
  // Distribution Analytics
  engagementRate Decimal @default(0)
  conversionRate Decimal @default(0)
  reachMetrics   Json    @default("{}")
  
  metadata       Json    @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([tenantId, distributionType])
  @@index([templateId])
  @@index([status, scheduledFor])
  @@map("case_study_distribution")
}

// Social Proof Amplification Models
model CustomerLogo {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantCustomerLogos")
  customerId  String
  customer    CustomerProfile @relation(fields: [customerId], references: [id])
  
  // Logo Details
  logoUrl     String
  companyName String
  altText     String?
  
  // Logo Variations
  variations  Json     @default("[]")       // Array of logo variation objects (dark, light, color, mono)
  sizes       Json     @default("[]")       // Array of size objects (small, medium, large, vector)
  
  // Usage Rights
  allowWebsite     Boolean @default(false)
  allowMarketing   Boolean @default(false)
  allowPresentations Boolean @default(false)
  allowSocial      Boolean @default(false)
  allowPrint       Boolean @default(false)
  
  // Permission Details
  permissionGrantedBy   String?   // Who granted permission
  permissionGrantedAt   DateTime?
  permissionExpiresAt   DateTime?
  permissionNotes       String?
  
  // Display Settings
  featured    Boolean  @default(false)
  displayOrder Int     @default(0)
  category    String?  // "client", "partner", "award", etc.
  
  // Usage Tracking
  usageCount  Int      @default(0)
  lastUsedAt  DateTime?
  
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([tenantId, customerId])
  @@index([featured, displayOrder])
  @@index([allowWebsite, allowMarketing])
  @@map("customer_logos")
}

model SuccessQuote {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantSuccessQuotes")
  customerId  String?
  customer    CustomerProfile? @relation(fields: [customerId], references: [id])
  storyId     String?
  story       CustomerSuccessStory? @relation(fields: [storyId], references: [id])
  
  // Quote Content
  quote       String
  attribution String   // Person who said it
  title       String?  // Title of the person
  company     String?  // Company name
  context     String?  // Context where quote was given
  
  // Quote Metadata
  quoteType   String   @default("testimonial") // "testimonial", "case-study", "interview", "social"
  category    String?  // "product", "service", "support", "results", etc.
  keywords    Json     @default("[]")         // Array of relevant keywords
  
  // Source Information
  originalSource String?   // Where quote originally appeared
  sourceUrl      String?   // URL to original source
  dateGiven      DateTime? // When quote was originally given
  
  // Usage Rights & Permissions
  allowMarketing Boolean  @default(false)
  allowWebsite   Boolean  @default(false)
  allowSocial    Boolean  @default(false)
  allowPrint     Boolean  @default(false)
  attributionRequired Boolean @default(true)
  
  // Visual Elements
  authorImage    String?  // Photo of person quoted
  companyLogo    String?  // Company logo
  designTemplate String?  // Visual template for quote
  
  // Performance & Usage
  featured       Boolean  @default(false)
  verified       Boolean  @default(false)
  usageCount     Int      @default(0)
  effectiveness  Decimal? // 1-10 effectiveness rating
  
  // Auto-generation for Marketing
  generatedVariations Json @default("[]") // Array of auto-generated quote variations
  suggestedUsage     Json  @default("[]") // Array of suggested usage contexts
  
  metadata           Json  @default("{}")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  @@index([tenantId, customerId])
  @@index([storyId])
  @@index([featured, verified])
  @@index([quoteType, category])
  @@map("success_quotes")
}

model IndustryAward {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantIndustryAwards")
  customerId  String?
  customer    CustomerProfile? @relation(fields: [customerId], references: [id])
  
  // Award Details
  awardName   String
  awardingOrganization String
  category    String?
  year        Int
  
  // Award Description
  description String?
  criteria    String?
  significance String? // Why this award is important
  
  // Award Recognition
  recognitionLevel String @default("industry") // "local", "regional", "national", "international", "industry"
  competitorCount  Int?   // Number of competitors/nominees
  
  // Award Assets
  awardImage      String? // Award certificate/trophy image
  logoUrl         String? // Award organization logo
  pressReleaseUrl String? // Link to press release
  articleUrls     Json    @default("[]") // Array of article URLs
  
  // Customer Achievement Context
  achievementDescription String? // How customer earned this award
  ourRoleInSuccess      String? // Our platform's role in their success
  metricsHighlighted    Json    @default("[]") // Key metrics that led to award
  
  // Usage & Promotion
  allowPromotionalUse Boolean @default(false)
  allowLogoUsage      Boolean @default(false)
  allowCaseStudyUse   Boolean @default(false)
  promotionalNotes    String?
  
  // Verification
  verified       Boolean  @default(false)
  verifiedBy     String?
  verifiedAt     DateTime?
  verificationSource String?
  
  // Performance Tracking
  featured       Boolean  @default(false)
  publicized     Boolean  @default(false)
  marketingValue Decimal? // Estimated marketing value
  
  metadata       Json     @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([tenantId, customerId])
  @@index([year, recognitionLevel])
  @@index([featured, verified])
  @@map("industry_awards")
}

model PressRelease {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], name: "TenantPressReleases")
  
  // Press Release Content
  headline    String
  subheadline String?
  content     String   // Full press release content
  summary     String?  // Executive summary
  
  // Press Release Metadata
  releaseType String   @default("customer-success") // "customer-success", "award", "milestone", "partnership"
  industry    String?
  geography   String?  // Geographic focus
  
  // Source Content
  sourceStoryId String? // Related customer success story
  sourceAwardId String? // Related industry award
  quoteSources  Json    @default("[]") // Array of quote source objects
  
  // Distribution Information
  distributionDate DateTime?
  publishedDate    DateTime?
  embargoDate      DateTime?
  
  // Media & Assets
  featuredImage    String? // Main image for press release
  additionalImages Json    @default("[]") // Array of additional image URLs
  downloadableAssets Json  @default("[]") // Array of downloadable asset objects
  
  // Contact Information
  mediaContact     Json    @default("{}")  // Media contact information
  companyContact   Json    @default("{}")  // Company contact information
  
  // SEO & Web
  slug            String?  @unique
  metaDescription String?
  keywords        Json     @default("[]")
  
  // Distribution Tracking
  distributionChannels Json @default("[]") // Array of distribution channel objects
  pickupTracking      Json  @default("[]") // Array of media pickup objects
  
  // Performance Metrics
  views          Int      @default(0)
  downloads      Int      @default(0)
  mediaPickups   Int      @default(0)
  socialShares   Int      @default(0)
  
  // Status & Approval
  status         String   @default("draft") // "draft", "review", "approved", "published", "archived"
  approvedBy     String?
  approvedAt     DateTime?
  
  metadata       Json     @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([tenantId, status])
  @@index([releaseType, industry])
  @@index([distributionDate, publishedDate])
  @@index([slug])
  @@map("press_releases")
}

// ===================================================================
// CHUNK 11: AI-POWERED PERSONALIZATION SYSTEM
// ===================================================================

// User Personalization Profile - Core AI personalization data
model PersonalizationProfile {
  id                    String   @id @default(cuid())
  userId                String   @unique
  tenantId              String
  
  // AI Behavioral Analysis
  behaviorVector        Json     @default("{}") // Multi-dimensional behavior analysis
  interactionPatterns   Json     @default("{}") // User interaction patterns
  preferenceWeights     Json     @default("{}") // AI-calculated preference weights
  activitySignature     String?  // Unique behavior signature
  
  // Personalization Settings
  personalizationLevel  String   @default("adaptive") // "minimal", "moderate", "adaptive", "aggressive"
  privacyLevel          String   @default("balanced") // "strict", "balanced", "open"
  consentGiven          Boolean  @default(false)
  consentDate           DateTime?
  
  // AI Model Training Data
  trainingDataPoints    Int      @default(0)
  modelConfidence       Float    @default(0.0)
  lastModelUpdate       DateTime @default(now())
  modelVersion          String   @default("1.0")
  
  // Segmentation & Classification
  primarySegment        String?  // Primary AI-determined segment
  secondarySegments     Json     @default("[]") // Additional segments
  userLifecycleStage    String   @default("new") // "new", "active", "engaged", "at_risk", "dormant"
  churnProbability      Float    @default(0.0) // AI-predicted churn probability
  lifetimeValueTier     String   @default("bronze") // "bronze", "silver", "gold", "platinum"
  
  // Personalization Metrics
  engagementScore       Float    @default(0.0)
  satisfactionScore     Float    @default(0.0)
  personalizationROI    Float    @default(0.0)
  adaptationSpeed       Float    @default(0.5) // How quickly to adapt to changes
  
  metadata              Json     @default("{}")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  behaviorEvents        PersonalizationEvent[]
  recommendations       PersonalizedRecommendation[]
  experiments           PersonalizationExperiment[]
  preferences           UserPreference[]
  journeySteps          UserJourneyStep[]
  contentInteractions   ContentInteraction[]
  
  @@index([userId, tenantId])
  @@index([primarySegment, userLifecycleStage])
  @@index([churnProbability, lifetimeValueTier])
  @@map("personalization_profiles")
}

// AI Recommendation Engine
model PersonalizedRecommendation {
  id                    String   @id @default(cuid())
  profileId             String
  profile               PersonalizationProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  // Recommendation Details
  recommendationType    String   // "widget", "content", "feature", "action", "product"
  recommendedItemId     String   // ID of recommended item
  recommendedItemType   String   // Type of recommended item
  title                 String
  description           String?
  
  // AI Algorithm Details
  algorithmUsed         String   // "collaborative", "content_based", "hybrid", "deep_learning"
  confidenceScore       Float    @default(0.0)
  relevanceScore        Float    @default(0.0)
  diversityScore        Float    @default(0.0)
  noveltyScore          Float    @default(0.0)
  
  // Context & Triggers
  context               Json     @default("{}") // Context when recommendation was generated
  triggerEvent          String?  // What triggered this recommendation
  placementLocation     String?  // Where this recommendation appears
  
  // Performance Tracking
  impressions           Int      @default(0)
  clicks                Int      @default(0)
  conversions           Int      @default(0)
  clickThroughRate      Float    @default(0.0)
  conversionRate        Float    @default(0.0)
  userFeedback          String?  // "positive", "negative", "neutral"
  feedbackReason        String?
  
  // Lifecycle
  status                String   @default("active") // "active", "expired", "dismissed", "converted"
  priority              Int      @default(50) // 1-100, higher = more important
  expiresAt             DateTime?
  displayedAt           DateTime?
  clickedAt             DateTime?
  convertedAt           DateTime?
  
  metadata              Json     @default("{}")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([profileId, status])
  @@index([recommendationType, algorithmUsed])
  @@index([confidenceScore, relevanceScore])
  @@index([createdAt, expiresAt])
  @@map("personalized_recommendations")
}

// Behavioral Event Tracking for Personalization
model PersonalizationEvent {
  id                    String   @id @default(cuid())
  profileId             String
  profile               PersonalizationProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  // Event Details
  eventType             String   // "click", "view", "scroll", "hover", "search", "purchase", etc.
  eventCategory         String   // "ui_interaction", "content_engagement", "feature_usage", "social"
  element               String?  // Specific UI element or content piece
  elementId             String?
  
  // Context Information
  pageUrl               String?
  pageTitle             String?
  referrer              String?
  sessionId             String?
  deviceType            String?  // "desktop", "mobile", "tablet"
  browserType           String?
  
  // Temporal Context
  timeOfDay             Int?     // Hour 0-23
  dayOfWeek             Int?     // 1-7
  isWorkingHours        Boolean  @default(false)
  timeSpent             Int?     // Milliseconds
  
  // Personalization Context
  recommendationId      String?  // If action was on a recommendation
  experimentId          String?  // If part of an A/B test
  segmentContext        Json     @default("[]") // Active segments during event
  
  // Event Data
  eventData             Json     @default("{}") // Additional event-specific data
  previousEvent         String?  // Previous event in session
  nextEvent             String?  // Next event in session (filled later)
  eventSequence         Int      @default(1) // Event order in session
  
  // AI Processing
  processed             Boolean  @default(false)
  processingVersion     String?  // Version of AI that processed this
  extractedFeatures     Json     @default("{}") // AI-extracted features
  contributesToModel    Boolean  @default(true) // Whether this event should train AI models
  
  metadata              Json     @default("{}")
  createdAt             DateTime @default(now())
  
  @@index([profileId, eventType])
  @@index([eventCategory, createdAt])
  @@index([sessionId, eventSequence])
  @@index([processed, contributesToModel])
  @@map("personalization_events")
}

// User Preferences Management
model UserPreference {
  id                    String   @id @default(cuid())
  profileId             String
  profile               PersonalizationProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  // Preference Details
  category              String   // "ui", "content", "features", "notifications", "privacy"
  subcategory           String?
  key                   String   // Specific preference key
  value                 Json     // Preference value (can be any type)
  
  // AI Inference vs Manual
  source                String   @default("inferred") // "manual", "inferred", "hybrid"
  confidence            Float    @default(0.0) // How confident AI is about this preference
  evidenceCount         Int      @default(0) // How many data points support this
  lastConfirmed         DateTime? // When user last confirmed this preference
  
  // Preference Metadata
  importance            Float    @default(0.5) // How important this preference is (0-1)
  stability             Float    @default(0.5) // How stable this preference is over time
  conflictResolution    String   @default("latest") // "latest", "average", "manual_wins"
  
  // Lifecycle
  isActive              Boolean  @default(true)
  expiresAt             DateTime?
  lastUsed              DateTime?
  usageCount            Int      @default(0)
  
  metadata              Json     @default("{}")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([profileId, category])
  @@index([source, confidence])
  @@index([isActive, importance])
  @@map("user_preferences")
}

// Personalization Experiments (A/B Testing for Personalization)
model PersonalizationExperiment {
  id                    String   @id @default(cuid())
  profileId             String
  profile               PersonalizationProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  // Experiment Details
  experimentName        String
  experimentType        String   // "ui_layout", "recommendation_algo", "content_strategy", "feature_placement"
  hypothesis            String?
  variant               String   // Which variant user is seeing
  controlGroup          Boolean  @default(false)
  
  // Experiment Configuration
  trafficAllocation     Float    @default(0.5) // Percentage of traffic in this experiment
  duration              Int?     // Planned duration in days
  successMetric         String   // Primary metric to optimize
  secondaryMetrics      Json     @default("[]")
  
  // Results Tracking
  impressions           Int      @default(0)
  interactions          Int      @default(0)
  conversions           Int      @default(0)
  primaryMetricValue    Float    @default(0.0)
  secondaryMetricValues Json     @default("{}")
  
  // Statistical Analysis
  significance          Float?   // Statistical significance if calculated
  confidenceInterval    Json     @default("{}")
  effect                Float?   // Effect size
  pValue                Float?
  
  // Lifecycle
  status                String   @default("active") // "active", "paused", "completed", "cancelled"
  startDate             DateTime @default(now())
  endDate               DateTime?
  analysisDate          DateTime?
  
  metadata              Json     @default("{}")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([profileId, status])
  @@index([experimentType, variant])
  @@index([startDate, endDate])
  @@map("personalization_experiments")
}

// User Journey Tracking
model UserJourneyStep {
  id                    String   @id @default(cuid())
  profileId             String
  profile               PersonalizationProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  // Journey Details
  journeyId             String   // Groups steps into journeys
  stepNumber            Int      // Order in journey
  stepType              String   // "entry", "engagement", "conversion", "exit", "recovery"
  pagePath              String
  pageTitle             String?
  
  // Step Context
  referrer              String?
  campaign              String?
  medium                String?
  source                String?
  intent                String?  // AI-inferred user intent
  sentiment             String?  // AI-detected sentiment
  
  // Timing Information
  timeOnStep            Int      @default(0) // Milliseconds
  timeToStep            Int      @default(0) // Time from journey start
  bounceIndicator       Boolean  @default(false)
  exitIndicator         Boolean  @default(false)
  
  // AI Insights
  stepValue             Float    @default(0.0) // AI-calculated step value
  dropoffRisk           Float    @default(0.0) // Risk of user dropping off
  nextStepPrediction    Json     @default("{}") // AI predictions for next steps
  optimizationSuggestions Json   @default("[]") // AI suggestions for this step
  
  // Personalization Applied
  personalizations      Json     @default("{}") // What personalizations were shown
  recommendationsShown  Json     @default("[]") // Recommendations displayed
  experimentsActive     Json     @default("[]") // Active experiments
  
  metadata              Json     @default("{}")
  createdAt             DateTime @default(now())
  
  @@index([profileId, journeyId])
  @@index([stepType, stepNumber])
  @@index([pagePath, createdAt])
  @@index([bounceIndicator, exitIndicator])
  @@map("user_journey_steps")
}

// Content Interaction Tracking
model ContentInteraction {
  id                    String   @id @default(cuid())
  profileId             String
  profile               PersonalizationProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  // Content Details
  contentId             String
  contentType           String   // "article", "video", "widget", "dashboard", "feature"
  contentCategory       String?
  contentTitle          String?
  contentAuthor         String?
  contentUrl            String?
  
  // Interaction Details
  interactionType       String   // "view", "read", "watch", "download", "share", "bookmark", "like"
  interactionDuration   Int      @default(0) // Milliseconds
  interactionDepth      Float    @default(0.0) // How deep into content (0-1)
  interactionQuality    String   @default("normal") // "superficial", "normal", "engaged", "deep"
  
  // Context
  discoveryMethod       String?  // "search", "recommendation", "browse", "direct"
  deviceContext         String?
  timeContext           String?  // "morning", "afternoon", "evening", "night"
  socialContext         String?  // "alone", "collaborative", "shared"
  
  // AI Analysis
  engagementScore       Float    @default(0.0) // AI-calculated engagement
  satisfactionIndicator Float?   // AI-inferred satisfaction
  learningValue         Float    @default(0.0) // How much this interaction teaches us
  anomalyScore          Float    @default(0.0) // How unusual this interaction is
  
  // Outcome & Impact
  converted             Boolean  @default(false)
  conversionType        String?  // Type of conversion if any
  conversionValue       Float    @default(0.0)
  recommendedNext       Json     @default("[]") // What was recommended next
  actualNext            String?  // What user actually did next
  
  metadata              Json     @default("{}")
  createdAt             DateTime @default(now())
  
  @@index([profileId, contentType])
  @@index([interactionType, engagementScore])
  @@index([contentId, interactionType])
  @@index([createdAt, conversionType])
  @@map("content_interactions")
}

// AI Model Performance Tracking
model PersonalizationModel {
  id                    String   @id @default(cuid())
  tenantId              String
  
  // Model Details
  modelName             String
  modelType             String   // "recommendation", "segmentation", "churn_prediction", "content_optimization"
  version               String   @default("1.0")
  algorithm             String   // "collaborative_filtering", "deep_learning", "gradient_boosting", etc.
  
  // Training Information
  trainingDataSize      Int      @default(0)
  trainingDuration      Int      @default(0) // Minutes
  trainingCompletion    DateTime?
  hyperparameters       Json     @default("{}")
  
  // Performance Metrics
  accuracy              Float    @default(0.0)
  precision             Float    @default(0.0)
  recall                Float    @default(0.0)
  f1Score               Float    @default(0.0)
  auc                   Float    @default(0.0)
  ndcg                  Float    @default(0.0) // For recommendation models
  
  // Business Metrics
  conversionLift        Float    @default(0.0)
  engagementLift        Float    @default(0.0)
  revenueImpact         Float    @default(0.0)
  clickThroughRate      Float    @default(0.0)
  userSatisfaction      Float    @default(0.0)
  
  // Model Status
  status                String   @default("training") // "training", "validation", "deployed", "deprecated"
  isProduction          Boolean  @default(false)
  deploymentDate        DateTime?
  lastRetraining        DateTime?
  nextRetraining        DateTime?
  
  // Feature Information
  features              Json     @default("[]") // List of features used
  featureImportance     Json     @default("{}") // Feature importance scores
  
  // Monitoring
  driftDetection        Json     @default("{}") // Model drift metrics
  alertsTriggered       Json     @default("[]") // Performance alerts
  
  metadata              Json     @default("{}")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([tenantId, modelType])
  @@index([status, isProduction])
  @@index([accuracy, f1Score])
  @@map("personalization_models")
}

// Dynamic Content Personalization
model DynamicContent {
  id                    String   @id @default(cuid())
  tenantId              String
  
  // Content Details
  contentKey            String   // Unique identifier for content slot
  contentType           String   // "widget", "banner", "text", "image", "call_to_action"
  baseContent           Json     @default("{}") // Default content structure
  
  // Personalization Rules
  targetSegments        Json     @default("[]") // Target user segments
  personalizationRules  Json     @default("[]") // Rules for personalization
  contentVariants       Json     @default("[]") // Different content variants
  
  // AI Optimization
  optimizationGoal      String   @default("engagement") // "engagement", "conversion", "satisfaction"
  aiOptimized           Boolean  @default(false)
  optimizationModel     String?  // AI model used for optimization
  
  // Performance Tracking
  impressions           Int      @default(0)
  interactions          Int      @default(0)
  conversions           Int      @default(0)
  averageEngagement     Float    @default(0.0)
  
  // A/B Testing
  testingEnabled        Boolean  @default(false)
  testVariants          Json     @default("[]")
  winningVariant        String?
  testStatistics        Json     @default("{}")
  
  // Lifecycle
  isActive              Boolean  @default(true)
  activationDate        DateTime @default(now())
  expirationDate        DateTime?
  
  metadata              Json     @default("{}")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([tenantId, contentKey])
  @@index([contentType, isActive])
  @@index([aiOptimized, optimizationGoal])
  @@map("dynamic_content")
}

// Real-time Personalization Context
model PersonalizationContext {
  id                    String   @id @default(cuid())
  sessionId             String   @unique
  profileId             String?
  
  // Session Information
  userAgent             String?
  ipAddress             String?
  geoLocation           Json     @default("{}")
  deviceType            String?
  browserType           String?
  screenResolution      String?
  timezone              String?
  locale                String?
  
  // Current Context
  currentPage           String?
  currentCategory       String?
  sessionDuration       Int      @default(0) // Milliseconds
  pageViews             Int      @default(0)
  actionsThisSession    Int      @default(0)
  
  // Real-time State
  activeExperiments     Json     @default("[]")
  currentSegments       Json     @default("[]")
  personalizations      Json     @default("{}")
  recommendationsCache  Json     @default("[]")
  
  // Intent & Sentiment
  inferredIntent        String?  // AI-inferred user intent
  sentimentScore        Float?   // Current sentiment (-1 to 1)
  engagementLevel       String   @default("normal") // "low", "normal", "high", "very_high"
  urgencyLevel          String   @default("normal") // "low", "normal", "high", "urgent"
  
  // Predictive Indicators
  churnRisk             Float    @default(0.0)
  conversionProbability Float    @default(0.0)
  nextActionPrediction  Json     @default("{}")
  timeToConversion      Int?     // Predicted minutes to conversion
  
  // Context Expiry
  lastActivity          DateTime @default(now())
  expiresAt             DateTime @default(now())
  
  metadata              Json     @default("{}")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([sessionId, profileId])
  @@index([lastActivity, expiresAt])
  @@index([churnRisk, conversionProbability])
  @@map("personalization_context")
}

// ================================================================
// CHUNK 12: SECONDARY MARKET PLATFORM MODELS
// ================================================================

// Digital Asset Ownership Tracking
model DigitalAssetOwnership {
  id                String   @id @default(cuid())
  assetType         String   // "widget", "template", "plugin", "theme"
  assetId           String   // ID of the original marketplace item
  originalItemId    String   // Reference to MarketplaceWidget/Template
  
  // Ownership Details
  currentOwnerId    String
  currentOwner      User     @relation("AssetOwner", fields: [currentOwnerId], references: [id])
  previousOwnerId   String?
  previousOwner     User?    @relation("PreviousOwner", fields: [previousOwnerId], references: [id])
  
  // Purchase Details
  originalPurchaseId String // Reference to original MarketplaceTransaction
  originalPrice     Float
  currentValuation  Float    @default(0.0)
  
  // Asset Information
  assetData         Json     @default("{}")
  licenseType       String
  transferRights    String   @default("resellable") // "resellable", "non_transferable", "limited"
  usageRights       Json     @default("{}")
  
  // Ownership History
  ownershipProof    String   // Blockchain-like ownership hash
  acquisitionDate   DateTime @default(now())
  transferHistory   Json     @default("[]")
  
  // Market Information
  isListedForSale   Boolean  @default(false)
  listingPrice      Float?
  marketStatus      String   @default("owned") // "owned", "listed", "sold", "disputed"
  
  // Metadata
  metadata          Json     @default("{}")
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  secondaryListings SecondaryMarketListing[]
  assetTransfers    AssetTransferHistory[]

  @@unique([assetType, assetId, currentOwnerId])
  @@index([currentOwnerId])
  @@index([assetType, assetId])
  @@index([isListedForSale, marketStatus])
  @@map("digital_asset_ownership")
}

// Secondary Market Listings
model SecondaryMarketListing {
  id                String   @id @default(cuid())
  assetOwnershipId  String
  assetOwnership    DigitalAssetOwnership @relation(fields: [assetOwnershipId], references: [id], onDelete: Cascade)
  
  // Listing Details
  sellerId          String
  seller            User     @relation("ListingCreator", fields: [sellerId], references: [id])
  listingType       String   @default("fixed_price") // "fixed_price", "auction", "best_offer"
  
  // Pricing Information
  askingPrice       Float
  reservePrice      Float?   // Minimum price for auctions
  currency          String   @default("USD")
  priceHistory      Json     @default("[]")
  
  // Market Strategy
  pricingStrategy   String   @default("market_rate") // "market_rate", "premium", "discount", "dynamic"
  autoAcceptOffer   Boolean  @default(false)
  negotiable        Boolean  @default(true)
  
  // Listing Configuration
  status            String   @default("active") // "draft", "active", "paused", "sold", "expired", "cancelled"
  visibility        String   @default("public") // "public", "private", "premium_only"
  featured          Boolean  @default(false)
  promoteUntil      DateTime?
  
  // Timing
  listingDuration   Int      @default(30) // Days
  expiresAt         DateTime
  autoRelist        Boolean  @default(false)
  
  // Marketing
  title             String
  description       String
  tags              Json     @default("[]")
  images            Json     @default("[]")
  highlights        Json     @default("[]")
  
  // Analytics
  viewCount         Int      @default(0)
  favoriteCount     Int      @default(0)
  offerCount        Int      @default(0)
  
  // Metadata
  metadata          Json     @default("{}")
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  secondaryTransactions SecondaryMarketTransaction[]
  offers            SecondaryMarketOffer[]

  @@index([sellerId, status])
  @@index([status, visibility])
  @@index([assetOwnershipId])
  @@index([listingType, expiresAt])
  @@map("secondary_market_listings")
}

// Secondary Market Offers
model SecondaryMarketOffer {
  id              String   @id @default(cuid())
  listingId       String
  listing         SecondaryMarketListing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  
  // Offer Details
  buyerId         String
  offerAmount     Float
  currency        String   @default("USD")
  offerType       String   @default("direct") // "direct", "counter", "bid"
  
  // Terms
  paymentTerms    String   @default("immediate") // "immediate", "escrow", "installment"
  deliveryTerms   Json     @default("{}")
  conditions      String?
  
  // Status
  status          String   @default("pending") // "pending", "accepted", "rejected", "expired", "withdrawn"
  expiresAt       DateTime
  message         String?
  
  // Response
  responseTime    DateTime?
  responseMessage String?
  counterOffer    Float?
  
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([listingId, status])
  @@index([buyerId, status])
  @@index([expiresAt])
  @@map("secondary_market_offers")
}

// Secondary Market Transactions
model SecondaryMarketTransaction {
  id              String   @id @default(cuid())
  listingId       String
  listing         SecondaryMarketListing @relation(fields: [listingId], references: [id])
  
  // Transaction Parties
  buyerId         String
  buyer           User     @relation("SecondaryBuyer", fields: [buyerId], references: [id])
  sellerId        String
  seller          User     @relation("SecondarySeller", fields: [sellerId], references: [id])
  
  // Transaction Details
  transactionType String   @default("sale") // "sale", "trade", "lease"
  salePrice       Float
  currency        String   @default("USD")
  
  // Fees and Royalties
  platformFee     Float    @default(0.0)
  creatorRoyalty  Float    @default(0.0)
  serviceFee      Float    @default(0.0)
  totalFees       Float    @default(0.0)
  netAmount       Float    @default(0.0)
  
  // Payment Information
  paymentMethod   String
  paymentId       String?
  gatewayTxnId    String?
  escrowId        String?
  
  // Transaction Status
  status          String   @default("pending") // "pending", "payment_processing", "in_escrow", "completed", "failed", "refunded", "disputed"
  
  // Timing
  initiatedAt     DateTime @default(now())
  paymentAt       DateTime?
  escrowReleasedAt DateTime?
  completedAt     DateTime?
  
  // Security
  transactionHash String   @unique // Blockchain-like transaction verification
  securityDeposit Float?
  insuranceAmount Float?
  
  // Asset Transfer
  assetTransferredAt DateTime?
  transferConfirmed  Boolean  @default(false)
  transferProof      String?
  
  // Metadata
  metadata        Json     @default("{}")
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  escrowAccount   EscrowAccount?
  disputes        DisputeResolution[]
  revenueShares   SecondaryRevenueShare[]
  assetTransfers  AssetTransferHistory[]
  creatorRoyalties CreatorRoyalty[]

  @@index([buyerId, status])
  @@index([sellerId, status])
  @@index([status, completedAt])
  @@index([transactionHash])
  @@map("secondary_market_transactions")
}

// Escrow System
model EscrowAccount {
  id                String   @id @default(cuid())
  transactionId     String   @unique
  transaction       SecondaryMarketTransaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  
  // Escrow Details
  buyerId           String
  buyer             User     @relation("BuyerEscrow", fields: [buyerId], references: [id])
  sellerId          String
  seller            User     @relation("SellerEscrow", fields: [sellerId], references: [id])
  
  // Financial Details
  escrowAmount      Float
  currency          String   @default("USD")
  escrowFee         Float    @default(0.0)
  
  // Escrow Configuration
  releaseConditions Json     @default("{}")
  autoReleaseAfter  Int      @default(72) // Hours
  requiresBothParties Boolean @default(false)
  
  // Status Management
  status            String   @default("funded") // "created", "funded", "released", "refunded", "disputed"
  fundedAt          DateTime?
  releasedAt        DateTime?
  releaseReason     String?
  
  // Security
  escrowId          String   @unique
  securityHash      String
  
  // Conditions
  deliveryConfirmed Boolean  @default(false)
  qualityApproved   Boolean  @default(false)
  disputeResolved   Boolean  @default(true)
  
  metadata          Json     @default("{}")
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([buyerId, sellerId])
  @@index([status, autoReleaseAfter])
  @@index([escrowId])
  @@map("escrow_accounts")
}

// Dispute Resolution System
model DisputeResolution {
  id                String   @id @default(cuid())
  transactionId     String
  transaction       SecondaryMarketTransaction @relation(fields: [transactionId], references: [id])
  
  // Dispute Parties
  submitterId       String
  submitter         User     @relation("DisputeSubmitter", fields: [submitterId], references: [id])
  respondentId      String
  respondent        User     @relation("DisputeRespondent", fields: [respondentId], references: [id])
  
  // Dispute Details
  disputeType       String   // "payment", "quality", "delivery", "fraud", "breach_of_contract"
  category          String   // "technical", "commercial", "ethical", "legal"
  severity          String   @default("medium") // "low", "medium", "high", "critical"
  
  // Content
  title             String
  description       String
  evidence          Json     @default("[]")
  timeline          Json     @default("[]")
  
  // Resolution Process
  status            String   @default("open") // "open", "investigating", "mediation", "arbitration", "resolved", "closed"
  priority          String   @default("normal") // "low", "normal", "high", "urgent"
  assignedMediator  String?
  
  // Resolution Details
  proposedSolution  String?
  agreedSolution    String?
  compensationAmount Float?
  resolutionType    String?  // "refund", "partial_refund", "replacement", "compensation", "no_action"
  
  // Timing
  submittedAt       DateTime @default(now())
  respondedAt       DateTime?
  mediationStarted  DateTime?
  resolvedAt        DateTime?
  closedAt          DateTime?
  
  // Communication
  communicationLog  Json     @default("[]")
  publicComments    Json     @default("[]")
  privateNotes      Json     @default("[]")
  
  // Outcome
  verdict           String?  // "in_favor_of_submitter", "in_favor_of_respondent", "mutual_agreement", "no_fault"
  appealable        Boolean  @default(true)
  appealed          Boolean  @default(false)
  appealDeadline    DateTime?
  
  metadata          Json     @default("{}")
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([transactionId, status])
  @@index([submitterId, status])
  @@index([respondentId, status])
  @@index([status, priority])
  @@map("dispute_resolutions")
}

// Enhanced Creator Profile System
model CreatorProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation("UserCreatorProfile", fields: [userId], references: [id], onDelete: Cascade)
  
  // Profile Information
  displayName       String
  bio               String?
  specialties       Json     @default("[]")
  website           String?
  portfolio         Json     @default("[]")
  
  // Creator Stats
  totalEarnings     Float    @default(0.0)
  secondaryEarnings Float    @default(0.0)
  royaltyEarnings   Float    @default(0.0)
  lifetimeEarnings  Float    @default(0.0)
  
  // Reputation System
  rating            Float    @default(0.0)
  reviewCount       Int      @default(0)
  verificationLevel String   @default("basic") // "basic", "verified", "premium", "elite"
  trustScore        Float    @default(0.0)
  
  // Creator Tier
  tier              String   @default("creator") // "creator", "pro", "expert", "master"
  tierBenefits      Json     @default("{}")
  nextTierProgress  Float    @default(0.0)
  
  // Secondary Market Performance
  itemsSold         Int      @default(0)
  avgSalePrice      Float    @default(0.0)
  resaleVolume      Float    @default(0.0)
  royaltyRate       Float    @default(0.05) // 5% default royalty
  
  // Social Metrics
  followers         Int      @default(0)
  following         Int      @default(0)
  collaborations    Int      @default(0)
  communityScore    Float    @default(0.0)
  
  // Creator Program
  programStatus     String   @default("active") // "active", "probation", "suspended", "terminated"
  joinedProgram     DateTime @default(now())
  lastPayout        DateTime?
  
  // Marketing
  featured          Boolean  @default(false)
  featuredUntil     DateTime?
  marketingBudget   Float    @default(0.0)
  
  // Preferences
  autoRoyalty       Boolean  @default(true)
  publicProfile     Boolean  @default(true)
  allowMessages     Boolean  @default(true)
  
  metadata          Json     @default("{}")
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  subscriptions     CreatorSubscription[] @relation("CreatorSubscriptions")
  royalties         CreatorRoyalty[]
  payouts           CreatorPayout[]

  @@index([userId])
  @@index([verificationLevel, tier])
  @@index([rating, trustScore])
  @@map("creator_profiles")
}

// Creator Subscription System
model CreatorSubscription {
  id                String   @id @default(cuid())
  creatorId         String
  creator           User     @relation("CreatorUser", fields: [creatorId], references: [id])
  subscriberId      String
  subscriber        User     @relation("SubscriberUser", fields: [subscriberId], references: [id])
  creatorProfile    CreatorProfile? @relation("CreatorSubscriptions", fields: [creatorId], references: [userId], map: "creator_profile_subscriptions_fkey")
  
  // Subscription Details
  subscriptionType  String   // "basic", "premium", "exclusive", "custom"
  tier              String   @default("basic")
  
  // Pricing
  monthlyPrice      Float
  yearlyPrice       Float?
  currency          String   @default("USD")
  discountApplied   Float    @default(0.0)
  
  // Benefits
  benefits          Json     @default("[]")
  exclusiveAccess   Boolean  @default(false)
  earlyAccess       Boolean  @default(false)
  directSupport     Boolean  @default(false)
  
  // Status
  status            String   @default("active") // "active", "paused", "cancelled", "expired"
  autoRenew         Boolean  @default(true)
  
  // Timing
  startDate         DateTime @default(now())
  endDate           DateTime
  lastPayment       DateTime @default(now())
  nextPayment       DateTime
  
  // Payment
  paymentMethod     String
  paymentId         String?
  totalPaid         Float    @default(0.0)
  
  // Usage
  lastAccessed      DateTime?
  accessCount       Int      @default(0)
  
  metadata          Json     @default("{}")
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([creatorId, subscriberId])
  @@index([creatorId, status])
  @@index([subscriberId, status])
  @@map("creator_subscriptions")
}

// Creator Royalty System
model CreatorRoyalty {
  id                String   @id @default(cuid())
  transactionId     String
  transaction       SecondaryMarketTransaction @relation(fields: [transactionId], references: [id])
  
  // Royalty Details
  originalCreatorId String
  originalCreator   User     @relation("RoyaltyRecipient", fields: [originalCreatorId], references: [id])
  creatorProfile    CreatorProfile? @relation(fields: [originalCreatorId], references: [userId], map: "creator_profile_royalties_fkey")
  assetType         String   // "widget", "template", "plugin"
  originalAssetId   String
  
  // Financial Details
  saleAmount        Float
  royaltyRate       Float    // Percentage as decimal (0.05 = 5%)
  royaltyAmount     Float
  currency          String   @default("USD")
  
  // Payment Status
  status            String   @default("pending") // "pending", "processed", "paid", "failed"
  paidAt            DateTime?
  paymentId         String?
  
  // Calculation
  calculationMethod String   @default("percentage") // "percentage", "fixed", "tiered"
  tierLevel         Int?     // For tiered royalties
  
  // Tracking
  generationCount   Int      @default(1) // How many resales deep this is
  cumulativeRoyalty Float    @default(0.0)
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([originalCreatorId, status])
  @@index([transactionId])
  @@index([assetType, originalAssetId])
  @@map("creator_royalties")
}

// Secondary Revenue Sharing
model SecondaryRevenueShare {
  id                String   @id @default(cuid())
  transactionId     String
  transaction       SecondaryMarketTransaction @relation(fields: [transactionId], references: [id])
  
  // Revenue Distribution
  recipientId       String
  recipient         User     @relation("SecondaryCreator", fields: [recipientId], references: [id])
  recipientType     String   // "platform", "creator", "referrer", "affiliate"
  
  // Share Details
  grossAmount       Float
  sharePercentage   Float    // Percentage as decimal
  shareAmount       Float
  currency          String   @default("USD")
  
  // Payment Information
  paymentStatus     String   @default("pending") // "pending", "processing", "paid", "failed"
  paymentMethod     String?
  paymentId         String?
  paidAt            DateTime?
  
  // Period Tracking
  period            String   // "2024-01", monthly periods
  quarter           String?  // "Q1-2024"
  year              Int?
  
  // Revenue Type
  revenueType       String   // "sale_commission", "royalty", "referral", "platform_fee"
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([recipientId, period])
  @@index([transactionId, recipientType])
  @@map("secondary_revenue_shares")
}

// Asset Transfer History
model AssetTransferHistory {
  id                String   @id @default(cuid())
  assetOwnershipId  String
  assetOwnership    DigitalAssetOwnership @relation(fields: [assetOwnershipId], references: [id])
  transactionId     String?
  transaction       SecondaryMarketTransaction? @relation(fields: [transactionId], references: [id])
  
  // Transfer Details
  fromUserId        String?
  toUserId          String
  transferUser      User     @relation("TransferUser", fields: [toUserId], references: [id])
  transferType      String   // "purchase", "gift", "trade", "inheritance", "recovery"
  
  // Financial Information
  transferPrice     Float?
  transferFee       Float?
  currency          String   @default("USD")
  
  // Transfer Metadata
  transferReason    String?
  transferHash      String   @unique // Blockchain-like transfer verification
  transferProof     Json     @default("{}")
  
  // Verification
  verified          Boolean  @default(false)
  verificationMethod String? // "automated", "manual", "blockchain"
  verifiedAt        DateTime?
  
  // Status
  status            String   @default("completed") // "pending", "completed", "failed", "disputed"
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())

  @@index([assetOwnershipId])
  @@index([toUserId, transferType])
  @@index([transferHash])
  @@map("asset_transfer_history")
}

// Creator Payout System
model CreatorPayout {
  id                String   @id @default(cuid())
  creatorId         String
  creator           User     @relation("PayoutCreator", fields: [creatorId], references: [id])
  creatorProfile    CreatorProfile? @relation(fields: [creatorId], references: [userId], map: "creator_profile_payouts_fkey")
  
  // Payout Details
  payoutType        String   // "monthly", "quarterly", "manual", "threshold"
  period            String   // "2024-01"
  totalAmount       Float
  currency          String   @default("USD")
  
  // Revenue Breakdown
  primaryRevenue    Float    @default(0.0)
  secondaryRevenue  Float    @default(0.0)
  royaltyRevenue    Float    @default(0.0)
  subscriptionRevenue Float  @default(0.0)
  bonusAmount       Float    @default(0.0)
  
  // Fees
  platformFee       Float    @default(0.0)
  processingFee     Float    @default(0.0)
  taxWithholding    Float    @default(0.0)
  netAmount         Float    @default(0.0)
  
  // Payment Information
  paymentMethod     String
  paymentId         String?
  gatewayTxnId      String?
  bankReference     String?
  
  // Status
  status            String   @default("pending") // "pending", "processing", "paid", "failed", "disputed"
  requestedAt       DateTime @default(now())
  processedAt       DateTime?
  paidAt            DateTime?
  
  // Verification
  verified          Boolean  @default(false)
  verificationCode  String?
  
  // Compliance
  taxReported       Boolean  @default(false)
  complianceCheck   Boolean  @default(false)
  
  metadata          Json     @default("{}")
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([creatorId, period])
  @@index([status, requestedAt])
  @@map("creator_payouts")
}

// Dynamic Pricing Engine
model DynamicPricingRule {
  id                String   @id @default(cuid())
  name              String
  description       String?
  ruleType          String   // "demand_based", "time_based", "inventory_based", "competitor_based"
  
  // Rule Configuration
  conditions        Json     @default("{}")
  actions           Json     @default("{}")
  triggers          Json     @default("[]")
  
  // Scope
  assetTypes        Json     @default("[]") // Which asset types this rule applies to
  categories        Json     @default("[]")
  priceRange        Json     @default("{}")
  
  // Pricing Parameters
  basePrice         Float?
  minPrice          Float?
  maxPrice          Float?
  adjustmentFactor  Float    @default(1.0)
  
  // Timing
  activeHours       Json     @default("{}")
  seasonality       Json     @default("{}")
  
  // Performance
  effectiveness     Float    @default(0.0)
  usageCount        Int      @default(0)
  lastTriggered     DateTime?
  
  // Status
  status            String   @default("active") // "active", "paused", "disabled"
  priority          Int      @default(1)
  
  metadata          Json     @default("{}")
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([ruleType, status])
  @@index([tenantId, priority])
  @@map("dynamic_pricing_rules")
}

// Market Demand Analytics
model MarketDemandAnalytics {
  id                String   @id @default(cuid())
  date              DateTime @default(now())
  period            String   // "hourly", "daily", "weekly", "monthly"
  
  // Asset Metrics
  assetType         String
  assetId           String?
  category          String?
  
  // Demand Metrics
  viewCount         Int      @default(0)
  searchCount       Int      @default(0)
  favoriteCount     Int      @default(0)
  listingCount      Int      @default(0)
  saleCount         Int      @default(0)
  
  // Price Metrics
  averagePrice      Float    @default(0.0)
  medianPrice       Float    @default(0.0)
  minPrice          Float    @default(0.0)
  maxPrice          Float    @default(0.0)
  priceVolatility   Float    @default(0.0)
  
  // Market Metrics
  marketCap         Float    @default(0.0)
  tradingVolume     Float    @default(0.0)
  liquidity         Float    @default(0.0)
  demandScore       Float    @default(0.0)
  
  // Predictive Metrics
  trendDirection    String   @default("stable") // "rising", "falling", "stable", "volatile"
  demandForecast    Float    @default(0.0)
  priceTarget       Float    @default(0.0)
  confidenceLevel   Float    @default(0.0)
  
  // External Factors
  seasonalFactor    Float    @default(1.0)
  competitionIndex  Float    @default(1.0)
  marketSentiment   String   @default("neutral") // "bullish", "bearish", "neutral"
  
  metadata          Json     @default("{}")
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  createdAt         DateTime @default(now())

  @@unique([date, period, assetType, assetId])
  @@index([assetType, category])
  @@index([period, date])
  @@map("market_demand_analytics")
}

// Platform Economics Dashboard
model PlatformEconomics {
  id                String   @id @default(cuid())
  date              DateTime @default(now())
  period            String   // "daily", "weekly", "monthly", "quarterly"
  
  // Revenue Metrics
  primaryMarketRevenue    Float    @default(0.0)
  secondaryMarketRevenue  Float    @default(0.0)
  subscriptionRevenue     Float    @default(0.0)
  royaltyRevenue          Float    @default(0.0)
  totalRevenue            Float    @default(0.0)
  
  // Transaction Metrics
  primaryTransactions     Int      @default(0)
  secondaryTransactions   Int      @default(0)
  totalTransactionValue   Float    @default(0.0)
  averageTransactionSize  Float    @default(0.0)
  
  // User Metrics
  activeCreators          Int      @default(0)
  activeBuyers            Int      @default(0)
  activeSellers           Int      @default(0)
  newUsers               Int      @default(0)
  churnedUsers           Int      @default(0)
  
  // Market Health
  marketLiquidity         Float    @default(0.0)
  priceStability          Float    @default(0.0)
  tradingVolume           Float    @default(0.0)
  marketMakerActivity     Float    @default(0.0)
  
  // Creator Economy
  creatorEarnings         Float    @default(0.0)
  averageCreatorIncome    Float    @default(0.0)
  topCreatorEarnings      Float    @default(0.0)
  creatorRetentionRate    Float    @default(0.0)
  
  // Platform Metrics
  platformFees            Float    @default(0.0)
  operatingCosts          Float    @default(0.0)
  profitMargin            Float    @default(0.0)
  roi                     Float    @default(0.0)
  
  // Growth Metrics
  revenueGrowthRate       Float    @default(0.0)
  userGrowthRate          Float    @default(0.0)
  transactionGrowthRate   Float    @default(0.0)
  marketShareGrowth       Float    @default(0.0)
  
  metadata                Json     @default("{}")
  tenantId                String
  tenant                  Tenant   @relation(fields: [tenantId], references: [id])
  createdAt               DateTime @default(now())

  @@unique([date, period, tenantId])
  @@index([period, date])
  @@map("platform_economics")
}

// ===== CHUNK 13+14: YOUTUBE/REFERRAL ECOSYSTEM + ADVANCED ANALYTICS MODELS =====

// YouTube Integration Models
model YouTubeChannel {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  creatorId         String
  creator           User     @relation(fields: [creatorId], references: [id])
  
  // Channel Details
  channelId         String   @unique // YouTube Channel ID
  channelName       String
  channelHandle     String?
  description       String?
  thumbnailUrl      String?
  bannerUrl         String?
  
  // Channel Stats
  subscriberCount   Int      @default(0)
  videoCount        Int      @default(0)
  viewCount         BigInt   @default(0)
  uploadCount       Int      @default(0)
  
  // Authentication & Sync
  accessToken       String?
  refreshToken      String?
  lastSync          DateTime?
  syncStatus        String   @default("pending") // "pending", "active", "error", "suspended"
  
  // Monetization Settings
  monetizationEnabled Boolean @default(false)
  revenueShare      Float    @default(0.0)
  
  // Relations
  videos            YouTubeVideo[]
  analytics         YouTubeAnalytics[]
  syndications      ContentSyndication[]
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("youtube_channels")
}

model YouTubeVideo {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  channelId         String
  channel           YouTubeChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
  // Video Details
  videoId           String   @unique // YouTube Video ID
  title             String
  description       String?
  thumbnailUrl      String?
  duration          Int?     // Duration in seconds
  
  // Publishing Info
  publishedAt       DateTime
  privacyStatus     String   @default("public") // "public", "unlisted", "private"
  categoryId        String?
  tags              String[] @default([])
  
  // Performance Metrics
  viewCount         BigInt   @default(0)
  likeCount         Int      @default(0)
  dislikeCount      Int      @default(0)
  commentCount      Int      @default(0)
  shareCount        Int      @default(0)
  
  // SEO & Optimization
  optimizedTitle    String?
  optimizedTags     String[] @default([])
  seoScore          Float    @default(0.0)
  
  // Monetization
  monetized         Boolean  @default(false)
  revenue           Float    @default(0.0)
  cpm               Float    @default(0.0)
  rpm               Float    @default(0.0)
  
  // Relations
  analytics         YouTubeVideoAnalytics[]
  referrals         ContentReferralTracking[]
  syndications      ContentSyndication[]
  seoOptimizations  YouTubeSEOOptimization[]
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("youtube_videos")
}

model YouTubeAnalytics {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  channelId         String
  channel           YouTubeChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
  // Time Period
  date              DateTime
  period            String   // "daily", "weekly", "monthly"
  
  // Watch Time Metrics
  watchTimeMinutes  BigInt   @default(0)
  averageViewDuration Float  @default(0.0)
  averagePercentageViewed Float @default(0.0)
  
  // Engagement Metrics
  subscribersGained Int      @default(0)
  subscribersLost   Int      @default(0)
  likesCount        Int      @default(0)
  commentsCount     Int      @default(0)
  sharesCount       Int      @default(0)
  
  // Traffic Sources
  browseFeatures    Int      @default(0)
  suggestedVideos   Int      @default(0)
  searchResults     Int      @default(0)
  externalSources   Int      @default(0)
  directPlaylists   Int      @default(0)
  
  // Demographics
  demographics      Json     @default("{}")
  geoData          Json     @default("{}")
  deviceTypes      Json     @default("{}")
  
  // Revenue Data
  estimatedRevenue  Float    @default(0.0)
  adImpressions     Int      @default(0)
  cpm               Float    @default(0.0)
  playbackBasedCpm  Float    @default(0.0)
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())

  @@unique([channelId, date, period])
  @@index([date, period])
  @@map("youtube_analytics")
}

model YouTubeVideoAnalytics {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  videoId           String
  video             YouTubeVideo @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  // Time Period
  date              DateTime
  period            String   // "daily", "weekly", "monthly"
  
  // View Metrics
  views             Int      @default(0)
  uniqueViewers     Int      @default(0)
  impressions       Int      @default(0)
  clickThroughRate  Float    @default(0.0)
  
  // Engagement Metrics
  likes             Int      @default(0)
  dislikes          Int      @default(0)
  comments          Int      @default(0)
  shares            Int      @default(0)
  subscribersGained Int      @default(0)
  
  // Watch Time
  watchTimeMinutes  Int      @default(0)
  averageViewDuration Float  @default(0.0)
  retentionRate     Float    @default(0.0)
  
  // Traffic & Discovery
  trafficSources    Json     @default("{}")
  searchTerms       String[] @default([])
  endScreenClicks   Int      @default(0)
  cardClicks        Int      @default(0)
  
  // Revenue
  estimatedRevenue  Float    @default(0.0)
  monetizedPlaybacks Int     @default(0)
  adImpressions     Int      @default(0)
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())

  @@unique([videoId, date, period])
  @@index([date, period])
  @@map("youtube_video_analytics")
}

model YouTubeSEOOptimization {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  videoId           String
  video             YouTubeVideo @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  // SEO Analysis
  targetKeywords    String[] @default([])
  currentRanking    Json     @default("{}")
  competitorAnalysis Json    @default("{}")
  
  // Optimization Suggestions
  titleSuggestions  String[] @default([])
  tagSuggestions    String[] @default([])
  descriptionSuggestions String[] @default([])
  thumbnailSuggestions String[] @default([])
  
  // Performance Tracking
  seoScore          Float    @default(0.0)
  searchVisibility  Float    @default(0.0)
  organicReach      Int      @default(0)
  
  // AI Insights
  aiRecommendations Json     @default("{}")
  trendAnalysis     Json     @default("{}")
  
  optimizedAt       DateTime @default(now())
  nextOptimization  DateTime?
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("youtube_seo_optimization")
}

model ContentSyndication {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  channelId         String?
  channel           YouTubeChannel? @relation(fields: [channelId], references: [id])
  videoId           String?
  video             YouTubeVideo? @relation(fields: [videoId], references: [id])
  
  // Syndication Details
  syndicationType   String   // "cross_platform", "scheduled_repost", "content_repurposing"
  targetPlatforms   String[] @default([])
  syndicationStatus String   @default("pending") // "pending", "processing", "completed", "failed"
  
  // Content Variations
  platformOptimized Json     @default("{}")
  customizations    Json     @default("{}")
  
  // Scheduling
  scheduledAt       DateTime?
  publishedAt       DateTime?
  
  // Performance
  syndicationResults Json    @default("{}")
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("content_syndication")
}

// Enhanced Viral Referral Models
model ViralGrowthAnalytics {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  
  // Time Period
  date              DateTime
  period            String   // "daily", "weekly", "monthly"
  
  // Viral Metrics
  viralCoefficient  Float    @default(0.0)
  k_factor          Float    @default(0.0)
  cycleTime         Float    @default(0.0) // Time for one viral cycle in hours
  
  // Growth Metrics
  organicUsers      Int      @default(0)
  referredUsers     Int      @default(0)
  totalInvites      Int      @default(0)
  acceptedInvites   Int      @default(0)
  inviteAcceptanceRate Float @default(0.0)
  
  // Content-Driven Growth
  contentViews      Int      @default(0)
  contentShares     Int      @default(0)
  contentReferrals  Int      @default(0)
  youtubeReferrals  Int      @default(0)
  
  // Platform Breakdown
  platformStats     Json     @default("{}")
  channelEffectiveness Json  @default("{}")
  
  // Cohort Analysis
  cohortData        Json     @default("{}")
  retentionCurves   Json     @default("{}")
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())

  @@unique([date, period, tenantId])
  @@index([period, date])
  @@map("viral_growth_analytics")
}

model ContentReferralTracking {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  videoId           String?
  video             YouTubeVideo? @relation(fields: [videoId], references: [id])
  
  // Referral Source
  contentType       String   // "youtube_video", "social_post", "blog_article", "email_campaign"
  contentId         String?
  contentTitle      String?
  contentUrl        String?
  
  // Referral Details
  referralCode      String?
  referralLink      String   @unique
  utm_source        String?
  utm_medium        String?
  utm_campaign      String?
  utm_content       String?
  
  // Performance Metrics
  clicks            Int      @default(0)
  uniqueClicks      Int      @default(0)
  conversions       Int      @default(0)
  conversionRate    Float    @default(0.0)
  
  // Attribution
  firstClick        DateTime?
  lastClick         DateTime?
  conversionWindow  Int      @default(30) // Days
  
  // Revenue Attribution
  attributedRevenue Float    @default(0.0)
  attributedUsers   Int      @default(0)
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([contentType, contentId])
  @@map("content_referral_tracking")
}

model SocialShareTracking {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  userId            String?
  user              User?    @relation(fields: [userId], references: [id])
  
  // Content Details
  contentType       String   // "youtube_video", "marketplace_widget", "case_study", "testimonial"
  contentId         String
  contentTitle      String?
  contentUrl        String
  
  // Share Details
  platform          String   // "facebook", "twitter", "linkedin", "instagram", "tiktok", "email", "whatsapp"
  shareType         String   // "native_share", "custom_share", "copy_link", "embed_code"
  
  // Tracking Data
  shareTimestamp    DateTime @default(now())
  ipAddress         String?
  userAgent         String?
  referrerUrl       String?
  
  // Performance Metrics
  clicks            Int      @default(0)
  engagements       Int      @default(0)
  conversions       Int      @default(0)
  
  // Viral Attribution
  viralDepth        Int      @default(1) // How many degrees of separation from original
  parentShareId     String?
  parentShare       SocialShareTracking? @relation("ViralChain", fields: [parentShareId], references: [id])
  childShares       SocialShareTracking[] @relation("ViralChain")
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())

  @@index([contentType, contentId])
  @@index([platform, shareTimestamp])
  @@map("social_share_tracking")
}

model InfluencerPartnership {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  influencerId      String
  influencer        User     @relation(fields: [influencerId], references: [id])
  
  // Partnership Details
  partnershipType   String   // "youtube_creator", "social_influencer", "industry_expert", "customer_advocate"
  status            String   @default("pending") // "pending", "active", "paused", "completed", "terminated"
  tier              String   @default("micro") // "nano", "micro", "macro", "mega", "celebrity"
  
  // Influencer Profile
  primaryPlatform   String   // "youtube", "instagram", "tiktok", "linkedin", "twitter"
  followersCount    Int      @default(0)
  engagementRate    Float    @default(0.0)
  audienceReach     Int      @default(0)
  
  // Partnership Terms
  compensationType  String   // "commission", "flat_fee", "revenue_share", "product_exchange"
  compensationAmount Float   @default(0.0)
  commissionRate    Float    @default(0.0)
  
  // Campaign Requirements
  contentRequirements Json   @default("{}")
  deliverables      Json     @default("{}")
  timeline          Json     @default("{}")
  
  // Performance Tracking
  contentCreated    Int      @default(0)
  totalReach        BigInt   @default(0)
  totalEngagements  Int      @default(0)
  conversions       Int      @default(0)
  revenue           Float    @default(0.0)
  
  // Contract Details
  startDate         DateTime
  endDate           DateTime?
  exclusivityPeriod Int?     // Days of exclusivity
  
  // Relations
  campaigns         InfluencerCampaign[]
  content           InfluencerContent[]
  analytics         InfluencerAnalytics[]
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("influencer_partnerships")
}

model InfluencerCampaign {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  partnershipId     String
  partnership       InfluencerPartnership @relation(fields: [partnershipId], references: [id], onDelete: Cascade)
  
  // Campaign Details
  name              String
  description       String?
  campaignType      String   // "product_launch", "brand_awareness", "referral_drive", "event_promotion"
  
  // Campaign Goals
  targetReach       Int?
  targetEngagements Int?
  targetConversions Int?
  targetRevenue     Float?
  
  // Timeline
  startDate         DateTime
  endDate           DateTime
  contentDeadline   DateTime?
  
  // Budget & Compensation
  budget            Float    @default(0.0)
  actualSpend       Float    @default(0.0)
  
  // Campaign Status
  status            String   @default("planning") // "planning", "active", "review", "completed", "cancelled"
  approvalStatus    String   @default("pending") // "pending", "approved", "rejected", "revision_required"
  
  // Performance Results
  actualReach       BigInt   @default(0)
  actualEngagements Int      @default(0)
  actualConversions Int      @default(0)
  actualRevenue     Float    @default(0.0)
  roi               Float    @default(0.0)
  
  // Relations
  content           InfluencerContent[]
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("influencer_campaigns")
}

model InfluencerContent {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  partnershipId     String
  partnership       InfluencerPartnership @relation(fields: [partnershipId], references: [id], onDelete: Cascade)
  campaignId        String?
  campaign          InfluencerCampaign? @relation(fields: [campaignId], references: [id])
  
  // Content Details
  contentType       String   // "youtube_video", "instagram_post", "tiktok_video", "blog_post", "story"
  platform          String
  title             String?
  description       String?
  contentUrl        String?
  
  // Publishing Info
  status            String   @default("draft") // "draft", "submitted", "approved", "published", "archived"
  submittedAt       DateTime?
  approvedAt        DateTime?
  publishedAt       DateTime?
  
  // Performance Metrics
  views             BigInt   @default(0)
  likes             Int      @default(0)
  comments          Int      @default(0)
  shares            Int      @default(0)
  saves             Int      @default(0)
  clickThroughs     Int      @default(0)
  
  // Referral Tracking
  referralCode      String?
  referralLink      String?
  referralClicks    Int      @default(0)
  referralConversions Int    @default(0)
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("influencer_content")
}

model InfluencerAnalytics {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  partnershipId     String
  partnership       InfluencerPartnership @relation(fields: [partnershipId], references: [id], onDelete: Cascade)
  
  // Time Period
  date              DateTime
  period            String   // "daily", "weekly", "monthly"
  
  // Performance Metrics
  reach             BigInt   @default(0)
  impressions       BigInt   @default(0)
  engagements       Int      @default(0)
  engagementRate    Float    @default(0.0)
  
  // Conversion Metrics
  clicks            Int      @default(0)
  conversions       Int      @default(0)
  conversionRate    Float    @default(0.0)
  
  // Revenue Metrics
  revenue           Float    @default(0.0)
  commission        Float    @default(0.0)
  roi               Float    @default(0.0)
  
  // Audience Insights
  audienceDemographics Json  @default("{}")
  audienceGrowth    Json     @default("{}")
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())

  @@unique([partnershipId, date, period])
  @@index([date, period])
  @@map("influencer_analytics")
}

// Advanced Analytics & AI Models
model PredictiveAnalytics {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  
  // Model Information
  modelType         String   // "user_churn", "revenue_forecast", "growth_prediction", "content_performance"
  modelVersion      String   @default("1.0")
  algorithm         String   // "linear_regression", "random_forest", "neural_network", "time_series"
  
  // Prediction Target
  targetMetric      String
  targetEntity      String?  // userId, videoId, campaignId, etc.
  predictionHorizon Int      // Days into the future
  
  // Prediction Results
  predictedValue    Float
  confidenceScore   Float    @default(0.0)
  predictionRange   Json     @default("{}")
  
  // Model Performance
  accuracy          Float?
  precision         Float?
  recall            Float?
  f1Score           Float?
  
  // Features Used
  inputFeatures     Json     @default("{}")
  featureImportance Json     @default("{}")
  
  // Prediction Context
  basePeriodStart   DateTime
  basePeriodEnd     DateTime
  predictionDate    DateTime
  actualValue       Float?
  actualRecordedAt  DateTime?
  
  // Model Status
  status            String   @default("active") // "active", "deprecated", "retrained"
  trainingDate      DateTime @default(now())
  nextRetrain       DateTime?
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())

  @@index([modelType, targetMetric])
  @@index([predictionDate, status])
  @@map("predictive_analytics")
}

model AIInsights {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  
  // Insight Classification
  insightType       String   // "opportunity", "risk", "trend", "anomaly", "recommendation"
  category          String   // "content", "referrals", "revenue", "user_behavior", "marketing"
  priority          String   @default("medium") // "low", "medium", "high", "critical"
  confidence        Float    @default(0.0)
  
  // Insight Content
  title             String
  description       String
  summary           String?
  detailedAnalysis  String?
  
  // Data Context
  relatedEntityType String?  // "user", "video", "campaign", "referral_program"
  relatedEntityId   String?
  affectedMetrics   String[] @default([])
  
  // AI Analysis
  generatedBy       String   // "gpt-4", "claude", "custom_model"
  analysisMethod    String   // "pattern_recognition", "statistical_analysis", "comparative_analysis"
  dataSourcesUsed   String[] @default([])
  
  // Recommendations
  actionableSteps   Json     @default("[]")
  expectedImpact    Json     @default("{}")
  implementationComplexity String @default("medium") // "low", "medium", "high"
  
  // Status & Follow-up
  status            String   @default("new") // "new", "reviewed", "implementing", "completed", "dismissed"
  reviewedBy        String?
  reviewedAt        DateTime?
  implementedAt     DateTime?
  
  // Impact Tracking
  actualImpact      Json?
  impactMeasuredAt  DateTime?
  
  // Validity Period
  validFrom         DateTime @default(now())
  validUntil        DateTime?
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([insightType, category])
  @@index([priority, status])
  @@index([validFrom, validUntil])
  @@map("ai_insights")
}

model TrendAnalysis {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  
  // Trend Identification
  trendType         String   // "growth", "decline", "cyclical", "seasonal", "anomaly"
  category          String   // "content_performance", "user_growth", "revenue", "engagement", "referrals"
  metricName        String
  
  // Trend Characteristics
  strength          Float    @default(0.0) // How strong the trend is (0-1)
  direction         String   // "upward", "downward", "stable", "volatile"
  duration          Int      // Days the trend has been ongoing
  acceleration      Float    @default(0.0) // Rate of change acceleration
  
  // Statistical Analysis
  startValue        Float
  currentValue      Float
  changePercent     Float
  slope             Float
  rSquared          Float
  pValue            Float?
  
  // Time Range
  analysisStart     DateTime
  analysisEnd       DateTime
  trendStart        DateTime?
  projectedEnd      DateTime?
  
  // Seasonal Patterns
  seasonalComponent Float?
  weeklyPattern     Json     @default("{}")
  monthlyPattern    Json     @default("{}")
  
  // Context & Causation
  correlatedEvents  Json     @default("[]")
  likelyCauses      Json     @default("[]")
  externalFactors   Json     @default("[]")
  
  // Predictions
  shortTermForecast Json     @default("{}")
  longTermForecast  Json     @default("{}")
  confidenceInterval Json    @default("{}")
  
  // Alert Configuration
  alertThreshold    Float?
  alertTriggered    Boolean  @default(false)
  alertLevel        String?  // "info", "warning", "critical"
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([category, metricName])
  @@index([trendType, strength])
  @@index([analysisStart, analysisEnd])
  @@map("trend_analysis")
}

model CompetitiveIntelligence {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  
  // Competitor Information
  competitorName    String
  competitorDomain  String?
  competitorType    String   // "direct", "indirect", "substitute", "emerging"
  industry          String?
  
  // Monitoring Configuration
  monitoringStatus  String   @default("active") // "active", "paused", "discontinued"
  dataSourcesUsed   String[] @default([])
  updateFrequency   String   @default("weekly") // "daily", "weekly", "monthly"
  
  // Performance Metrics
  marketShare       Float?
  estimatedRevenue  Float?
  userBase          Int?
  contentVolume     Int?
  socialFollowers   Json     @default("{}")
  
  // Content Analysis
  contentStrategy   Json     @default("{}")
  contentTypes      String[] @default([])
  publishingFrequency Float? // Posts per week
  engagementRates   Json     @default("{}")
  
  // Feature Analysis
  productFeatures   Json     @default("{}")
  pricingStrategy   Json     @default("{}")
  uniqueValueProps  String[] @default([])
  weaknesses        String[] @default([])
  
  // Market Positioning
  targetAudience    Json     @default("{}")
  brandMessaging    String?
  competitiveAdvantages String[] @default([])
  marketPosition    String   // "leader", "challenger", "follower", "niche"
  
  // Threat Assessment
  threatLevel       String   @default("medium") // "low", "medium", "high", "critical"
  growthRate        Float?
  innovationScore   Float?
  disruptionPotential Float?
  
  // Opportunity Analysis
  gapsIdentified    String[] @default([])
  opportunities     Json     @default("[]")
  recommendations   Json     @default("[]")
  
  // Data Collection
  lastUpdated       DateTime @default(now())
  nextUpdate        DateTime?
  dataFreshness     String   @default("current") // "current", "stale", "outdated"
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([competitorType, industry])
  @@index([threatLevel, marketPosition])
  @@index([lastUpdated, dataFreshness])
  @@map("competitive_intelligence")
}

model ContentPerformanceAnalytics {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  
  // Content Identification
  contentType       String   // "youtube_video", "blog_post", "social_post", "case_study", "testimonial"
  contentId         String
  contentTitle      String?
  contentUrl        String?
  creatorId         String?
  
  // Time Period
  date              DateTime
  period            String   // "daily", "weekly", "monthly"
  
  // Engagement Metrics
  views             BigInt   @default(0)
  uniqueViews       Int      @default(0)
  likes             Int      @default(0)
  comments          Int      @default(0)
  shares            Int      @default(0)
  saves             Int      @default(0)
  
  // Performance Metrics
  engagementRate    Float    @default(0.0)
  viralityScore     Float    @default(0.0)
  retentionRate     Float    @default(0.0)
  conversionRate    Float    @default(0.0)
  
  // SEO Metrics
  organicReach      Int      @default(0)
  searchRanking     Json     @default("{}")
  backlinks         Int      @default(0)
  domainAuthority   Float?
  
  // Referral Performance
  referralClicks    Int      @default(0)
  referralSignups   Int      @default(0)
  referralRevenue   Float    @default(0.0)
  
  // Content Quality Scores
  readabilityScore  Float?
  seoScore          Float?
  sentimentScore    Float?
  qualityScore      Float?
  
  // Audience Insights
  audienceDemographics Json  @default("{}")
  audienceBehavior  Json     @default("{}")
  retentionCurve    Json     @default("{}")
  
  // Competitive Comparison
  categoryAverage   Json     @default("{}")
  industryBenchmark Json     @default("{}")
  performanceRank   Int?
  
  // ROI Analysis
  productionCost    Float?
  promotionCost     Float?
  totalRevenue      Float    @default(0.0)
  roi               Float?
  
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())

  @@unique([contentId, date, period])
  @@index([contentType, date])
  @@index([viralityScore, engagementRate])
  @@map("content_performance_analytics")
}

// Event Store Model for Event Bus System
model EventStore {
  id            String   @id @default(cuid())
  eventType     String
  eventData     Json
  entityId      String?
  entityType    String?
  userId        String?
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  timestamp     DateTime @default(now())
  processed     Boolean  @default(false)
  retryCount    Int      @default(0)
  
  @@index([eventType, timestamp])
  @@index([entityId, entityType])
  @@index([processed, timestamp])
  @@map("event_store")
}

// Processed Data Model for Analytics Engine
model ProcessedData {
  id            String   @id @default(cuid())
  dataType      String
  dataSource    String
  processedData Json
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  processingDate DateTime
  metadata      Json     @default("{}")
  
  @@index([dataType, processingDate])
  @@index([tenantId, dataType])
  @@map("processed_data")
}

// Integration Model for Enterprise Integration Framework
model Integration {
  id            String   @id @default(cuid())
  name          String
  type          String
  status        String   @default("active")
  config        Json
  credentials   Json?
  lastSync      DateTime?
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([type, status])
  @@index([tenantId, status])
  @@map("integrations")
}

// Feature Flag Model for Feature Flag Service
model FeatureFlag {
  id            String               @id @default(cuid())
  key           String               @unique
  name          String
  description   String?
  type          String               @default("boolean")
  defaultValue  Json
  enabled       Boolean              @default(true)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  
  // Relations
  tenantFeatureFlags TenantFeatureFlag[]
  
  @@map("feature_flags")
}

// Tenant-specific Feature Flag overrides
model TenantFeatureFlag {
  id            String      @id @default(cuid())
  tenantId      String
  tenant        Tenant      @relation(fields: [tenantId], references: [id])
  featureFlagId String
  featureFlag   FeatureFlag @relation(fields: [featureFlagId], references: [id])
  value         Json
  enabled       Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@unique([tenantId, featureFlagId])
  @@map("tenant_feature_flags")
}

// Health Check Model for Production Readiness System
model HealthCheck {
  id            String   @id @default(cuid())
  serviceName   String
  checkType     String
  status        String   @default("unknown")
  responseTime  Int?
  details       Json     @default("{}")
  timestamp     DateTime @default(now())
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])
  
  @@index([serviceName, timestamp])
  @@index([status, timestamp])
  @@map("health_checks")
}

// Auto Recovery Action Model for Production Readiness System
model AutoRecoveryAction {
  id            String   @id @default(cuid())
  triggerType   String
  actionType    String
  config        Json
  executed      Boolean  @default(false)
  executedAt    DateTime?
  result        Json?
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])
  createdAt     DateTime @default(now())
  
  @@index([triggerType, executed])
  @@index([executedAt])
  @@map("auto_recovery_actions")
}

